
Module Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08008098  08008098  00018098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085ac  080085ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080085ac  080085ac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085ac  080085ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085ac  080085ac  000185ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080085b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200001dc  08008790  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08008790  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001601f  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000288f  00000000  00000000  00036224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00038ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00039a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004128  00000000  00000000  0003a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c7b  00000000  00000000  0003ead8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eaf2  00000000  00000000  00053753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2245  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005538  00000000  00000000  000e2298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008080 	.word	0x08008080

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008080 	.word	0x08008080

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <CheckCrc8>:
//	      snprintf(buffer, sizeof(buffer), "Temperature: --NONE--\r\n");
//	      HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
//	  }
//	  HAL_Delay(1000);  // Th�?i gian ch�? giữa các lần gửi (tùy ch�?n)
unsigned char  CheckCrc8(unsigned char *pDat,unsigned char Lenth)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
	unsigned char crc = 0xff, i, j;
 8000f50:	23ff      	movs	r3, #255	; 0xff
 8000f52:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < Lenth ; i++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	73bb      	strb	r3, [r7, #14]
 8000f58:	e022      	b.n	8000fa0 <CheckCrc8+0x5c>
	{
			crc = crc ^ *pDat;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	4053      	eors	r3, r2
 8000f62:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < 8; j++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	737b      	strb	r3, [r7, #13]
 8000f68:	e011      	b.n	8000f8e <CheckCrc8+0x4a>
			{
					if (crc & 0x80) crc = (crc << 1) ^ 0x31;
 8000f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	da07      	bge.n	8000f82 <CheckCrc8+0x3e>
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e002      	b.n	8000f88 <CheckCrc8+0x44>
					else crc <<= 1;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < 8; j++)
 8000f88:	7b7b      	ldrb	r3, [r7, #13]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	737b      	strb	r3, [r7, #13]
 8000f8e:	7b7b      	ldrb	r3, [r7, #13]
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	d9ea      	bls.n	8000f6a <CheckCrc8+0x26>
			}
			pDat++;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3301      	adds	r3, #1
 8000f98:	607b      	str	r3, [r7, #4]
	for (i = 0; i < Lenth ; i++)
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	73bb      	strb	r3, [r7, #14]
 8000fa0:	7bba      	ldrb	r2, [r7, #14]
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3d8      	bcc.n	8000f5a <CheckCrc8+0x16>
	}
	return crc;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <read_register>:

uint8_t read_register(uint8_t register_pointer)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
	uint8_t return_value = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(&hi2c1, ADDRESS_SLAVE_DHT20 << 1, (uint16_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 1, 100);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	2364      	movs	r3, #100	; 0x64
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	f107 030e 	add.w	r3, r7, #14
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	2170      	movs	r1, #112	; 0x70
 8000fdc:	4807      	ldr	r0, [pc, #28]	; (8000ffc <read_register+0x48>)
 8000fde:	f001 ffd3 	bl	8002f88 <HAL_I2C_Mem_Read>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
	/* Check the communication status */
	if(status != HAL_OK)
	{

	}
	printf("return_value for %X : %X \n",register_pointer, return_value);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	7bba      	ldrb	r2, [r7, #14]
 8000fea:	4619      	mov	r1, r3
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <read_register+0x4c>)
 8000fee:	f004 fe19 	bl	8005c24 <iprintf>
	return return_value;
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000210 	.word	0x20000210
 8001000:	08008098 	.word	0x08008098

08001004 <trigger_measurement_data_dht20>:


//Trigger measurement data
Status_Trigger_DHT20 trigger_measurement_data_dht20()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af02      	add	r7, sp, #8
	Status_Trigger_DHT20 status = DHT20_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	77fb      	strb	r3, [r7, #31]

	HAL_Delay(100);
 800100e:	2064      	movs	r0, #100	; 0x64
 8001010:	f001 f802 	bl	8002018 <HAL_Delay>
	uint8_t status_init = read_register(0x71);
 8001014:	2071      	movs	r0, #113	; 0x71
 8001016:	f7ff ffcd 	bl	8000fb4 <read_register>
 800101a:	4603      	mov	r3, r0
 800101c:	75fb      	strb	r3, [r7, #23]
	if ((status_init & 0x18) == 0x18) // et a byte of status word by sending 0x71. If the status word and 0x18 are not equal to 0x18
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	f003 0318 	and.w	r3, r3, #24
 8001024:	2b18      	cmp	r3, #24
 8001026:	f040 80b9 	bne.w	800119c <trigger_measurement_data_dht20+0x198>
	{
		HAL_Delay(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f000 fff4 	bl	8002018 <HAL_Delay>
		uint8_t data_t[3];
		data_t[0] = 0xAC; //address
 8001030:	23ac      	movs	r3, #172	; 0xac
 8001032:	733b      	strb	r3, [r7, #12]
		data_t[1] = 0x33; //data1
 8001034:	2333      	movs	r3, #51	; 0x33
 8001036:	737b      	strb	r3, [r7, #13]
		data_t[2] = 0x00; //data2
 8001038:	2300      	movs	r3, #0
 800103a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit (&hi2c1, ADDRESS_SLAVE_DHT20 << 1,(uint8_t *) data_t, 3, 100);
 800103c:	f107 020c 	add.w	r2, r7, #12
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2303      	movs	r3, #3
 8001046:	2170      	movs	r1, #112	; 0x70
 8001048:	4858      	ldr	r0, [pc, #352]	; (80011ac <trigger_measurement_data_dht20+0x1a8>)
 800104a:	f001 fc33 	bl	80028b4 <HAL_I2C_Master_Transmit>
		HAL_Delay(80);
 800104e:	2050      	movs	r0, #80	; 0x50
 8001050:	f000 ffe2 	bl	8002018 <HAL_Delay>

		uint8_t buffer[7];
		uint32_t data_read = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]

    // receive the 2 x 8bit data into the receive buffer
    HAL_I2C_Master_Receive(&hi2c1, ADDRESS_SLAVE_DHT20 << 1, buffer, 7, 100);
 8001058:	1d3a      	adds	r2, r7, #4
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2307      	movs	r3, #7
 8001060:	2170      	movs	r1, #112	; 0x70
 8001062:	4852      	ldr	r0, [pc, #328]	; (80011ac <trigger_measurement_data_dht20+0x1a8>)
 8001064:	f001 fd24 	bl	8002ab0 <HAL_I2C_Master_Receive>

		for (int i =0; i<7;i++)
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	e00b      	b.n	8001086 <trigger_measurement_data_dht20+0x82>
		{
			printf("bufffer %d: %X \n",i, buffer[i]);
 800106e:	1d3a      	adds	r2, r7, #4
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	69b9      	ldr	r1, [r7, #24]
 800107a:	484d      	ldr	r0, [pc, #308]	; (80011b0 <trigger_measurement_data_dht20+0x1ac>)
 800107c:	f004 fdd2 	bl	8005c24 <iprintf>
		for (int i =0; i<7;i++)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	3301      	adds	r3, #1
 8001084:	61bb      	str	r3, [r7, #24]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	2b06      	cmp	r3, #6
 800108a:	ddf0      	ble.n	800106e <trigger_measurement_data_dht20+0x6a>
		}

		// Check Bit[7] at Byte0
		if ((buffer[0] & 0x80) == 0x00)
 800108c:	793b      	ldrb	r3, [r7, #4]
 800108e:	b25b      	sxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	db79      	blt.n	8001188 <trigger_measurement_data_dht20+0x184>
		{
			// Check CRC
			if(CheckCrc8(&buffer[0],6)==buffer[6])
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2106      	movs	r1, #6
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff53 	bl	8000f44 <CheckCrc8>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	7abb      	ldrb	r3, [r7, #10]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d169      	bne.n	800117c <trigger_measurement_data_dht20+0x178>
			{
				printf("CRC OK \n");
 80010a8:	4842      	ldr	r0, [pc, #264]	; (80011b4 <trigger_measurement_data_dht20+0x1b0>)
 80010aa:	f004 fe41 	bl	8005d30 <puts>
				data_read=buffer[1]; //0x90
 80010ae:	797b      	ldrb	r3, [r7, #5]
 80010b0:	613b      	str	r3, [r7, #16]
				data_read=data_read<<8;// 0x9000
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	613b      	str	r3, [r7, #16]
				data_read+=buffer[2]; //0x9000 + 0x28 => 0x9028
 80010b8:	79bb      	ldrb	r3, [r7, #6]
 80010ba:	461a      	mov	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4413      	add	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
				data_read=data_read<<8; //0x902800
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	613b      	str	r3, [r7, #16]
				data_read+=buffer[3]; //0x902800 + 0x96 => 0x902896
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	461a      	mov	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4413      	add	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
				data_read=data_read>>4;				 // 0x902896 => 0x90289
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	613b      	str	r3, [r7, #16]

				RH = (float)data_read*100/1048576;
 80010d8:	6938      	ldr	r0, [r7, #16]
 80010da:	f7ff fd8b 	bl	8000bf4 <__aeabi_ui2f>
 80010de:	4603      	mov	r3, r0
 80010e0:	4935      	ldr	r1, [pc, #212]	; (80011b8 <trigger_measurement_data_dht20+0x1b4>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fdde 	bl	8000ca4 <__aeabi_fmul>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe8c 	bl	8000e0c <__aeabi_fdiv>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <trigger_measurement_data_dht20+0x1b8>)
 80010fa:	601a      	str	r2, [r3, #0]
				printf("RH %0.1f%% \n", RH);
 80010fc:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <trigger_measurement_data_dht20+0x1b8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f991 	bl	8000428 <__aeabi_f2d>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	482d      	ldr	r0, [pc, #180]	; (80011c0 <trigger_measurement_data_dht20+0x1bc>)
 800110c:	f004 fd8a 	bl	8005c24 <iprintf>

				data_read=buffer[3]&0x0F;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	613b      	str	r3, [r7, #16]
				data_read=data_read<<8;
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	613b      	str	r3, [r7, #16]
				data_read+=buffer[4];
 800111e:	7a3b      	ldrb	r3, [r7, #8]
 8001120:	461a      	mov	r2, r3
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4413      	add	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
				data_read=data_read<<8;
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	613b      	str	r3, [r7, #16]
				data_read+=buffer[5];
 800112e:	7a7b      	ldrb	r3, [r7, #9]
 8001130:	461a      	mov	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4413      	add	r3, r2
 8001136:	613b      	str	r3, [r7, #16]

				Temp = (float)data_read*200/1048576-50;
 8001138:	6938      	ldr	r0, [r7, #16]
 800113a:	f7ff fd5b 	bl	8000bf4 <__aeabi_ui2f>
 800113e:	4603      	mov	r3, r0
 8001140:	4920      	ldr	r1, [pc, #128]	; (80011c4 <trigger_measurement_data_dht20+0x1c0>)
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fdae 	bl	8000ca4 <__aeabi_fmul>
 8001148:	4603      	mov	r3, r0
 800114a:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fe5c 	bl	8000e0c <__aeabi_fdiv>
 8001154:	4603      	mov	r3, r0
 8001156:	491c      	ldr	r1, [pc, #112]	; (80011c8 <trigger_measurement_data_dht20+0x1c4>)
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fc99 	bl	8000a90 <__aeabi_fsub>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <trigger_measurement_data_dht20+0x1c8>)
 8001164:	601a      	str	r2, [r3, #0]
				printf("Temp %0.1f \n", Temp);
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <trigger_measurement_data_dht20+0x1c8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f95c 	bl	8000428 <__aeabi_f2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4816      	ldr	r0, [pc, #88]	; (80011d0 <trigger_measurement_data_dht20+0x1cc>)
 8001176:	f004 fd55 	bl	8005c24 <iprintf>
 800117a:	e011      	b.n	80011a0 <trigger_measurement_data_dht20+0x19c>
			}
			else
			{
				printf("CRC fail \n");
 800117c:	4815      	ldr	r0, [pc, #84]	; (80011d4 <trigger_measurement_data_dht20+0x1d0>)
 800117e:	f004 fdd7 	bl	8005d30 <puts>
				status = DHT20_ERROR_CRC;
 8001182:	2302      	movs	r3, #2
 8001184:	77fb      	strb	r3, [r7, #31]
 8001186:	e00b      	b.n	80011a0 <trigger_measurement_data_dht20+0x19c>
			}
		}
		else
		{
			printf("Check Bit[7] at Byte0: %x \n",buffer[0]&0x80);
 8001188:	793b      	ldrb	r3, [r7, #4]
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	4619      	mov	r1, r3
 8001190:	4811      	ldr	r0, [pc, #68]	; (80011d8 <trigger_measurement_data_dht20+0x1d4>)
 8001192:	f004 fd47 	bl	8005c24 <iprintf>
			status = DHT20_BUSY;
 8001196:	2303      	movs	r3, #3
 8001198:	77fb      	strb	r3, [r7, #31]
 800119a:	e001      	b.n	80011a0 <trigger_measurement_data_dht20+0x19c>
		}

	}
	else //  initialize the 0x1B, 0x1C, 0x1E registers
	{
		status = DHT20_ERROR_INIT;
 800119c:	2301      	movs	r3, #1
 800119e:	77fb      	strb	r3, [r7, #31]
	}
	return status;
 80011a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3720      	adds	r7, #32
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000210 	.word	0x20000210
 80011b0:	080080b4 	.word	0x080080b4
 80011b4:	080080c8 	.word	0x080080c8
 80011b8:	42c80000 	.word	0x42c80000
 80011bc:	200001f8 	.word	0x200001f8
 80011c0:	080080d0 	.word	0x080080d0
 80011c4:	43480000 	.word	0x43480000
 80011c8:	42480000 	.word	0x42480000
 80011cc:	200001fc 	.word	0x200001fc
 80011d0:	080080e0 	.word	0x080080e0
 80011d4:	080080f0 	.word	0x080080f0
 80011d8:	080080fc 	.word	0x080080fc

080011dc <getSend>:
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
void getSend(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b090      	sub	sp, #64	; 0x40
 80011e0:	af02      	add	r7, sp, #8
	Status_Trigger_DHT20 check_sensor = trigger_measurement_data_dht20();
 80011e2:	f7ff ff0f 	bl	8001004 <trigger_measurement_data_dht20>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  	  char buffer[50];  // Tăng kích thước buffer để chứa toàn bộ chuỗi

		  	  if (check_sensor == DHT20_OK)
 80011ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d144      	bne.n	800127e <getSend+0xa2>
		  	  {
		  	      snprintf(buffer, sizeof(buffer), "Humidity:%0.1f\r\n", RH);
 80011f4:	4b4a      	ldr	r3, [pc, #296]	; (8001320 <getSend+0x144>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f915 	bl	8000428 <__aeabi_f2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	1d38      	adds	r0, r7, #4
 8001204:	e9cd 2300 	strd	r2, r3, [sp]
 8001208:	4a46      	ldr	r2, [pc, #280]	; (8001324 <getSend+0x148>)
 800120a:	2132      	movs	r1, #50	; 0x32
 800120c:	f004 fda8 	bl	8005d60 <sniprintf>
		  	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f7fe ff9c 	bl	8000150 <strlen>
 8001218:	4603      	mov	r3, r0
 800121a:	b29a      	uxth	r2, r3
 800121c:	1d39      	adds	r1, r7, #4
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	4841      	ldr	r0, [pc, #260]	; (8001328 <getSend+0x14c>)
 8001224:	f003 fde2 	bl	8004dec <HAL_UART_Transmit>
		  	      lcd_goto_XY (1, 0);
 8001228:	2100      	movs	r1, #0
 800122a:	2001      	movs	r0, #1
 800122c:	f000 fe4a 	bl	8001ec4 <lcd_goto_XY>
		  	      lcd_send_string (buffer);
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fe2a 	bl	8001e8c <lcd_send_string>
		  	      snprintf(buffer, sizeof(buffer), "Temperature:%0.1f\r\n", Temp);
 8001238:	4b3c      	ldr	r3, [pc, #240]	; (800132c <getSend+0x150>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f8f3 	bl	8000428 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	1d38      	adds	r0, r7, #4
 8001248:	e9cd 2300 	strd	r2, r3, [sp]
 800124c:	4a38      	ldr	r2, [pc, #224]	; (8001330 <getSend+0x154>)
 800124e:	2132      	movs	r1, #50	; 0x32
 8001250:	f004 fd86 	bl	8005d60 <sniprintf>
		  	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4618      	mov	r0, r3
 8001258:	f7fe ff7a 	bl	8000150 <strlen>
 800125c:	4603      	mov	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	1d39      	adds	r1, r7, #4
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	4830      	ldr	r0, [pc, #192]	; (8001328 <getSend+0x14c>)
 8001268:	f003 fdc0 	bl	8004dec <HAL_UART_Transmit>


				  lcd_goto_XY (2, 0);
 800126c:	2100      	movs	r1, #0
 800126e:	2002      	movs	r0, #2
 8001270:	f000 fe28 	bl	8001ec4 <lcd_goto_XY>
				  lcd_send_string (buffer);
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fe08 	bl	8001e8c <lcd_send_string>
		  	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

		  	      snprintf(buffer, sizeof(buffer), "Temperature: --NONE--\r\n");
		  	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
		  	  }
}
 800127c:	e04c      	b.n	8001318 <getSend+0x13c>
		  	  else if (check_sensor == DHT20_BUSY)
 800127e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001282:	2b03      	cmp	r3, #3
 8001284:	d124      	bne.n	80012d0 <getSend+0xf4>
		  	      snprintf(buffer, sizeof(buffer), "Humidity: --BUSY--\r\n");
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4a2a      	ldr	r2, [pc, #168]	; (8001334 <getSend+0x158>)
 800128a:	2132      	movs	r1, #50	; 0x32
 800128c:	4618      	mov	r0, r3
 800128e:	f004 fd67 	bl	8005d60 <sniprintf>
		  	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	4618      	mov	r0, r3
 8001296:	f7fe ff5b 	bl	8000150 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	1d39      	adds	r1, r7, #4
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	4820      	ldr	r0, [pc, #128]	; (8001328 <getSend+0x14c>)
 80012a6:	f003 fda1 	bl	8004dec <HAL_UART_Transmit>
		  	      snprintf(buffer, sizeof(buffer), "Temperature: --BUSY--\r\n");
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4a22      	ldr	r2, [pc, #136]	; (8001338 <getSend+0x15c>)
 80012ae:	2132      	movs	r1, #50	; 0x32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f004 fd55 	bl	8005d60 <sniprintf>
		  	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7fe ff49 	bl	8000150 <strlen>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	1d39      	adds	r1, r7, #4
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	4817      	ldr	r0, [pc, #92]	; (8001328 <getSend+0x14c>)
 80012ca:	f003 fd8f 	bl	8004dec <HAL_UART_Transmit>
}
 80012ce:	e023      	b.n	8001318 <getSend+0x13c>
		  	      snprintf(buffer, sizeof(buffer), "Humidity: --NONE--\r\n");
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4a1a      	ldr	r2, [pc, #104]	; (800133c <getSend+0x160>)
 80012d4:	2132      	movs	r1, #50	; 0x32
 80012d6:	4618      	mov	r0, r3
 80012d8:	f004 fd42 	bl	8005d60 <sniprintf>
		  	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ff36 	bl	8000150 <strlen>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	1d39      	adds	r1, r7, #4
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	480e      	ldr	r0, [pc, #56]	; (8001328 <getSend+0x14c>)
 80012f0:	f003 fd7c 	bl	8004dec <HAL_UART_Transmit>
		  	      snprintf(buffer, sizeof(buffer), "Temperature: --NONE--\r\n");
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <getSend+0x164>)
 80012f8:	2132      	movs	r1, #50	; 0x32
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 fd30 	bl	8005d60 <sniprintf>
		  	      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4618      	mov	r0, r3
 8001304:	f7fe ff24 	bl	8000150 <strlen>
 8001308:	4603      	mov	r3, r0
 800130a:	b29a      	uxth	r2, r3
 800130c:	1d39      	adds	r1, r7, #4
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <getSend+0x14c>)
 8001314:	f003 fd6a 	bl	8004dec <HAL_UART_Transmit>
}
 8001318:	bf00      	nop
 800131a:	3738      	adds	r7, #56	; 0x38
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200001f8 	.word	0x200001f8
 8001324:	08008118 	.word	0x08008118
 8001328:	20000300 	.word	0x20000300
 800132c:	200001fc 	.word	0x200001fc
 8001330:	0800812c 	.word	0x0800812c
 8001334:	08008140 	.word	0x08008140
 8001338:	08008158 	.word	0x08008158
 800133c:	08008170 	.word	0x08008170
 8001340:	08008188 	.word	0x08008188

08001344 <blinkyled>:

void blinkyled(){
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8001348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <blinkyled+0x14>)
 800134e:	f001 f931 	bl	80025b4 <HAL_GPIO_TogglePin>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40011000 	.word	0x40011000

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001360:	f000 fdf8 	bl	8001f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001364:	f000 f828 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001368:	f000 f93a 	bl	80015e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800136c:	f000 f8c2 	bl	80014f4 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001370:	f000 f892 	bl	8001498 <MX_I2C2_Init>
  MX_I2C1_Init();
 8001374:	f000 f862 	bl	800143c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001378:	f000 f908 	bl	800158c <MX_USART2_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <main+0x50>)
 800137e:	f003 f943 	bl	8004608 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8001382:	f000 f9ab 	bl	80016dc <SCH_Init>
  lcd_init();
 8001386:	f000 fd53 	bl	8001e30 <lcd_init>
  lcd_clear_display();
 800138a:	f000 fd94 	bl	8001eb6 <lcd_clear_display>


  SCH_Add_Task(getSend, 10, 1000);
 800138e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001392:	210a      	movs	r1, #10
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <main+0x54>)
 8001396:	f000 fa17 	bl	80017c8 <SCH_Add_Task>
  SCH_Add_Task(blinkyled, 0, 1000);
 800139a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800139e:	2100      	movs	r1, #0
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <main+0x58>)
 80013a2:	f000 fa11 	bl	80017c8 <SCH_Add_Task>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  SCH_Dispatch_Tasks();
 80013a6:	f000 fa9b 	bl	80018e0 <SCH_Dispatch_Tasks>
 80013aa:	e7fc      	b.n	80013a6 <main+0x4a>
 80013ac:	200002b8 	.word	0x200002b8
 80013b0:	080011dd 	.word	0x080011dd
 80013b4:	08001345 	.word	0x08001345

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b090      	sub	sp, #64	; 0x40
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	2228      	movs	r2, #40	; 0x28
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 ff1e 	bl	8005208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013de:	2301      	movs	r3, #1
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e2:	2310      	movs	r3, #16
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e6:	2302      	movs	r3, #2
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80013ea:	2300      	movs	r3, #0
 80013ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80013ee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fca7 	bl	8003d4c <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001404:	f000 f964 	bl	80016d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001408:	230f      	movs	r3, #15
 800140a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140c:	2302      	movs	r3, #2
 800140e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2102      	movs	r1, #2
 8001422:	4618      	mov	r0, r3
 8001424:	f002 ff12 	bl	800424c <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800142e:	f000 f94f 	bl	80016d0 <Error_Handler>
  }
}
 8001432:	bf00      	nop
 8001434:	3740      	adds	r7, #64	; 0x40
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_I2C1_Init+0x50>)
 8001442:	4a13      	ldr	r2, [pc, #76]	; (8001490 <MX_I2C1_Init+0x54>)
 8001444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_I2C1_Init+0x50>)
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <MX_I2C1_Init+0x58>)
 800144a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_I2C1_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_I2C1_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_I2C1_Init+0x50>)
 800145a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <MX_I2C1_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_I2C1_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_I2C1_Init+0x50>)
 800147a:	f001 f8d7 	bl	800262c <HAL_I2C_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001484:	f000 f924 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000210 	.word	0x20000210
 8001490:	40005400 	.word	0x40005400
 8001494:	000186a0 	.word	0x000186a0

08001498 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <MX_I2C2_Init+0x50>)
 800149e:	4a13      	ldr	r2, [pc, #76]	; (80014ec <MX_I2C2_Init+0x54>)
 80014a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <MX_I2C2_Init+0x58>)
 80014a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014d6:	f001 f8a9 	bl	800262c <HAL_I2C_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014e0:	f000 f8f6 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000264 	.word	0x20000264
 80014ec:	40005800 	.word	0x40005800
 80014f0:	000186a0 	.word	0x000186a0

080014f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <MX_TIM2_Init+0x94>)
 8001512:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001516:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_TIM2_Init+0x94>)
 800151a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800151e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <MX_TIM2_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_TIM2_Init+0x94>)
 8001528:	2209      	movs	r2, #9
 800152a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_TIM2_Init+0x94>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <MX_TIM2_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001538:	4813      	ldr	r0, [pc, #76]	; (8001588 <MX_TIM2_Init+0x94>)
 800153a:	f003 f815 	bl	8004568 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001544:	f000 f8c4 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <MX_TIM2_Init+0x94>)
 8001556:	f003 f999 	bl	800488c <HAL_TIM_ConfigClockSource>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001560:	f000 f8b6 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_TIM2_Init+0x94>)
 8001572:	f003 fb7b 	bl	8004c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800157c:	f000 f8a8 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200002b8 	.word	0x200002b8

0800158c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_USART2_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001598:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f003 fbc2 	bl	8004d4c <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f000 f87f 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000300 	.word	0x20000300
 80015dc:	40004400 	.word	0x40004400

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f4:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <MX_GPIO_Init+0xd0>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a2d      	ldr	r2, [pc, #180]	; (80016b0 <MX_GPIO_Init+0xd0>)
 80015fa:	f043 0310 	orr.w	r3, r3, #16
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <MX_GPIO_Init+0xd0>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001612:	f043 0320 	orr.w	r3, r3, #32
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <MX_GPIO_Init+0xd0>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <MX_GPIO_Init+0xd0>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <MX_GPIO_Init+0xd0>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <MX_GPIO_Init+0xd0>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800165a:	4816      	ldr	r0, [pc, #88]	; (80016b4 <MX_GPIO_Init+0xd4>)
 800165c:	f000 ff92 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_GPIO_Init+0xd8>)
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4619      	mov	r1, r3
 8001674:	480f      	ldr	r0, [pc, #60]	; (80016b4 <MX_GPIO_Init+0xd4>)
 8001676:	f000 fe01 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800167a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800167e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2302      	movs	r3, #2
 800168a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4619      	mov	r1, r3
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <MX_GPIO_Init+0xd4>)
 8001694:	f000 fdf2 	bl	800227c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2028      	movs	r0, #40	; 0x28
 800169e:	f000 fdb6 	bl	800220e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016a2:	2028      	movs	r0, #40	; 0x28
 80016a4:	f000 fdcf 	bl	8002246 <HAL_NVIC_EnableIRQ>

}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40011000 	.word	0x40011000
 80016b8:	10110000 	.word	0x10110000

080016bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
	{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
		SCH_Update();
 80016c4:	f000 f8c8 	bl	8001858 <SCH_Update>
	}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <Error_Handler+0x8>
	...

080016dc <SCH_Init>:
uint32_t IDtoPrint; //to save ID just ran task to Print after calling Dispatch

uint8_t Error_code_G;


void SCH_Init(void){
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
	headtask = NULL;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <SCH_Init+0x2c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
	taskcount = 0;
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <SCH_Init+0x30>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
	waittime = 0;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <SCH_Init+0x34>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
	availableID = 1;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <SCH_Init+0x38>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
	IDtoPrint = 0;
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <SCH_Init+0x3c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000350 	.word	0x20000350
 800170c:	2000034c 	.word	0x2000034c
 8001710:	20000358 	.word	0x20000358
 8001714:	20000348 	.word	0x20000348
 8001718:	20000354 	.word	0x20000354

0800171c <enqueue>:



void enqueue(sTask* newtask){
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	if (headtask == NULL){
 8001724:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <enqueue+0xa8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d103      	bne.n	8001734 <enqueue+0x18>
		headtask = newtask;
 800172c:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <enqueue+0xa8>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
		return;
 8001732:	e043      	b.n	80017bc <enqueue+0xa0>
	}

	sTask* now = headtask;
 8001734:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <enqueue+0xa8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
	sTask* pre = NULL;
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]

	while (now != NULL)
 800173e:	e033      	b.n	80017a8 <enqueue+0x8c>
	{
		if (now->Delay > newtask->Delay)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	d921      	bls.n	8001790 <enqueue+0x74>
		{
			if (now == headtask)
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <enqueue+0xa8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	429a      	cmp	r2, r3
 8001754:	d10e      	bne.n	8001774 <enqueue+0x58>
			{
				newtask->next = headtask;
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <enqueue+0xa8>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	615a      	str	r2, [r3, #20]
				headtask = newtask;
 800175e:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <enqueue+0xa8>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6013      	str	r3, [r2, #0]
				now->Delay -= newtask->Delay;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	1ad2      	subs	r2, r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	605a      	str	r2, [r3, #4]
			{
				newtask->next = now;
				pre->next = newtask;
				now->Delay -= newtask->Delay;
			}
			return;
 8001772:	e023      	b.n	80017bc <enqueue+0xa0>
				newtask->next = now;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	615a      	str	r2, [r3, #20]
				pre->next = newtask;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	615a      	str	r2, [r3, #20]
				now->Delay -= newtask->Delay;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	1ad2      	subs	r2, r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	605a      	str	r2, [r3, #4]
			return;
 800178e:	e015      	b.n	80017bc <enqueue+0xa0>
		}


		newtask->Delay -= now->Delay;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	1ad2      	subs	r2, r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	605a      	str	r2, [r3, #4]
		pre = now;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
		now = now->next;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	60fb      	str	r3, [r7, #12]
	while (now != NULL)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1c8      	bne.n	8001740 <enqueue+0x24>
	}


	if (now == NULL)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d103      	bne.n	80017bc <enqueue+0xa0>
		{
			pre->next = newtask;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	615a      	str	r2, [r3, #20]
			return;
 80017ba:	bf00      	nop
		}



}
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	20000350 	.word	0x20000350

080017c8 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]

	if (taskcount > SCH_MAX_TASKS) {
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <SCH_Add_Task+0x80>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b0a      	cmp	r3, #10
 80017da:	d902      	bls.n	80017e2 <SCH_Add_Task+0x1a>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <SCH_Add_Task+0x84>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
	}
	taskcount++;
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <SCH_Add_Task+0x80>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a17      	ldr	r2, [pc, #92]	; (8001848 <SCH_Add_Task+0x80>)
 80017ea:	6013      	str	r3, [r2, #0]
	sTask* newtask = malloc(sizeof(sTask));
 80017ec:	2018      	movs	r0, #24
 80017ee:	f003 fcfb 	bl	80051e8 <malloc>
 80017f2:	4603      	mov	r3, r0
 80017f4:	617b      	str	r3, [r7, #20]
	if (newtask == NULL) return 0;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <SCH_Add_Task+0x38>
 80017fc:	2300      	movs	r3, #0
 80017fe:	e01f      	b.n	8001840 <SCH_Add_Task+0x78>

	newtask->pTask = pFunction;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	601a      	str	r2, [r3, #0]
	newtask->Delay = DELAY / TICK;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	4a11      	ldr	r2, [pc, #68]	; (8001850 <SCH_Add_Task+0x88>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	605a      	str	r2, [r3, #4]
	newtask->Period = PERIOD / TICK;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <SCH_Add_Task+0x88>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	609a      	str	r2, [r3, #8]
	newtask->TaskID = availableID++;
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <SCH_Add_Task+0x8c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	490a      	ldr	r1, [pc, #40]	; (8001854 <SCH_Add_Task+0x8c>)
 800182a:	600a      	str	r2, [r1, #0]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	6113      	str	r3, [r2, #16]
	newtask->next = NULL;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]

	enqueue(newtask);
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff70 	bl	800171c <enqueue>

	return newtask->TaskID;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	691b      	ldr	r3, [r3, #16]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	2000034c 	.word	0x2000034c
 800184c:	20000200 	.word	0x20000200
 8001850:	cccccccd 	.word	0xcccccccd
 8001854:	20000348 	.word	0x20000348

08001858 <SCH_Update>:

void SCH_Update(void){
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
	if (headtask == NULL){
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <SCH_Update+0x7c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10b      	bne.n	800187e <SCH_Update+0x26>
		waittime = (taskcount > 0) ? waittime + 1 : 0;
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <SCH_Update+0x80>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <SCH_Update+0x1e>
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <SCH_Update+0x84>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	e000      	b.n	8001878 <SCH_Update+0x20>
 8001876:	2300      	movs	r3, #0
 8001878:	4a18      	ldr	r2, [pc, #96]	; (80018dc <SCH_Update+0x84>)
 800187a:	6013      	str	r3, [r2, #0]
		return;
 800187c:	e025      	b.n	80018ca <SCH_Update+0x72>
	}
	waittime++;
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <SCH_Update+0x84>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	4a15      	ldr	r2, [pc, #84]	; (80018dc <SCH_Update+0x84>)
 8001886:	6013      	str	r3, [r2, #0]
	if (headtask->Delay > 0){
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <SCH_Update+0x7c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d01a      	beq.n	80018c8 <SCH_Update+0x70>
		int temp = headtask->Delay - waittime;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <SCH_Update+0x7c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <SCH_Update+0x84>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	607b      	str	r3, [r7, #4]
		if (temp >= 0) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db07      	blt.n	80018b6 <SCH_Update+0x5e>
			headtask->Delay = temp;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <SCH_Update+0x7c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	605a      	str	r2, [r3, #4]
			waittime = 0;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <SCH_Update+0x84>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
			headtask->Delay = 0;
			waittime = 0 - temp;
		}
	}

	return;
 80018b4:	e008      	b.n	80018c8 <SCH_Update+0x70>
			headtask->Delay = 0;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <SCH_Update+0x7c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
			waittime = 0 - temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	425b      	negs	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SCH_Update+0x84>)
 80018c6:	601a      	str	r2, [r3, #0]
	return;
 80018c8:	bf00      	nop

}
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000350 	.word	0x20000350
 80018d8:	2000034c 	.word	0x2000034c
 80018dc:	20000358 	.word	0x20000358

080018e0 <SCH_Dispatch_Tasks>:

uint8_t SCH_Dispatch_Tasks(void){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
	if (headtask == NULL || headtask->Delay > 0) return 0;
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <SCH_Dispatch_Tasks+0x68>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <SCH_Dispatch_Tasks+0x18>
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <SCH_Dispatch_Tasks+0x68>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SCH_Dispatch_Tasks+0x1c>
 80018f8:	2300      	movs	r3, #0
 80018fa:	e021      	b.n	8001940 <SCH_Dispatch_Tasks+0x60>
	sTask* run = headtask;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <SCH_Dispatch_Tasks+0x68>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	607b      	str	r3, [r7, #4]
	headtask = headtask->next;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <SCH_Dispatch_Tasks+0x68>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <SCH_Dispatch_Tasks+0x68>)
 800190a:	6013      	str	r3, [r2, #0]
	run->next = NULL;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
	run->Delay = run->Period;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	605a      	str	r2, [r3, #4]

	run->pTask();
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4798      	blx	r3

	IDtoPrint = run->TaskID; // để mà in ra
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	4a09      	ldr	r2, [pc, #36]	; (800194c <SCH_Dispatch_Tasks+0x6c>)
 8001926:	6013      	str	r3, [r2, #0]

	if (run->Period != 0) enqueue(run);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <SCH_Dispatch_Tasks+0x58>
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fef3 	bl	800171c <enqueue>
 8001936:	e002      	b.n	800193e <SCH_Dispatch_Tasks+0x5e>
	else free(run);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f003 fc5d 	bl	80051f8 <free>
	return 1;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000350 	.word	0x20000350
 800194c:	20000354 	.word	0x20000354

08001950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_MspInit+0x5c>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4a14      	ldr	r2, [pc, #80]	; (80019ac <HAL_MspInit+0x5c>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6193      	str	r3, [r2, #24]
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_MspInit+0x5c>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_MspInit+0x5c>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_MspInit+0x5c>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	61d3      	str	r3, [r2, #28]
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_MspInit+0x5c>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_MspInit+0x60>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <HAL_MspInit+0x60>)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010000 	.word	0x40010000

080019b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	; 0x30
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a32      	ldr	r2, [pc, #200]	; (8001a98 <HAL_I2C_MspInit+0xe4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d133      	bne.n	8001a3c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d4:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <HAL_I2C_MspInit+0xe8>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a30      	ldr	r2, [pc, #192]	; (8001a9c <HAL_I2C_MspInit+0xe8>)
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <HAL_I2C_MspInit+0xe8>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f2:	2312      	movs	r3, #18
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4827      	ldr	r0, [pc, #156]	; (8001aa0 <HAL_I2C_MspInit+0xec>)
 8001a02:	f000 fc3b 	bl	800227c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_I2C_MspInit+0xf0>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a1c:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <HAL_I2C_MspInit+0xf0>)
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a22:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_I2C_MspInit+0xe8>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_I2C_MspInit+0xe8>)
 8001a28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a2c:	61d3      	str	r3, [r2, #28]
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_I2C_MspInit+0xe8>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a3a:	e029      	b.n	8001a90 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_I2C_MspInit+0xf4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d124      	bne.n	8001a90 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_I2C_MspInit+0xe8>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <HAL_I2C_MspInit+0xe8>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	6193      	str	r3, [r2, #24]
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_I2C_MspInit+0xe8>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a64:	2312      	movs	r3, #18
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <HAL_I2C_MspInit+0xec>)
 8001a74:	f000 fc02 	bl	800227c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_I2C_MspInit+0xe8>)
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_I2C_MspInit+0xe8>)
 8001a7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a82:	61d3      	str	r3, [r2, #28]
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_I2C_MspInit+0xe8>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3730      	adds	r7, #48	; 0x30
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40005400 	.word	0x40005400
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010c00 	.word	0x40010c00
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40005800 	.word	0x40005800

08001aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001abc:	d113      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_TIM_Base_MspInit+0x44>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <HAL_TIM_Base_MspInit+0x44>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	61d3      	str	r3, [r2, #28]
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_TIM_Base_MspInit+0x44>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	201c      	movs	r0, #28
 8001adc:	f000 fb97 	bl	800220e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae0:	201c      	movs	r0, #28
 8001ae2:	f000 fbb0 	bl	8002246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <HAL_UART_MspInit+0x70>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d123      	bne.n	8001b5c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_UART_MspInit+0x74>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <HAL_UART_MspInit+0x74>)
 8001b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1e:	61d3      	str	r3, [r2, #28]
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_UART_MspInit+0x74>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_UART_MspInit+0x74>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <HAL_UART_MspInit+0x74>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_UART_MspInit+0x74>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b44:	230c      	movs	r3, #12
 8001b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	4619      	mov	r1, r3
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <HAL_UART_MspInit+0x78>)
 8001b58:	f000 fb90 	bl	800227c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b5c:	bf00      	nop
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40004400 	.word	0x40004400
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010800 	.word	0x40010800

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <NMI_Handler+0x4>

08001b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <MemManage_Handler+0x4>

08001b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <BusFault_Handler+0x4>

08001b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <UsageFault_Handler+0x4>

08001b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb6:	f000 fa13 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <TIM2_IRQHandler+0x10>)
 8001bc6:	f002 fd71 	bl	80046ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200002b8 	.word	0x200002b8

08001bd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bdc:	f000 fd04 	bl	80025e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
	return 1;
 8001be8:	2301      	movs	r3, #1
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <_kill>:

int _kill(int pid, int sig)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bfc:	f003 faca 	bl	8005194 <__errno>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2216      	movs	r2, #22
 8001c04:	601a      	str	r2, [r3, #0]
	return -1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <_exit>:

void _exit (int status)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffe7 	bl	8001bf2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c24:	e7fe      	b.n	8001c24 <_exit+0x12>

08001c26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e00a      	b.n	8001c4e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c38:	f3af 8000 	nop.w
 8001c3c:	4601      	mov	r1, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	60ba      	str	r2, [r7, #8]
 8001c44:	b2ca      	uxtb	r2, r1
 8001c46:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	dbf0      	blt.n	8001c38 <_read+0x12>
	}

return len;
 8001c56:	687b      	ldr	r3, [r7, #4]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	e009      	b.n	8001c86 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	60ba      	str	r2, [r7, #8]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dbf1      	blt.n	8001c72 <_write+0x12>
	}
	return len;
 8001c8e:	687b      	ldr	r3, [r7, #4]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_close>:

int _close(int file)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	return -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <_isatty>:

int _isatty(int file)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	return 1;
 8001cd4:	2301      	movs	r3, #1
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
	return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f003 fa34 	bl	8005194 <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20005000 	.word	0x20005000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	20000204 	.word	0x20000204
 8001d60:	20000370 	.word	0x20000370

08001d64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f023 030f 	bic.w	r3, r3, #15
 8001d80:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	f043 030c 	orr.w	r3, r3, #12
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	f043 030c 	orr.w	r3, r3, #12
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001da6:	7bbb      	ldrb	r3, [r7, #14]
 8001da8:	f043 0308 	orr.w	r3, r3, #8
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001db0:	f107 0208 	add.w	r2, r7, #8
 8001db4:	2364      	movs	r3, #100	; 0x64
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2304      	movs	r3, #4
 8001dba:	2142      	movs	r1, #66	; 0x42
 8001dbc:	4803      	ldr	r0, [pc, #12]	; (8001dcc <lcd_send_cmd+0x5c>)
 8001dbe:	f000 fd79 	bl	80028b4 <HAL_I2C_Master_Transmit>
}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000210 	.word	0x20000210

08001dd0 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f023 030f 	bic.w	r3, r3, #15
 8001de0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	f043 030d 	orr.w	r3, r3, #13
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	f043 0309 	orr.w	r3, r3, #9
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001dfc:	7bbb      	ldrb	r3, [r7, #14]
 8001dfe:	f043 030d 	orr.w	r3, r3, #13
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	f043 0309 	orr.w	r3, r3, #9
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e10:	f107 0208 	add.w	r2, r7, #8
 8001e14:	2364      	movs	r3, #100	; 0x64
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2304      	movs	r3, #4
 8001e1a:	2142      	movs	r1, #66	; 0x42
 8001e1c:	4803      	ldr	r0, [pc, #12]	; (8001e2c <lcd_send_data+0x5c>)
 8001e1e:	f000 fd49 	bl	80028b4 <HAL_I2C_Master_Transmit>
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000210 	.word	0x20000210

08001e30 <lcd_init>:

void lcd_init (void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001e34:	2033      	movs	r0, #51	; 0x33
 8001e36:	f7ff ff9b 	bl	8001d70 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8001e3a:	2032      	movs	r0, #50	; 0x32
 8001e3c:	f7ff ff98 	bl	8001d70 <lcd_send_cmd>
	HAL_Delay(50);
 8001e40:	2032      	movs	r0, #50	; 0x32
 8001e42:	f000 f8e9 	bl	8002018 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001e46:	2028      	movs	r0, #40	; 0x28
 8001e48:	f7ff ff92 	bl	8001d70 <lcd_send_cmd>
	HAL_Delay(50);
 8001e4c:	2032      	movs	r0, #50	; 0x32
 8001e4e:	f000 f8e3 	bl	8002018 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff ff8c 	bl	8001d70 <lcd_send_cmd>
	HAL_Delay(50);
 8001e58:	2032      	movs	r0, #50	; 0x32
 8001e5a:	f000 f8dd 	bl	8002018 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8001e5e:	2006      	movs	r0, #6
 8001e60:	f7ff ff86 	bl	8001d70 <lcd_send_cmd>
	HAL_Delay(50);
 8001e64:	2032      	movs	r0, #50	; 0x32
 8001e66:	f000 f8d7 	bl	8002018 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8001e6a:	200c      	movs	r0, #12
 8001e6c:	f7ff ff80 	bl	8001d70 <lcd_send_cmd>
	HAL_Delay(50);
 8001e70:	2032      	movs	r0, #50	; 0x32
 8001e72:	f000 f8d1 	bl	8002018 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001e76:	2002      	movs	r0, #2
 8001e78:	f7ff ff7a 	bl	8001d70 <lcd_send_cmd>
	HAL_Delay(50);
 8001e7c:	2032      	movs	r0, #50	; 0x32
 8001e7e:	f000 f8cb 	bl	8002018 <HAL_Delay>
	lcd_send_cmd (0x80);
 8001e82:	2080      	movs	r0, #128	; 0x80
 8001e84:	f7ff ff74 	bl	8001d70 <lcd_send_cmd>
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001e94:	e006      	b.n	8001ea4 <lcd_send_string+0x18>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff96 	bl	8001dd0 <lcd_send_data>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f4      	bne.n	8001e96 <lcd_send_string+0xa>
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f7ff ff58 	bl	8001d70 <lcd_send_cmd>
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d108      	bne.n	8001ee6 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	337f      	adds	r3, #127	; 0x7f
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e008      	b.n	8001ef8 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	3340      	adds	r3, #64	; 0x40
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ef4:	b25b      	sxtb	r3, r3
 8001ef6:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff38 	bl	8001d70 <lcd_send_cmd>
}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f08:	f7ff ff2c 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f0c:	480b      	ldr	r0, [pc, #44]	; (8001f3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f0e:	490c      	ldr	r1, [pc, #48]	; (8001f40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f10:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f24:	4c09      	ldr	r4, [pc, #36]	; (8001f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f32:	f003 f935 	bl	80051a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f36:	f7ff fa11 	bl	800135c <main>
  bx lr
 8001f3a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f40:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f44:	080085b4 	.word	0x080085b4
  ldr r2, =_sbss
 8001f48:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f4c:	20000370 	.word	0x20000370

08001f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f50:	e7fe      	b.n	8001f50 <ADC1_2_IRQHandler>
	...

08001f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_Init+0x28>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_Init+0x28>)
 8001f5e:	f043 0310 	orr.w	r3, r3, #16
 8001f62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f000 f947 	bl	80021f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f000 f808 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f70:	f7ff fcee 	bl	8001950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40022000 	.word	0x40022000

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_InitTick+0x54>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_InitTick+0x58>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f95f 	bl	8002262 <HAL_SYSTICK_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00e      	b.n	8001fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d80a      	bhi.n	8001fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f000 f927 	bl	800220e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc0:	4a06      	ldr	r2, [pc, #24]	; (8001fdc <HAL_InitTick+0x5c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <HAL_IncTick+0x1c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_IncTick+0x20>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a03      	ldr	r2, [pc, #12]	; (8002000 <HAL_IncTick+0x20>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	20000008 	.word	0x20000008
 8002000:	2000035c 	.word	0x2000035c

08002004 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return uwTick;
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <HAL_GetTick+0x10>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	2000035c 	.word	0x2000035c

08002018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff fff0 	bl	8002004 <HAL_GetTick>
 8002024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d005      	beq.n	800203e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_Delay+0x44>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800203e:	bf00      	nop
 8002040:	f7ff ffe0 	bl	8002004 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d8f7      	bhi.n	8002040 <HAL_Delay+0x28>
  {
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000008 	.word	0x20000008

08002060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800208c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002092:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	60d3      	str	r3, [r2, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	f003 0307 	and.w	r3, r3, #7
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	db0b      	blt.n	80020ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	4906      	ldr	r1, [pc, #24]	; (80020f8 <__NVIC_EnableIRQ+0x34>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	2001      	movs	r0, #1
 80020e6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db0a      	blt.n	8002126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	490c      	ldr	r1, [pc, #48]	; (8002148 <__NVIC_SetPriority+0x4c>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	440b      	add	r3, r1
 8002120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002124:	e00a      	b.n	800213c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4908      	ldr	r1, [pc, #32]	; (800214c <__NVIC_SetPriority+0x50>)
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3b04      	subs	r3, #4
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	440b      	add	r3, r1
 800213a:	761a      	strb	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000e100 	.word	0xe000e100
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f1c3 0307 	rsb	r3, r3, #7
 800216a:	2b04      	cmp	r3, #4
 800216c:	bf28      	it	cs
 800216e:	2304      	movcs	r3, #4
 8002170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3304      	adds	r3, #4
 8002176:	2b06      	cmp	r3, #6
 8002178:	d902      	bls.n	8002180 <NVIC_EncodePriority+0x30>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3b03      	subs	r3, #3
 800217e:	e000      	b.n	8002182 <NVIC_EncodePriority+0x32>
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	f04f 32ff 	mov.w	r2, #4294967295
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	4313      	orrs	r3, r2
         );
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c4:	d301      	bcc.n	80021ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00f      	b.n	80021ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <SysTick_Config+0x40>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d2:	210f      	movs	r1, #15
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f7ff ff90 	bl	80020fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <SysTick_Config+0x40>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e2:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <SysTick_Config+0x40>)
 80021e4:	2207      	movs	r2, #7
 80021e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	e000e010 	.word	0xe000e010

080021f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff ff2d 	bl	8002060 <__NVIC_SetPriorityGrouping>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002220:	f7ff ff42 	bl	80020a8 <__NVIC_GetPriorityGrouping>
 8002224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	6978      	ldr	r0, [r7, #20]
 800222c:	f7ff ff90 	bl	8002150 <NVIC_EncodePriority>
 8002230:	4602      	mov	r2, r0
 8002232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff5f 	bl	80020fc <__NVIC_SetPriority>
}
 800223e:	bf00      	nop
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff35 	bl	80020c4 <__NVIC_EnableIRQ>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ffa2 	bl	80021b4 <SysTick_Config>
 8002270:	4603      	mov	r3, r0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800227c:	b480      	push	{r7}
 800227e:	b08b      	sub	sp, #44	; 0x2c
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228e:	e169      	b.n	8002564 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002290:	2201      	movs	r2, #1
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	f040 8158 	bne.w	800255e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4a9a      	ldr	r2, [pc, #616]	; (800251c <HAL_GPIO_Init+0x2a0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d05e      	beq.n	8002376 <HAL_GPIO_Init+0xfa>
 80022b8:	4a98      	ldr	r2, [pc, #608]	; (800251c <HAL_GPIO_Init+0x2a0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d875      	bhi.n	80023aa <HAL_GPIO_Init+0x12e>
 80022be:	4a98      	ldr	r2, [pc, #608]	; (8002520 <HAL_GPIO_Init+0x2a4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d058      	beq.n	8002376 <HAL_GPIO_Init+0xfa>
 80022c4:	4a96      	ldr	r2, [pc, #600]	; (8002520 <HAL_GPIO_Init+0x2a4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d86f      	bhi.n	80023aa <HAL_GPIO_Init+0x12e>
 80022ca:	4a96      	ldr	r2, [pc, #600]	; (8002524 <HAL_GPIO_Init+0x2a8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d052      	beq.n	8002376 <HAL_GPIO_Init+0xfa>
 80022d0:	4a94      	ldr	r2, [pc, #592]	; (8002524 <HAL_GPIO_Init+0x2a8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d869      	bhi.n	80023aa <HAL_GPIO_Init+0x12e>
 80022d6:	4a94      	ldr	r2, [pc, #592]	; (8002528 <HAL_GPIO_Init+0x2ac>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d04c      	beq.n	8002376 <HAL_GPIO_Init+0xfa>
 80022dc:	4a92      	ldr	r2, [pc, #584]	; (8002528 <HAL_GPIO_Init+0x2ac>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d863      	bhi.n	80023aa <HAL_GPIO_Init+0x12e>
 80022e2:	4a92      	ldr	r2, [pc, #584]	; (800252c <HAL_GPIO_Init+0x2b0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d046      	beq.n	8002376 <HAL_GPIO_Init+0xfa>
 80022e8:	4a90      	ldr	r2, [pc, #576]	; (800252c <HAL_GPIO_Init+0x2b0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d85d      	bhi.n	80023aa <HAL_GPIO_Init+0x12e>
 80022ee:	2b12      	cmp	r3, #18
 80022f0:	d82a      	bhi.n	8002348 <HAL_GPIO_Init+0xcc>
 80022f2:	2b12      	cmp	r3, #18
 80022f4:	d859      	bhi.n	80023aa <HAL_GPIO_Init+0x12e>
 80022f6:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <HAL_GPIO_Init+0x80>)
 80022f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fc:	08002377 	.word	0x08002377
 8002300:	08002351 	.word	0x08002351
 8002304:	08002363 	.word	0x08002363
 8002308:	080023a5 	.word	0x080023a5
 800230c:	080023ab 	.word	0x080023ab
 8002310:	080023ab 	.word	0x080023ab
 8002314:	080023ab 	.word	0x080023ab
 8002318:	080023ab 	.word	0x080023ab
 800231c:	080023ab 	.word	0x080023ab
 8002320:	080023ab 	.word	0x080023ab
 8002324:	080023ab 	.word	0x080023ab
 8002328:	080023ab 	.word	0x080023ab
 800232c:	080023ab 	.word	0x080023ab
 8002330:	080023ab 	.word	0x080023ab
 8002334:	080023ab 	.word	0x080023ab
 8002338:	080023ab 	.word	0x080023ab
 800233c:	080023ab 	.word	0x080023ab
 8002340:	08002359 	.word	0x08002359
 8002344:	0800236d 	.word	0x0800236d
 8002348:	4a79      	ldr	r2, [pc, #484]	; (8002530 <HAL_GPIO_Init+0x2b4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800234e:	e02c      	b.n	80023aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	623b      	str	r3, [r7, #32]
          break;
 8002356:	e029      	b.n	80023ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	3304      	adds	r3, #4
 800235e:	623b      	str	r3, [r7, #32]
          break;
 8002360:	e024      	b.n	80023ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	3308      	adds	r3, #8
 8002368:	623b      	str	r3, [r7, #32]
          break;
 800236a:	e01f      	b.n	80023ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	330c      	adds	r3, #12
 8002372:	623b      	str	r3, [r7, #32]
          break;
 8002374:	e01a      	b.n	80023ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800237e:	2304      	movs	r3, #4
 8002380:	623b      	str	r3, [r7, #32]
          break;
 8002382:	e013      	b.n	80023ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d105      	bne.n	8002398 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800238c:	2308      	movs	r3, #8
 800238e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	611a      	str	r2, [r3, #16]
          break;
 8002396:	e009      	b.n	80023ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002398:	2308      	movs	r3, #8
 800239a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	615a      	str	r2, [r3, #20]
          break;
 80023a2:	e003      	b.n	80023ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023a4:	2300      	movs	r3, #0
 80023a6:	623b      	str	r3, [r7, #32]
          break;
 80023a8:	e000      	b.n	80023ac <HAL_GPIO_Init+0x130>
          break;
 80023aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2bff      	cmp	r3, #255	; 0xff
 80023b0:	d801      	bhi.n	80023b6 <HAL_GPIO_Init+0x13a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	e001      	b.n	80023ba <HAL_GPIO_Init+0x13e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3304      	adds	r3, #4
 80023ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2bff      	cmp	r3, #255	; 0xff
 80023c0:	d802      	bhi.n	80023c8 <HAL_GPIO_Init+0x14c>
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	e002      	b.n	80023ce <HAL_GPIO_Init+0x152>
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	3b08      	subs	r3, #8
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	210f      	movs	r1, #15
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	401a      	ands	r2, r3
 80023e0:	6a39      	ldr	r1, [r7, #32]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	431a      	orrs	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80b1 	beq.w	800255e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023fc:	4b4d      	ldr	r3, [pc, #308]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a4c      	ldr	r2, [pc, #304]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6193      	str	r3, [r2, #24]
 8002408:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <HAL_GPIO_Init+0x2b8>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002414:	4a48      	ldr	r2, [pc, #288]	; (8002538 <HAL_GPIO_Init+0x2bc>)
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	3302      	adds	r3, #2
 800241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002420:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	220f      	movs	r2, #15
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a40      	ldr	r2, [pc, #256]	; (800253c <HAL_GPIO_Init+0x2c0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d013      	beq.n	8002468 <HAL_GPIO_Init+0x1ec>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a3f      	ldr	r2, [pc, #252]	; (8002540 <HAL_GPIO_Init+0x2c4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00d      	beq.n	8002464 <HAL_GPIO_Init+0x1e8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a3e      	ldr	r2, [pc, #248]	; (8002544 <HAL_GPIO_Init+0x2c8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d007      	beq.n	8002460 <HAL_GPIO_Init+0x1e4>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a3d      	ldr	r2, [pc, #244]	; (8002548 <HAL_GPIO_Init+0x2cc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d101      	bne.n	800245c <HAL_GPIO_Init+0x1e0>
 8002458:	2303      	movs	r3, #3
 800245a:	e006      	b.n	800246a <HAL_GPIO_Init+0x1ee>
 800245c:	2304      	movs	r3, #4
 800245e:	e004      	b.n	800246a <HAL_GPIO_Init+0x1ee>
 8002460:	2302      	movs	r3, #2
 8002462:	e002      	b.n	800246a <HAL_GPIO_Init+0x1ee>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <HAL_GPIO_Init+0x1ee>
 8002468:	2300      	movs	r3, #0
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	f002 0203 	and.w	r2, r2, #3
 8002470:	0092      	lsls	r2, r2, #2
 8002472:	4093      	lsls	r3, r2
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800247a:	492f      	ldr	r1, [pc, #188]	; (8002538 <HAL_GPIO_Init+0x2bc>)
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d006      	beq.n	80024a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_GPIO_Init+0x2d0>)
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	492c      	ldr	r1, [pc, #176]	; (800254c <HAL_GPIO_Init+0x2d0>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	608b      	str	r3, [r1, #8]
 80024a0:	e006      	b.n	80024b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_GPIO_Init+0x2d0>)
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	4928      	ldr	r1, [pc, #160]	; (800254c <HAL_GPIO_Init+0x2d0>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024bc:	4b23      	ldr	r3, [pc, #140]	; (800254c <HAL_GPIO_Init+0x2d0>)
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	4922      	ldr	r1, [pc, #136]	; (800254c <HAL_GPIO_Init+0x2d0>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60cb      	str	r3, [r1, #12]
 80024c8:	e006      	b.n	80024d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <HAL_GPIO_Init+0x2d0>)
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	491e      	ldr	r1, [pc, #120]	; (800254c <HAL_GPIO_Init+0x2d0>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_GPIO_Init+0x2d0>)
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	4918      	ldr	r1, [pc, #96]	; (800254c <HAL_GPIO_Init+0x2d0>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
 80024f0:	e006      	b.n	8002500 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <HAL_GPIO_Init+0x2d0>)
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	4914      	ldr	r1, [pc, #80]	; (800254c <HAL_GPIO_Init+0x2d0>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d021      	beq.n	8002550 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <HAL_GPIO_Init+0x2d0>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	490e      	ldr	r1, [pc, #56]	; (800254c <HAL_GPIO_Init+0x2d0>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
 8002518:	e021      	b.n	800255e <HAL_GPIO_Init+0x2e2>
 800251a:	bf00      	nop
 800251c:	10320000 	.word	0x10320000
 8002520:	10310000 	.word	0x10310000
 8002524:	10220000 	.word	0x10220000
 8002528:	10210000 	.word	0x10210000
 800252c:	10120000 	.word	0x10120000
 8002530:	10110000 	.word	0x10110000
 8002534:	40021000 	.word	0x40021000
 8002538:	40010000 	.word	0x40010000
 800253c:	40010800 	.word	0x40010800
 8002540:	40010c00 	.word	0x40010c00
 8002544:	40011000 	.word	0x40011000
 8002548:	40011400 	.word	0x40011400
 800254c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_GPIO_Init+0x304>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	43db      	mvns	r3, r3
 8002558:	4909      	ldr	r1, [pc, #36]	; (8002580 <HAL_GPIO_Init+0x304>)
 800255a:	4013      	ands	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	3301      	adds	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	fa22 f303 	lsr.w	r3, r2, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	f47f ae8e 	bne.w	8002290 <HAL_GPIO_Init+0x14>
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	372c      	adds	r7, #44	; 0x2c
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40010400 	.word	0x40010400

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025a0:	e003      	b.n	80025aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	041a      	lsls	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	611a      	str	r2, [r3, #16]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4013      	ands	r3, r2
 80025cc:	041a      	lsls	r2, r3, #16
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43d9      	mvns	r1, r3
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	400b      	ands	r3, r1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	611a      	str	r2, [r3, #16]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025fe:	4a05      	ldr	r2, [pc, #20]	; (8002614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f806 	bl	8002618 <HAL_GPIO_EXTI_Callback>
  }
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40010400 	.word	0x40010400

08002618 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e12b      	b.n	8002896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff f9ae 	bl	80019b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800267e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800268e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002690:	f001 ff24 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8002694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4a81      	ldr	r2, [pc, #516]	; (80028a0 <HAL_I2C_Init+0x274>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d807      	bhi.n	80026b0 <HAL_I2C_Init+0x84>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a80      	ldr	r2, [pc, #512]	; (80028a4 <HAL_I2C_Init+0x278>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bf94      	ite	ls
 80026a8:	2301      	movls	r3, #1
 80026aa:	2300      	movhi	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e006      	b.n	80026be <HAL_I2C_Init+0x92>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4a7d      	ldr	r2, [pc, #500]	; (80028a8 <HAL_I2C_Init+0x27c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	bf94      	ite	ls
 80026b8:	2301      	movls	r3, #1
 80026ba:	2300      	movhi	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0e7      	b.n	8002896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4a78      	ldr	r2, [pc, #480]	; (80028ac <HAL_I2C_Init+0x280>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0c9b      	lsrs	r3, r3, #18
 80026d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a6a      	ldr	r2, [pc, #424]	; (80028a0 <HAL_I2C_Init+0x274>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d802      	bhi.n	8002700 <HAL_I2C_Init+0xd4>
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	3301      	adds	r3, #1
 80026fe:	e009      	b.n	8002714 <HAL_I2C_Init+0xe8>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	4a69      	ldr	r2, [pc, #420]	; (80028b0 <HAL_I2C_Init+0x284>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	3301      	adds	r3, #1
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	430b      	orrs	r3, r1
 800271a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002726:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	495c      	ldr	r1, [pc, #368]	; (80028a0 <HAL_I2C_Init+0x274>)
 8002730:	428b      	cmp	r3, r1
 8002732:	d819      	bhi.n	8002768 <HAL_I2C_Init+0x13c>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e59      	subs	r1, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002742:	1c59      	adds	r1, r3, #1
 8002744:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002748:	400b      	ands	r3, r1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_I2C_Init+0x138>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1e59      	subs	r1, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fbb1 f3f3 	udiv	r3, r1, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002762:	e051      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 8002764:	2304      	movs	r3, #4
 8002766:	e04f      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d111      	bne.n	8002794 <HAL_I2C_Init+0x168>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	440b      	add	r3, r1
 800277e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	e012      	b.n	80027ba <HAL_I2C_Init+0x18e>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1e58      	subs	r0, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	0099      	lsls	r1, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Init+0x196>
 80027be:	2301      	movs	r3, #1
 80027c0:	e022      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10e      	bne.n	80027e8 <HAL_I2C_Init+0x1bc>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e58      	subs	r0, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	440b      	add	r3, r1
 80027d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e6:	e00f      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1e58      	subs	r0, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	0099      	lsls	r1, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	6809      	ldr	r1, [r1, #0]
 800280c:	4313      	orrs	r3, r2
 800280e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002836:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6911      	ldr	r1, [r2, #16]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68d2      	ldr	r2, [r2, #12]
 8002842:	4311      	orrs	r1, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	430b      	orrs	r3, r1
 800284a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	000186a0 	.word	0x000186a0
 80028a4:	001e847f 	.word	0x001e847f
 80028a8:	003d08ff 	.word	0x003d08ff
 80028ac:	431bde83 	.word	0x431bde83
 80028b0:	10624dd3 	.word	0x10624dd3

080028b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	461a      	mov	r2, r3
 80028c0:	460b      	mov	r3, r1
 80028c2:	817b      	strh	r3, [r7, #10]
 80028c4:	4613      	mov	r3, r2
 80028c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028c8:	f7ff fb9c 	bl	8002004 <HAL_GetTick>
 80028cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	f040 80e0 	bne.w	8002a9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2319      	movs	r3, #25
 80028e2:	2201      	movs	r2, #1
 80028e4:	4970      	ldr	r1, [pc, #448]	; (8002aa8 <HAL_I2C_Master_Transmit+0x1f4>)
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fffa 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
 80028f4:	e0d3      	b.n	8002a9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_I2C_Master_Transmit+0x50>
 8002900:	2302      	movs	r3, #2
 8002902:	e0cc      	b.n	8002a9e <HAL_I2C_Master_Transmit+0x1ea>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b01      	cmp	r3, #1
 8002918:	d007      	beq.n	800292a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002938:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2221      	movs	r2, #33	; 0x21
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2210      	movs	r2, #16
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	893a      	ldrh	r2, [r7, #8]
 800295a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4a50      	ldr	r2, [pc, #320]	; (8002aac <HAL_I2C_Master_Transmit+0x1f8>)
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800296c:	8979      	ldrh	r1, [r7, #10]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fd7c 	bl	8003470 <I2C_MasterRequestWrite>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e08d      	b.n	8002a9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002998:	e066      	b.n	8002a68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	6a39      	ldr	r1, [r7, #32]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f001 f8b8 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00d      	beq.n	80029c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d107      	bne.n	80029c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06b      	b.n	8002a9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	781a      	ldrb	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d11b      	bne.n	8002a3c <HAL_I2C_Master_Transmit+0x188>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d017      	beq.n	8002a3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	6a39      	ldr	r1, [r7, #32]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f001 f8af 	bl	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00d      	beq.n	8002a68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d107      	bne.n	8002a64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e01a      	b.n	8002a9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d194      	bne.n	800299a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	00100002 	.word	0x00100002
 8002aac:	ffff0000 	.word	0xffff0000

08002ab0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08c      	sub	sp, #48	; 0x30
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	461a      	mov	r2, r3
 8002abc:	460b      	mov	r3, r1
 8002abe:	817b      	strh	r3, [r7, #10]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff fa9c 	bl	8002004 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	f040 824b 	bne.w	8002f72 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2319      	movs	r3, #25
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	497f      	ldr	r1, [pc, #508]	; (8002ce4 <HAL_I2C_Master_Receive+0x234>)
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fefa 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
 8002af4:	e23e      	b.n	8002f74 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_I2C_Master_Receive+0x54>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e237      	b.n	8002f74 <HAL_I2C_Master_Receive+0x4c4>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d007      	beq.n	8002b2a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2222      	movs	r2, #34	; 0x22
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2210      	movs	r2, #16
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	893a      	ldrh	r2, [r7, #8]
 8002b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a5f      	ldr	r2, [pc, #380]	; (8002ce8 <HAL_I2C_Master_Receive+0x238>)
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b6c:	8979      	ldrh	r1, [r7, #10]
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fcfe 	bl	8003574 <I2C_MasterRequestRead>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e1f8      	b.n	8002f74 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d113      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e1cc      	b.n	8002f4c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d11e      	bne.n	8002bf8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bca:	b672      	cpsid	i
}
 8002bcc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bf4:	b662      	cpsie	i
}
 8002bf6:	e035      	b.n	8002c64 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d11e      	bne.n	8002c3e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c10:	b672      	cpsid	i
}
 8002c12:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c3a:	b662      	cpsie	i
}
 8002c3c:	e012      	b.n	8002c64 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c64:	e172      	b.n	8002f4c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	f200 811f 	bhi.w	8002eae <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d123      	bne.n	8002cc0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 ffd9 	bl	8003c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e173      	b.n	8002f74 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cbe:	e145      	b.n	8002f4c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d152      	bne.n	8002d6e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4906      	ldr	r1, [pc, #24]	; (8002cec <HAL_I2C_Master_Receive+0x23c>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fe04 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e148      	b.n	8002f74 <HAL_I2C_Master_Receive+0x4c4>
 8002ce2:	bf00      	nop
 8002ce4:	00100002 	.word	0x00100002
 8002ce8:	ffff0000 	.word	0xffff0000
 8002cec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf0:	b672      	cpsid	i
}
 8002cf2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d36:	b662      	cpsie	i
}
 8002d38:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d6c:	e0ee      	b.n	8002f4c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	2200      	movs	r2, #0
 8002d76:	4981      	ldr	r1, [pc, #516]	; (8002f7c <HAL_I2C_Master_Receive+0x4cc>)
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 fdb1 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0f5      	b.n	8002f74 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d98:	b672      	cpsid	i
}
 8002d9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dce:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <HAL_I2C_Master_Receive+0x4d0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	08db      	lsrs	r3, r3, #3
 8002dd4:	4a6b      	ldr	r2, [pc, #428]	; (8002f84 <HAL_I2C_Master_Receive+0x4d4>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0a1a      	lsrs	r2, r3, #8
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	00da      	lsls	r2, r3, #3
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d118      	bne.n	8002e26 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f043 0220 	orr.w	r2, r3, #32
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e16:	b662      	cpsie	i
}
 8002e18:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e0a6      	b.n	8002f74 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d1d9      	bne.n	8002de8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e76:	b662      	cpsie	i
}
 8002e78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eac:	e04e      	b.n	8002f4c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 febe 	bl	8003c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e058      	b.n	8002f74 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d124      	bne.n	8002f4c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d107      	bne.n	8002f1a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f18:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f47f ae88 	bne.w	8002c66 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
  }
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3728      	adds	r7, #40	; 0x28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	00010004 	.word	0x00010004
 8002f80:	20000000 	.word	0x20000000
 8002f84:	14f8b589 	.word	0x14f8b589

08002f88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08c      	sub	sp, #48	; 0x30
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	817b      	strh	r3, [r7, #10]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	813b      	strh	r3, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fa6:	f7ff f82d 	bl	8002004 <HAL_GetTick>
 8002faa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	f040 8250 	bne.w	800345a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2319      	movs	r3, #25
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4982      	ldr	r1, [pc, #520]	; (80031cc <HAL_I2C_Mem_Read+0x244>)
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fc8b 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e243      	b.n	800345c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Mem_Read+0x5a>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e23c      	b.n	800345c <HAL_I2C_Mem_Read+0x4d4>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d007      	beq.n	8003008 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003016:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2222      	movs	r2, #34	; 0x22
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2240      	movs	r2, #64	; 0x40
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003038:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a62      	ldr	r2, [pc, #392]	; (80031d0 <HAL_I2C_Mem_Read+0x248>)
 8003048:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800304a:	88f8      	ldrh	r0, [r7, #6]
 800304c:	893a      	ldrh	r2, [r7, #8]
 800304e:	8979      	ldrh	r1, [r7, #10]
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	4603      	mov	r3, r0
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fb58 	bl	8003710 <I2C_RequestMemoryRead>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e1f8      	b.n	800345c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306e:	2b00      	cmp	r3, #0
 8003070:	d113      	bne.n	800309a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e1cc      	b.n	8003434 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d11e      	bne.n	80030e0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030b2:	b672      	cpsid	i
}
 80030b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030dc:	b662      	cpsie	i
}
 80030de:	e035      	b.n	800314c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d11e      	bne.n	8003126 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030f8:	b672      	cpsid	i
}
 80030fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003120:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003122:	b662      	cpsie	i
}
 8003124:	e012      	b.n	800314c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003134:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800314c:	e172      	b.n	8003434 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	2b03      	cmp	r3, #3
 8003154:	f200 811f 	bhi.w	8003396 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	2b01      	cmp	r3, #1
 800315e:	d123      	bne.n	80031a8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fd65 	bl	8003c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e173      	b.n	800345c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031a6:	e145      	b.n	8003434 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d152      	bne.n	8003256 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b6:	2200      	movs	r2, #0
 80031b8:	4906      	ldr	r1, [pc, #24]	; (80031d4 <HAL_I2C_Mem_Read+0x24c>)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fb90 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e148      	b.n	800345c <HAL_I2C_Mem_Read+0x4d4>
 80031ca:	bf00      	nop
 80031cc:	00100002 	.word	0x00100002
 80031d0:	ffff0000 	.word	0xffff0000
 80031d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80031d8:	b672      	cpsid	i
}
 80031da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800321e:	b662      	cpsie	i
}
 8003220:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003254:	e0ee      	b.n	8003434 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	2200      	movs	r2, #0
 800325e:	4981      	ldr	r1, [pc, #516]	; (8003464 <HAL_I2C_Mem_Read+0x4dc>)
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fb3d 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0f5      	b.n	800345c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003280:	b672      	cpsid	i
}
 8003282:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032b6:	4b6c      	ldr	r3, [pc, #432]	; (8003468 <HAL_I2C_Mem_Read+0x4e0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	08db      	lsrs	r3, r3, #3
 80032bc:	4a6b      	ldr	r2, [pc, #428]	; (800346c <HAL_I2C_Mem_Read+0x4e4>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	0a1a      	lsrs	r2, r3, #8
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00da      	lsls	r2, r3, #3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d118      	bne.n	800330e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80032fe:	b662      	cpsie	i
}
 8003300:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0a6      	b.n	800345c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b04      	cmp	r3, #4
 800331a:	d1d9      	bne.n	80032d0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800335e:	b662      	cpsie	i
}
 8003360:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003394:	e04e      	b.n	8003434 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003398:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 fc4a 	bl	8003c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e058      	b.n	800345c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d124      	bne.n	8003434 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d107      	bne.n	8003402 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003400:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	f47f ae88 	bne.w	800314e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	00010004 	.word	0x00010004
 8003468:	20000000 	.word	0x20000000
 800346c:	14f8b589 	.word	0x14f8b589

08003470 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af02      	add	r7, sp, #8
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	460b      	mov	r3, r1
 800347e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d006      	beq.n	800349a <I2C_MasterRequestWrite+0x2a>
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d003      	beq.n	800349a <I2C_MasterRequestWrite+0x2a>
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003498:	d108      	bne.n	80034ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e00b      	b.n	80034c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	2b12      	cmp	r3, #18
 80034b2:	d107      	bne.n	80034c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fa05 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ea:	d103      	bne.n	80034f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e035      	b.n	8003564 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003500:	d108      	bne.n	8003514 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003510:	611a      	str	r2, [r3, #16]
 8003512:	e01b      	b.n	800354c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003514:	897b      	ldrh	r3, [r7, #10]
 8003516:	11db      	asrs	r3, r3, #7
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f003 0306 	and.w	r3, r3, #6
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f063 030f 	orn	r3, r3, #15
 8003524:	b2da      	uxtb	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	490e      	ldr	r1, [pc, #56]	; (800356c <I2C_MasterRequestWrite+0xfc>)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fa4e 	bl	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e010      	b.n	8003564 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4907      	ldr	r1, [pc, #28]	; (8003570 <I2C_MasterRequestWrite+0x100>)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fa3e 	bl	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	00010008 	.word	0x00010008
 8003570:	00010002 	.word	0x00010002

08003574 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	460b      	mov	r3, r1
 8003582:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003598:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d006      	beq.n	80035ae <I2C_MasterRequestRead+0x3a>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d003      	beq.n	80035ae <I2C_MasterRequestRead+0x3a>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035ac:	d108      	bne.n	80035c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e00b      	b.n	80035d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	2b11      	cmp	r3, #17
 80035c6:	d107      	bne.n	80035d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f97b 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fe:	d103      	bne.n	8003608 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e079      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003614:	d108      	bne.n	8003628 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003616:	897b      	ldrh	r3, [r7, #10]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	611a      	str	r2, [r3, #16]
 8003626:	e05f      	b.n	80036e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003628:	897b      	ldrh	r3, [r7, #10]
 800362a:	11db      	asrs	r3, r3, #7
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0306 	and.w	r3, r3, #6
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f063 030f 	orn	r3, r3, #15
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4930      	ldr	r1, [pc, #192]	; (8003708 <I2C_MasterRequestRead+0x194>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f9c4 	bl	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e054      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003656:	897b      	ldrh	r3, [r7, #10]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4929      	ldr	r1, [pc, #164]	; (800370c <I2C_MasterRequestRead+0x198>)
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f9b4 	bl	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e044      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800369a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f919 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c2:	d103      	bne.n	80036cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e017      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80036d0:	897b      	ldrh	r3, [r7, #10]
 80036d2:	11db      	asrs	r3, r3, #7
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f003 0306 	and.w	r3, r3, #6
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f063 030e 	orn	r3, r3, #14
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4907      	ldr	r1, [pc, #28]	; (800370c <I2C_MasterRequestRead+0x198>)
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f970 	bl	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	00010008 	.word	0x00010008
 800370c:	00010002 	.word	0x00010002

08003710 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	461a      	mov	r2, r3
 800371e:	4603      	mov	r3, r0
 8003720:	817b      	strh	r3, [r7, #10]
 8003722:	460b      	mov	r3, r1
 8003724:	813b      	strh	r3, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003738:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003748:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	2200      	movs	r2, #0
 8003752:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f8c2 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003770:	d103      	bne.n	800377a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0aa      	b.n	80038d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800377e:	897b      	ldrh	r3, [r7, #10]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800378c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	6a3a      	ldr	r2, [r7, #32]
 8003792:	4952      	ldr	r1, [pc, #328]	; (80038dc <I2C_RequestMemoryRead+0x1cc>)
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f91d 	bl	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e097      	b.n	80038d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037bc:	6a39      	ldr	r1, [r7, #32]
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f9a8 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00d      	beq.n	80037e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d107      	bne.n	80037e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e076      	b.n	80038d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d105      	bne.n	80037f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037ec:	893b      	ldrh	r3, [r7, #8]
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	611a      	str	r2, [r3, #16]
 80037f6:	e021      	b.n	800383c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037f8:	893b      	ldrh	r3, [r7, #8]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003808:	6a39      	ldr	r1, [r7, #32]
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f982 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2b04      	cmp	r3, #4
 800381c:	d107      	bne.n	800382e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e050      	b.n	80038d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003832:	893b      	ldrh	r3, [r7, #8]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800383c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383e:	6a39      	ldr	r1, [r7, #32]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f967 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00d      	beq.n	8003868 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	2b04      	cmp	r3, #4
 8003852:	d107      	bne.n	8003864 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003862:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e035      	b.n	80038d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003876:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	2200      	movs	r2, #0
 8003880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f82b 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00d      	beq.n	80038ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389e:	d103      	bne.n	80038a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e013      	b.n	80038d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038ac:	897b      	ldrh	r3, [r7, #10]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	6a3a      	ldr	r2, [r7, #32]
 80038c0:	4906      	ldr	r1, [pc, #24]	; (80038dc <I2C_RequestMemoryRead+0x1cc>)
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f886 	bl	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	00010002 	.word	0x00010002

080038e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f0:	e048      	b.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d044      	beq.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fb83 	bl	8002004 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d139      	bne.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	0c1b      	lsrs	r3, r3, #16
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d10d      	bne.n	8003936 <I2C_WaitOnFlagUntilTimeout+0x56>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	43da      	mvns	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	e00c      	b.n	8003950 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	43da      	mvns	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	429a      	cmp	r2, r3
 8003954:	d116      	bne.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e023      	b.n	80039cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d10d      	bne.n	80039aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	43da      	mvns	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	e00c      	b.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	43da      	mvns	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4013      	ands	r3, r2
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d093      	beq.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e2:	e071      	b.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f2:	d123      	bne.n	8003a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e067      	b.n	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d041      	beq.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a44:	f7fe fade 	bl	8002004 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d136      	bne.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10c      	bne.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	e00b      	b.n	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	43da      	mvns	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d016      	beq.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e021      	b.n	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d10c      	bne.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e00b      	b.n	8003b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	43da      	mvns	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4013      	ands	r3, r2
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f47f af6d 	bne.w	80039e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b20:	e034      	b.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f8e3 	bl	8003cee <I2C_IsAcknowledgeFailed>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e034      	b.n	8003b9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d028      	beq.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe fa63 	bl	8002004 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11d      	bne.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b80      	cmp	r3, #128	; 0x80
 8003b5c:	d016      	beq.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	f043 0220 	orr.w	r2, r3, #32
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e007      	b.n	8003b9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b80      	cmp	r3, #128	; 0x80
 8003b98:	d1c3      	bne.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb0:	e034      	b.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f89b 	bl	8003cee <I2C_IsAcknowledgeFailed>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e034      	b.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d028      	beq.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fe fa1b 	bl	8002004 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11d      	bne.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d016      	beq.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e007      	b.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d1c3      	bne.n	8003bb2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c40:	e049      	b.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b10      	cmp	r3, #16
 8003c4e:	d119      	bne.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0210 	mvn.w	r2, #16
 8003c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e030      	b.n	8003ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c84:	f7fe f9be 	bl	8002004 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d302      	bcc.n	8003c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11d      	bne.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d016      	beq.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e007      	b.n	8003ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d1ae      	bne.n	8003c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d04:	d11b      	bne.n	8003d3e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d0e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f043 0204 	orr.w	r2, r3, #4
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr
	...

08003d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e26c      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8087 	beq.w	8003e7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d6c:	4b92      	ldr	r3, [pc, #584]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 030c 	and.w	r3, r3, #12
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d00c      	beq.n	8003d92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d78:	4b8f      	ldr	r3, [pc, #572]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d112      	bne.n	8003daa <HAL_RCC_OscConfig+0x5e>
 8003d84:	4b8c      	ldr	r3, [pc, #560]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d90:	d10b      	bne.n	8003daa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d92:	4b89      	ldr	r3, [pc, #548]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d06c      	beq.n	8003e78 <HAL_RCC_OscConfig+0x12c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d168      	bne.n	8003e78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e246      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x76>
 8003db4:	4b80      	ldr	r3, [pc, #512]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a7f      	ldr	r2, [pc, #508]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	e02e      	b.n	8003e20 <HAL_RCC_OscConfig+0xd4>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x98>
 8003dca:	4b7b      	ldr	r3, [pc, #492]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a7a      	ldr	r2, [pc, #488]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b78      	ldr	r3, [pc, #480]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a77      	ldr	r2, [pc, #476]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e01d      	b.n	8003e20 <HAL_RCC_OscConfig+0xd4>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0xbc>
 8003dee:	4b72      	ldr	r3, [pc, #456]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a71      	ldr	r2, [pc, #452]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b6f      	ldr	r3, [pc, #444]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6e      	ldr	r2, [pc, #440]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e00b      	b.n	8003e20 <HAL_RCC_OscConfig+0xd4>
 8003e08:	4b6b      	ldr	r3, [pc, #428]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6a      	ldr	r2, [pc, #424]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b68      	ldr	r3, [pc, #416]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a67      	ldr	r2, [pc, #412]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d013      	beq.n	8003e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fe f8ec 	bl	8002004 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fe f8e8 	bl	8002004 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e1fa      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b5d      	ldr	r3, [pc, #372]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0xe4>
 8003e4e:	e014      	b.n	8003e7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fe f8d8 	bl	8002004 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e58:	f7fe f8d4 	bl	8002004 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	; 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1e6      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6a:	4b53      	ldr	r3, [pc, #332]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x10c>
 8003e76:	e000      	b.n	8003e7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d063      	beq.n	8003f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e86:	4b4c      	ldr	r3, [pc, #304]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e92:	4b49      	ldr	r3, [pc, #292]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d11c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x18c>
 8003e9e:	4b46      	ldr	r3, [pc, #280]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d116      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x176>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e1ba      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4939      	ldr	r1, [pc, #228]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	e03a      	b.n	8003f4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee0:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <HAL_RCC_OscConfig+0x270>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee6:	f7fe f88d 	bl	8002004 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eee:	f7fe f889 	bl	8002004 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e19b      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f00:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0c:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4927      	ldr	r1, [pc, #156]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	600b      	str	r3, [r1, #0]
 8003f20:	e015      	b.n	8003f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f22:	4b26      	ldr	r3, [pc, #152]	; (8003fbc <HAL_RCC_OscConfig+0x270>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fe f86c 	bl	8002004 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f30:	f7fe f868 	bl	8002004 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e17a      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f42:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d03a      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d019      	beq.n	8003f96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f62:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <HAL_RCC_OscConfig+0x274>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f68:	f7fe f84c 	bl	8002004 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f70:	f7fe f848 	bl	8002004 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e15a      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f8e:	2001      	movs	r0, #1
 8003f90:	f000 facc 	bl	800452c <RCC_Delay>
 8003f94:	e01c      	b.n	8003fd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <HAL_RCC_OscConfig+0x274>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9c:	f7fe f832 	bl	8002004 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa2:	e00f      	b.n	8003fc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa4:	f7fe f82e 	bl	8002004 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d908      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e140      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	42420000 	.word	0x42420000
 8003fc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc4:	4b9e      	ldr	r3, [pc, #632]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e9      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 80a6 	beq.w	800412a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe2:	4b97      	ldr	r3, [pc, #604]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10d      	bne.n	800400a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	4b94      	ldr	r3, [pc, #592]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	4a93      	ldr	r2, [pc, #588]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8003ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	61d3      	str	r3, [r2, #28]
 8003ffa:	4b91      	ldr	r3, [pc, #580]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004006:	2301      	movs	r3, #1
 8004008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400a:	4b8e      	ldr	r3, [pc, #568]	; (8004244 <HAL_RCC_OscConfig+0x4f8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d118      	bne.n	8004048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004016:	4b8b      	ldr	r3, [pc, #556]	; (8004244 <HAL_RCC_OscConfig+0x4f8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a8a      	ldr	r2, [pc, #552]	; (8004244 <HAL_RCC_OscConfig+0x4f8>)
 800401c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004022:	f7fd ffef 	bl	8002004 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402a:	f7fd ffeb 	bl	8002004 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b64      	cmp	r3, #100	; 0x64
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e0fd      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403c:	4b81      	ldr	r3, [pc, #516]	; (8004244 <HAL_RCC_OscConfig+0x4f8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d106      	bne.n	800405e <HAL_RCC_OscConfig+0x312>
 8004050:	4b7b      	ldr	r3, [pc, #492]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	4a7a      	ldr	r2, [pc, #488]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6213      	str	r3, [r2, #32]
 800405c:	e02d      	b.n	80040ba <HAL_RCC_OscConfig+0x36e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10c      	bne.n	8004080 <HAL_RCC_OscConfig+0x334>
 8004066:	4b76      	ldr	r3, [pc, #472]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	4a75      	ldr	r2, [pc, #468]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	6213      	str	r3, [r2, #32]
 8004072:	4b73      	ldr	r3, [pc, #460]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4a72      	ldr	r2, [pc, #456]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	6213      	str	r3, [r2, #32]
 800407e:	e01c      	b.n	80040ba <HAL_RCC_OscConfig+0x36e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2b05      	cmp	r3, #5
 8004086:	d10c      	bne.n	80040a2 <HAL_RCC_OscConfig+0x356>
 8004088:	4b6d      	ldr	r3, [pc, #436]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	4a6c      	ldr	r2, [pc, #432]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 800408e:	f043 0304 	orr.w	r3, r3, #4
 8004092:	6213      	str	r3, [r2, #32]
 8004094:	4b6a      	ldr	r3, [pc, #424]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4a69      	ldr	r2, [pc, #420]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6213      	str	r3, [r2, #32]
 80040a0:	e00b      	b.n	80040ba <HAL_RCC_OscConfig+0x36e>
 80040a2:	4b67      	ldr	r3, [pc, #412]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	4a66      	ldr	r2, [pc, #408]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	6213      	str	r3, [r2, #32]
 80040ae:	4b64      	ldr	r3, [pc, #400]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	4a63      	ldr	r2, [pc, #396]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d015      	beq.n	80040ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c2:	f7fd ff9f 	bl	8002004 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c8:	e00a      	b.n	80040e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7fd ff9b 	bl	8002004 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d8:	4293      	cmp	r3, r2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e0ab      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e0:	4b57      	ldr	r3, [pc, #348]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0ee      	beq.n	80040ca <HAL_RCC_OscConfig+0x37e>
 80040ec:	e014      	b.n	8004118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ee:	f7fd ff89 	bl	8002004 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f4:	e00a      	b.n	800410c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f6:	f7fd ff85 	bl	8002004 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f241 3288 	movw	r2, #5000	; 0x1388
 8004104:	4293      	cmp	r3, r2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e095      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410c:	4b4c      	ldr	r3, [pc, #304]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1ee      	bne.n	80040f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d105      	bne.n	800412a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800411e:	4b48      	ldr	r3, [pc, #288]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	4a47      	ldr	r2, [pc, #284]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8004124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8081 	beq.w	8004236 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004134:	4b42      	ldr	r3, [pc, #264]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 030c 	and.w	r3, r3, #12
 800413c:	2b08      	cmp	r3, #8
 800413e:	d061      	beq.n	8004204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d146      	bne.n	80041d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004148:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <HAL_RCC_OscConfig+0x4fc>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414e:	f7fd ff59 	bl	8002004 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004156:	f7fd ff55 	bl	8002004 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e067      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004168:	4b35      	ldr	r3, [pc, #212]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417c:	d108      	bne.n	8004190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800417e:	4b30      	ldr	r3, [pc, #192]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	492d      	ldr	r1, [pc, #180]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004190:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a19      	ldr	r1, [r3, #32]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	430b      	orrs	r3, r1
 80041a2:	4927      	ldr	r1, [pc, #156]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a8:	4b27      	ldr	r3, [pc, #156]	; (8004248 <HAL_RCC_OscConfig+0x4fc>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fd ff29 	bl	8002004 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fd ff25 	bl	8002004 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e037      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041c8:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x46a>
 80041d4:	e02f      	b.n	8004236 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d6:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <HAL_RCC_OscConfig+0x4fc>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fd ff12 	bl	8002004 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fd ff0e 	bl	8002004 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e020      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x498>
 8004202:	e018      	b.n	8004236 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e013      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_RCC_OscConfig+0x4f4>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	429a      	cmp	r2, r3
 8004222:	d106      	bne.n	8004232 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422e:	429a      	cmp	r2, r3
 8004230:	d001      	beq.n	8004236 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40021000 	.word	0x40021000
 8004244:	40007000 	.word	0x40007000
 8004248:	42420060 	.word	0x42420060

0800424c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0d0      	b.n	8004402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004260:	4b6a      	ldr	r3, [pc, #424]	; (800440c <HAL_RCC_ClockConfig+0x1c0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d910      	bls.n	8004290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b67      	ldr	r3, [pc, #412]	; (800440c <HAL_RCC_ClockConfig+0x1c0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 0207 	bic.w	r2, r3, #7
 8004276:	4965      	ldr	r1, [pc, #404]	; (800440c <HAL_RCC_ClockConfig+0x1c0>)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	4b63      	ldr	r3, [pc, #396]	; (800440c <HAL_RCC_ClockConfig+0x1c0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0b8      	b.n	8004402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d020      	beq.n	80042de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a8:	4b59      	ldr	r3, [pc, #356]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4a58      	ldr	r2, [pc, #352]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c0:	4b53      	ldr	r3, [pc, #332]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4a52      	ldr	r2, [pc, #328]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042cc:	4b50      	ldr	r3, [pc, #320]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	494d      	ldr	r1, [pc, #308]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d040      	beq.n	800436c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d115      	bne.n	800432a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e07f      	b.n	8004402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	4b41      	ldr	r3, [pc, #260]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e073      	b.n	8004402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431a:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e06b      	b.n	8004402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432a:	4b39      	ldr	r3, [pc, #228]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f023 0203 	bic.w	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4936      	ldr	r1, [pc, #216]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800433c:	f7fd fe62 	bl	8002004 <HAL_GetTick>
 8004340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	e00a      	b.n	800435a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004344:	f7fd fe5e 	bl	8002004 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e053      	b.n	8004402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 020c 	and.w	r2, r3, #12
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	429a      	cmp	r2, r3
 800436a:	d1eb      	bne.n	8004344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800436c:	4b27      	ldr	r3, [pc, #156]	; (800440c <HAL_RCC_ClockConfig+0x1c0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d210      	bcs.n	800439c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b24      	ldr	r3, [pc, #144]	; (800440c <HAL_RCC_ClockConfig+0x1c0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 0207 	bic.w	r2, r3, #7
 8004382:	4922      	ldr	r1, [pc, #136]	; (800440c <HAL_RCC_ClockConfig+0x1c0>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b20      	ldr	r3, [pc, #128]	; (800440c <HAL_RCC_ClockConfig+0x1c0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e032      	b.n	8004402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4916      	ldr	r1, [pc, #88]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	490e      	ldr	r1, [pc, #56]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043da:	f000 f821 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80043de:	4602      	mov	r2, r0
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	490a      	ldr	r1, [pc, #40]	; (8004414 <HAL_RCC_ClockConfig+0x1c8>)
 80043ec:	5ccb      	ldrb	r3, [r1, r3]
 80043ee:	fa22 f303 	lsr.w	r3, r2, r3
 80043f2:	4a09      	ldr	r2, [pc, #36]	; (8004418 <HAL_RCC_ClockConfig+0x1cc>)
 80043f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_ClockConfig+0x1d0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd fdc0 	bl	8001f80 <HAL_InitTick>

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40022000 	.word	0x40022000
 8004410:	40021000 	.word	0x40021000
 8004414:	080081a0 	.word	0x080081a0
 8004418:	20000000 	.word	0x20000000
 800441c:	20000004 	.word	0x20000004

08004420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	2300      	movs	r3, #0
 8004434:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800443a:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b04      	cmp	r3, #4
 8004448:	d002      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0x30>
 800444a:	2b08      	cmp	r3, #8
 800444c:	d003      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0x36>
 800444e:	e027      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004450:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004452:	613b      	str	r3, [r7, #16]
      break;
 8004454:	e027      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	0c9b      	lsrs	r3, r3, #18
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	4a17      	ldr	r2, [pc, #92]	; (80044bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004460:	5cd3      	ldrb	r3, [r2, r3]
 8004462:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d010      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800446e:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	0c5b      	lsrs	r3, r3, #17
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800447a:	5cd3      	ldrb	r3, [r2, r3]
 800447c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a0d      	ldr	r2, [pc, #52]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004482:	fb02 f203 	mul.w	r2, r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	e004      	b.n	800449a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a0c      	ldr	r2, [pc, #48]	; (80044c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	613b      	str	r3, [r7, #16]
      break;
 800449e:	e002      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80044a2:	613b      	str	r3, [r7, #16]
      break;
 80044a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a6:	693b      	ldr	r3, [r7, #16]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000
 80044b8:	007a1200 	.word	0x007a1200
 80044bc:	080081b8 	.word	0x080081b8
 80044c0:	080081c8 	.word	0x080081c8
 80044c4:	003d0900 	.word	0x003d0900

080044c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044cc:	4b02      	ldr	r3, [pc, #8]	; (80044d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	20000000 	.word	0x20000000

080044dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044e0:	f7ff fff2 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4903      	ldr	r1, [pc, #12]	; (8004500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40021000 	.word	0x40021000
 8004500:	080081b0 	.word	0x080081b0

08004504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004508:	f7ff ffde 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	0adb      	lsrs	r3, r3, #11
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4903      	ldr	r1, [pc, #12]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	080081b0 	.word	0x080081b0

0800452c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004534:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <RCC_Delay+0x34>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a0a      	ldr	r2, [pc, #40]	; (8004564 <RCC_Delay+0x38>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	0a5b      	lsrs	r3, r3, #9
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004548:	bf00      	nop
  }
  while (Delay --);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1e5a      	subs	r2, r3, #1
 800454e:	60fa      	str	r2, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f9      	bne.n	8004548 <RCC_Delay+0x1c>
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	20000000 	.word	0x20000000
 8004564:	10624dd3 	.word	0x10624dd3

08004568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e041      	b.n	80045fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fd fa8c 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f000 fa5c 	bl	8004a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d001      	beq.n	8004620 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e03a      	b.n	8004696 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a18      	ldr	r2, [pc, #96]	; (80046a0 <HAL_TIM_Base_Start_IT+0x98>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00e      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0x58>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464a:	d009      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0x58>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0x58>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d111      	bne.n	8004684 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b06      	cmp	r3, #6
 8004670:	d010      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	e007      	b.n	8004694 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800

080046ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d020      	beq.n	8004710 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01b      	beq.n	8004710 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0202 	mvn.w	r2, #2
 80046e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f998 	bl	8004a2c <HAL_TIM_IC_CaptureCallback>
 80046fc:	e005      	b.n	800470a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f98b 	bl	8004a1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f99a 	bl	8004a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d020      	beq.n	800475c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01b      	beq.n	800475c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0204 	mvn.w	r2, #4
 800472c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f972 	bl	8004a2c <HAL_TIM_IC_CaptureCallback>
 8004748:	e005      	b.n	8004756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f965 	bl	8004a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f974 	bl	8004a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d020      	beq.n	80047a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01b      	beq.n	80047a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0208 	mvn.w	r2, #8
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2204      	movs	r2, #4
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f94c 	bl	8004a2c <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f93f 	bl	8004a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f94e 	bl	8004a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d020      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01b      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0210 	mvn.w	r2, #16
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2208      	movs	r2, #8
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f926 	bl	8004a2c <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f919 	bl	8004a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f928 	bl	8004a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00c      	beq.n	8004818 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0201 	mvn.w	r2, #1
 8004810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fc ff52 	bl	80016bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00c      	beq.n	800483c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fa7f 	bl	8004d3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00c      	beq.n	8004860 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d007      	beq.n	8004860 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f8f8 	bl	8004a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00c      	beq.n	8004884 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d007      	beq.n	8004884 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0220 	mvn.w	r2, #32
 800487c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa52 	bl	8004d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_TIM_ConfigClockSource+0x1c>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e0b4      	b.n	8004a12 <HAL_TIM_ConfigClockSource+0x186>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e0:	d03e      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0xd4>
 80048e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e6:	f200 8087 	bhi.w	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ee:	f000 8086 	beq.w	80049fe <HAL_TIM_ConfigClockSource+0x172>
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	d87f      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 80048f8:	2b70      	cmp	r3, #112	; 0x70
 80048fa:	d01a      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0xa6>
 80048fc:	2b70      	cmp	r3, #112	; 0x70
 80048fe:	d87b      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b60      	cmp	r3, #96	; 0x60
 8004902:	d050      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004904:	2b60      	cmp	r3, #96	; 0x60
 8004906:	d877      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004908:	2b50      	cmp	r3, #80	; 0x50
 800490a:	d03c      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0xfa>
 800490c:	2b50      	cmp	r3, #80	; 0x50
 800490e:	d873      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d058      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d86f      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004918:	2b30      	cmp	r3, #48	; 0x30
 800491a:	d064      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x15a>
 800491c:	2b30      	cmp	r3, #48	; 0x30
 800491e:	d86b      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004920:	2b20      	cmp	r3, #32
 8004922:	d060      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004924:	2b20      	cmp	r3, #32
 8004926:	d867      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d05c      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x15a>
 800492c:	2b10      	cmp	r3, #16
 800492e:	d05a      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004930:	e062      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6899      	ldr	r1, [r3, #8]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f000 f974 	bl	8004c2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004954:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	609a      	str	r2, [r3, #8]
      break;
 800495e:	e04f      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6899      	ldr	r1, [r3, #8]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f000 f95d 	bl	8004c2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004982:	609a      	str	r2, [r3, #8]
      break;
 8004984:	e03c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6859      	ldr	r1, [r3, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	461a      	mov	r2, r3
 8004994:	f000 f8d4 	bl	8004b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2150      	movs	r1, #80	; 0x50
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f92b 	bl	8004bfa <TIM_ITRx_SetConfig>
      break;
 80049a4:	e02c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6859      	ldr	r1, [r3, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	461a      	mov	r2, r3
 80049b4:	f000 f8f2 	bl	8004b9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2160      	movs	r1, #96	; 0x60
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 f91b 	bl	8004bfa <TIM_ITRx_SetConfig>
      break;
 80049c4:	e01c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6859      	ldr	r1, [r3, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f000 f8b4 	bl	8004b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2140      	movs	r1, #64	; 0x40
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 f90b 	bl	8004bfa <TIM_ITRx_SetConfig>
      break;
 80049e4:	e00c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f000 f902 	bl	8004bfa <TIM_ITRx_SetConfig>
      break;
 80049f6:	e003      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
      break;
 80049fc:	e000      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
	...

08004a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a2f      	ldr	r2, [pc, #188]	; (8004b34 <TIM_Base_SetConfig+0xd0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00b      	beq.n	8004a94 <TIM_Base_SetConfig+0x30>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d007      	beq.n	8004a94 <TIM_Base_SetConfig+0x30>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <TIM_Base_SetConfig+0xd4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_Base_SetConfig+0x30>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a2b      	ldr	r2, [pc, #172]	; (8004b3c <TIM_Base_SetConfig+0xd8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d108      	bne.n	8004aa6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <TIM_Base_SetConfig+0xd0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00b      	beq.n	8004ac6 <TIM_Base_SetConfig+0x62>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab4:	d007      	beq.n	8004ac6 <TIM_Base_SetConfig+0x62>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a1f      	ldr	r2, [pc, #124]	; (8004b38 <TIM_Base_SetConfig+0xd4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d003      	beq.n	8004ac6 <TIM_Base_SetConfig+0x62>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <TIM_Base_SetConfig+0xd8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d108      	bne.n	8004ad8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a0d      	ldr	r2, [pc, #52]	; (8004b34 <TIM_Base_SetConfig+0xd0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d103      	bne.n	8004b0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f023 0201 	bic.w	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	611a      	str	r2, [r3, #16]
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800

08004b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f023 0201 	bic.w	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f023 030a 	bic.w	r3, r3, #10
 8004b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f023 0210 	bic.w	r2, r3, #16
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	031b      	lsls	r3, r3, #12
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr

08004bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f043 0307 	orr.w	r3, r3, #7
 8004c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	609a      	str	r2, [r3, #8]
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr

08004c2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b087      	sub	sp, #28
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	607a      	str	r2, [r7, #4]
 8004c3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	021a      	lsls	r2, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	609a      	str	r2, [r3, #8]
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e046      	b.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a16      	ldr	r2, [pc, #88]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00e      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd0:	d009      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d004      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a10      	ldr	r2, [pc, #64]	; (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10c      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800

08004d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr

08004d3a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e042      	b.n	8004de4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fc febe 	bl	8001af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2224      	movs	r2, #36	; 0x24
 8004d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f971 	bl	8005078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	; 0x28
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d175      	bne.n	8004ef8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_UART_Transmit+0x2c>
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e06e      	b.n	8004efa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2221      	movs	r2, #33	; 0x21
 8004e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e2a:	f7fd f8eb 	bl	8002004 <HAL_GetTick>
 8004e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	88fa      	ldrh	r2, [r7, #6]
 8004e34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	88fa      	ldrh	r2, [r7, #6]
 8004e3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e44:	d108      	bne.n	8004e58 <HAL_UART_Transmit+0x6c>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d104      	bne.n	8004e58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	e003      	b.n	8004e60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e60:	e02e      	b.n	8004ec0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2180      	movs	r1, #128	; 0x80
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f848 	bl	8004f02 <UART_WaitOnFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e03a      	b.n	8004efa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10b      	bne.n	8004ea2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	e007      	b.n	8004eb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	781a      	ldrb	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1cb      	bne.n	8004e62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2140      	movs	r1, #64	; 0x40
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f814 	bl	8004f02 <UART_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e006      	b.n	8004efa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e000      	b.n	8004efa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ef8:	2302      	movs	r3, #2
  }
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b086      	sub	sp, #24
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f12:	e03b      	b.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1a:	d037      	beq.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1c:	f7fd f872 	bl	8002004 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	6a3a      	ldr	r2, [r7, #32]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d302      	bcc.n	8004f32 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e03a      	b.n	8004fac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d023      	beq.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b80      	cmp	r3, #128	; 0x80
 8004f48:	d020      	beq.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b40      	cmp	r3, #64	; 0x40
 8004f4e:	d01d      	beq.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d116      	bne.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f81d 	bl	8004fb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e00f      	b.n	8004fac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4013      	ands	r3, r2
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d0b4      	beq.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b095      	sub	sp, #84	; 0x54
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fdc:	643a      	str	r2, [r7, #64]	; 0x40
 8004fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e5      	bne.n	8004fbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3314      	adds	r3, #20
 8004ff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	e853 3f00 	ldrex	r3, [r3]
 8004ffe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	64bb      	str	r3, [r7, #72]	; 0x48
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3314      	adds	r3, #20
 800500e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005010:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e5      	bne.n	8004ff0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	2b01      	cmp	r3, #1
 800502a:	d119      	bne.n	8005060 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	330c      	adds	r3, #12
 8005032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	e853 3f00 	ldrex	r3, [r3]
 800503a:	60bb      	str	r3, [r7, #8]
   return(result);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f023 0310 	bic.w	r3, r3, #16
 8005042:	647b      	str	r3, [r7, #68]	; 0x44
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	330c      	adds	r3, #12
 800504a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800504c:	61ba      	str	r2, [r7, #24]
 800504e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6979      	ldr	r1, [r7, #20]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	613b      	str	r3, [r7, #16]
   return(result);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e5      	bne.n	800502c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800506e:	bf00      	nop
 8005070:	3754      	adds	r7, #84	; 0x54
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80050b2:	f023 030c 	bic.w	r3, r3, #12
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	430b      	orrs	r3, r1
 80050be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a2c      	ldr	r2, [pc, #176]	; (800518c <UART_SetConfig+0x114>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d103      	bne.n	80050e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050e0:	f7ff fa10 	bl	8004504 <HAL_RCC_GetPCLK2Freq>
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	e002      	b.n	80050ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80050e8:	f7ff f9f8 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 80050ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	009a      	lsls	r2, r3, #2
 80050f8:	441a      	add	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	4a22      	ldr	r2, [pc, #136]	; (8005190 <UART_SetConfig+0x118>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	0119      	lsls	r1, r3, #4
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009a      	lsls	r2, r3, #2
 8005118:	441a      	add	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	fbb2 f2f3 	udiv	r2, r2, r3
 8005124:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <UART_SetConfig+0x118>)
 8005126:	fba3 0302 	umull	r0, r3, r3, r2
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	2064      	movs	r0, #100	; 0x64
 800512e:	fb00 f303 	mul.w	r3, r0, r3
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	3332      	adds	r3, #50	; 0x32
 8005138:	4a15      	ldr	r2, [pc, #84]	; (8005190 <UART_SetConfig+0x118>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005144:	4419      	add	r1, r3
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009a      	lsls	r2, r3, #2
 8005150:	441a      	add	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	fbb2 f2f3 	udiv	r2, r2, r3
 800515c:	4b0c      	ldr	r3, [pc, #48]	; (8005190 <UART_SetConfig+0x118>)
 800515e:	fba3 0302 	umull	r0, r3, r3, r2
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	2064      	movs	r0, #100	; 0x64
 8005166:	fb00 f303 	mul.w	r3, r0, r3
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	3332      	adds	r3, #50	; 0x32
 8005170:	4a07      	ldr	r2, [pc, #28]	; (8005190 <UART_SetConfig+0x118>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	f003 020f 	and.w	r2, r3, #15
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	440a      	add	r2, r1
 8005182:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40013800 	.word	0x40013800
 8005190:	51eb851f 	.word	0x51eb851f

08005194 <__errno>:
 8005194:	4b01      	ldr	r3, [pc, #4]	; (800519c <__errno+0x8>)
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	2000000c 	.word	0x2000000c

080051a0 <__libc_init_array>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	2600      	movs	r6, #0
 80051a4:	4d0c      	ldr	r5, [pc, #48]	; (80051d8 <__libc_init_array+0x38>)
 80051a6:	4c0d      	ldr	r4, [pc, #52]	; (80051dc <__libc_init_array+0x3c>)
 80051a8:	1b64      	subs	r4, r4, r5
 80051aa:	10a4      	asrs	r4, r4, #2
 80051ac:	42a6      	cmp	r6, r4
 80051ae:	d109      	bne.n	80051c4 <__libc_init_array+0x24>
 80051b0:	f002 ff66 	bl	8008080 <_init>
 80051b4:	2600      	movs	r6, #0
 80051b6:	4d0a      	ldr	r5, [pc, #40]	; (80051e0 <__libc_init_array+0x40>)
 80051b8:	4c0a      	ldr	r4, [pc, #40]	; (80051e4 <__libc_init_array+0x44>)
 80051ba:	1b64      	subs	r4, r4, r5
 80051bc:	10a4      	asrs	r4, r4, #2
 80051be:	42a6      	cmp	r6, r4
 80051c0:	d105      	bne.n	80051ce <__libc_init_array+0x2e>
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c8:	4798      	blx	r3
 80051ca:	3601      	adds	r6, #1
 80051cc:	e7ee      	b.n	80051ac <__libc_init_array+0xc>
 80051ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d2:	4798      	blx	r3
 80051d4:	3601      	adds	r6, #1
 80051d6:	e7f2      	b.n	80051be <__libc_init_array+0x1e>
 80051d8:	080085ac 	.word	0x080085ac
 80051dc:	080085ac 	.word	0x080085ac
 80051e0:	080085ac 	.word	0x080085ac
 80051e4:	080085b0 	.word	0x080085b0

080051e8 <malloc>:
 80051e8:	4b02      	ldr	r3, [pc, #8]	; (80051f4 <malloc+0xc>)
 80051ea:	4601      	mov	r1, r0
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	f000 b85f 	b.w	80052b0 <_malloc_r>
 80051f2:	bf00      	nop
 80051f4:	2000000c 	.word	0x2000000c

080051f8 <free>:
 80051f8:	4b02      	ldr	r3, [pc, #8]	; (8005204 <free+0xc>)
 80051fa:	4601      	mov	r1, r0
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	f000 b80b 	b.w	8005218 <_free_r>
 8005202:	bf00      	nop
 8005204:	2000000c 	.word	0x2000000c

08005208 <memset>:
 8005208:	4603      	mov	r3, r0
 800520a:	4402      	add	r2, r0
 800520c:	4293      	cmp	r3, r2
 800520e:	d100      	bne.n	8005212 <memset+0xa>
 8005210:	4770      	bx	lr
 8005212:	f803 1b01 	strb.w	r1, [r3], #1
 8005216:	e7f9      	b.n	800520c <memset+0x4>

08005218 <_free_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4605      	mov	r5, r0
 800521c:	2900      	cmp	r1, #0
 800521e:	d043      	beq.n	80052a8 <_free_r+0x90>
 8005220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005224:	1f0c      	subs	r4, r1, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	bfb8      	it	lt
 800522a:	18e4      	addlt	r4, r4, r3
 800522c:	f001 ff4a 	bl	80070c4 <__malloc_lock>
 8005230:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <_free_r+0x94>)
 8005232:	6813      	ldr	r3, [r2, #0]
 8005234:	4610      	mov	r0, r2
 8005236:	b933      	cbnz	r3, 8005246 <_free_r+0x2e>
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	6014      	str	r4, [r2, #0]
 800523c:	4628      	mov	r0, r5
 800523e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005242:	f001 bf45 	b.w	80070d0 <__malloc_unlock>
 8005246:	42a3      	cmp	r3, r4
 8005248:	d90a      	bls.n	8005260 <_free_r+0x48>
 800524a:	6821      	ldr	r1, [r4, #0]
 800524c:	1862      	adds	r2, r4, r1
 800524e:	4293      	cmp	r3, r2
 8005250:	bf01      	itttt	eq
 8005252:	681a      	ldreq	r2, [r3, #0]
 8005254:	685b      	ldreq	r3, [r3, #4]
 8005256:	1852      	addeq	r2, r2, r1
 8005258:	6022      	streq	r2, [r4, #0]
 800525a:	6063      	str	r3, [r4, #4]
 800525c:	6004      	str	r4, [r0, #0]
 800525e:	e7ed      	b.n	800523c <_free_r+0x24>
 8005260:	461a      	mov	r2, r3
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	b10b      	cbz	r3, 800526a <_free_r+0x52>
 8005266:	42a3      	cmp	r3, r4
 8005268:	d9fa      	bls.n	8005260 <_free_r+0x48>
 800526a:	6811      	ldr	r1, [r2, #0]
 800526c:	1850      	adds	r0, r2, r1
 800526e:	42a0      	cmp	r0, r4
 8005270:	d10b      	bne.n	800528a <_free_r+0x72>
 8005272:	6820      	ldr	r0, [r4, #0]
 8005274:	4401      	add	r1, r0
 8005276:	1850      	adds	r0, r2, r1
 8005278:	4283      	cmp	r3, r0
 800527a:	6011      	str	r1, [r2, #0]
 800527c:	d1de      	bne.n	800523c <_free_r+0x24>
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4401      	add	r1, r0
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	6053      	str	r3, [r2, #4]
 8005288:	e7d8      	b.n	800523c <_free_r+0x24>
 800528a:	d902      	bls.n	8005292 <_free_r+0x7a>
 800528c:	230c      	movs	r3, #12
 800528e:	602b      	str	r3, [r5, #0]
 8005290:	e7d4      	b.n	800523c <_free_r+0x24>
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	1821      	adds	r1, r4, r0
 8005296:	428b      	cmp	r3, r1
 8005298:	bf01      	itttt	eq
 800529a:	6819      	ldreq	r1, [r3, #0]
 800529c:	685b      	ldreq	r3, [r3, #4]
 800529e:	1809      	addeq	r1, r1, r0
 80052a0:	6021      	streq	r1, [r4, #0]
 80052a2:	6063      	str	r3, [r4, #4]
 80052a4:	6054      	str	r4, [r2, #4]
 80052a6:	e7c9      	b.n	800523c <_free_r+0x24>
 80052a8:	bd38      	pop	{r3, r4, r5, pc}
 80052aa:	bf00      	nop
 80052ac:	20000208 	.word	0x20000208

080052b0 <_malloc_r>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	1ccd      	adds	r5, r1, #3
 80052b4:	f025 0503 	bic.w	r5, r5, #3
 80052b8:	3508      	adds	r5, #8
 80052ba:	2d0c      	cmp	r5, #12
 80052bc:	bf38      	it	cc
 80052be:	250c      	movcc	r5, #12
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	4606      	mov	r6, r0
 80052c4:	db01      	blt.n	80052ca <_malloc_r+0x1a>
 80052c6:	42a9      	cmp	r1, r5
 80052c8:	d903      	bls.n	80052d2 <_malloc_r+0x22>
 80052ca:	230c      	movs	r3, #12
 80052cc:	6033      	str	r3, [r6, #0]
 80052ce:	2000      	movs	r0, #0
 80052d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d2:	f001 fef7 	bl	80070c4 <__malloc_lock>
 80052d6:	4921      	ldr	r1, [pc, #132]	; (800535c <_malloc_r+0xac>)
 80052d8:	680a      	ldr	r2, [r1, #0]
 80052da:	4614      	mov	r4, r2
 80052dc:	b99c      	cbnz	r4, 8005306 <_malloc_r+0x56>
 80052de:	4f20      	ldr	r7, [pc, #128]	; (8005360 <_malloc_r+0xb0>)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	b923      	cbnz	r3, 80052ee <_malloc_r+0x3e>
 80052e4:	4621      	mov	r1, r4
 80052e6:	4630      	mov	r0, r6
 80052e8:	f000 fd2a 	bl	8005d40 <_sbrk_r>
 80052ec:	6038      	str	r0, [r7, #0]
 80052ee:	4629      	mov	r1, r5
 80052f0:	4630      	mov	r0, r6
 80052f2:	f000 fd25 	bl	8005d40 <_sbrk_r>
 80052f6:	1c43      	adds	r3, r0, #1
 80052f8:	d123      	bne.n	8005342 <_malloc_r+0x92>
 80052fa:	230c      	movs	r3, #12
 80052fc:	4630      	mov	r0, r6
 80052fe:	6033      	str	r3, [r6, #0]
 8005300:	f001 fee6 	bl	80070d0 <__malloc_unlock>
 8005304:	e7e3      	b.n	80052ce <_malloc_r+0x1e>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	1b5b      	subs	r3, r3, r5
 800530a:	d417      	bmi.n	800533c <_malloc_r+0x8c>
 800530c:	2b0b      	cmp	r3, #11
 800530e:	d903      	bls.n	8005318 <_malloc_r+0x68>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	441c      	add	r4, r3
 8005314:	6025      	str	r5, [r4, #0]
 8005316:	e004      	b.n	8005322 <_malloc_r+0x72>
 8005318:	6863      	ldr	r3, [r4, #4]
 800531a:	42a2      	cmp	r2, r4
 800531c:	bf0c      	ite	eq
 800531e:	600b      	streq	r3, [r1, #0]
 8005320:	6053      	strne	r3, [r2, #4]
 8005322:	4630      	mov	r0, r6
 8005324:	f001 fed4 	bl	80070d0 <__malloc_unlock>
 8005328:	f104 000b 	add.w	r0, r4, #11
 800532c:	1d23      	adds	r3, r4, #4
 800532e:	f020 0007 	bic.w	r0, r0, #7
 8005332:	1ac2      	subs	r2, r0, r3
 8005334:	d0cc      	beq.n	80052d0 <_malloc_r+0x20>
 8005336:	1a1b      	subs	r3, r3, r0
 8005338:	50a3      	str	r3, [r4, r2]
 800533a:	e7c9      	b.n	80052d0 <_malloc_r+0x20>
 800533c:	4622      	mov	r2, r4
 800533e:	6864      	ldr	r4, [r4, #4]
 8005340:	e7cc      	b.n	80052dc <_malloc_r+0x2c>
 8005342:	1cc4      	adds	r4, r0, #3
 8005344:	f024 0403 	bic.w	r4, r4, #3
 8005348:	42a0      	cmp	r0, r4
 800534a:	d0e3      	beq.n	8005314 <_malloc_r+0x64>
 800534c:	1a21      	subs	r1, r4, r0
 800534e:	4630      	mov	r0, r6
 8005350:	f000 fcf6 	bl	8005d40 <_sbrk_r>
 8005354:	3001      	adds	r0, #1
 8005356:	d1dd      	bne.n	8005314 <_malloc_r+0x64>
 8005358:	e7cf      	b.n	80052fa <_malloc_r+0x4a>
 800535a:	bf00      	nop
 800535c:	20000208 	.word	0x20000208
 8005360:	2000020c 	.word	0x2000020c

08005364 <__cvt>:
 8005364:	2b00      	cmp	r3, #0
 8005366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800536a:	461f      	mov	r7, r3
 800536c:	bfbb      	ittet	lt
 800536e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005372:	461f      	movlt	r7, r3
 8005374:	2300      	movge	r3, #0
 8005376:	232d      	movlt	r3, #45	; 0x2d
 8005378:	b088      	sub	sp, #32
 800537a:	4614      	mov	r4, r2
 800537c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800537e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005380:	7013      	strb	r3, [r2, #0]
 8005382:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005384:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005388:	f023 0820 	bic.w	r8, r3, #32
 800538c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005390:	d005      	beq.n	800539e <__cvt+0x3a>
 8005392:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005396:	d100      	bne.n	800539a <__cvt+0x36>
 8005398:	3501      	adds	r5, #1
 800539a:	2302      	movs	r3, #2
 800539c:	e000      	b.n	80053a0 <__cvt+0x3c>
 800539e:	2303      	movs	r3, #3
 80053a0:	aa07      	add	r2, sp, #28
 80053a2:	9204      	str	r2, [sp, #16]
 80053a4:	aa06      	add	r2, sp, #24
 80053a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80053aa:	e9cd 3500 	strd	r3, r5, [sp]
 80053ae:	4622      	mov	r2, r4
 80053b0:	463b      	mov	r3, r7
 80053b2:	f000 fe59 	bl	8006068 <_dtoa_r>
 80053b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053ba:	4606      	mov	r6, r0
 80053bc:	d102      	bne.n	80053c4 <__cvt+0x60>
 80053be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053c0:	07db      	lsls	r3, r3, #31
 80053c2:	d522      	bpl.n	800540a <__cvt+0xa6>
 80053c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053c8:	eb06 0905 	add.w	r9, r6, r5
 80053cc:	d110      	bne.n	80053f0 <__cvt+0x8c>
 80053ce:	7833      	ldrb	r3, [r6, #0]
 80053d0:	2b30      	cmp	r3, #48	; 0x30
 80053d2:	d10a      	bne.n	80053ea <__cvt+0x86>
 80053d4:	2200      	movs	r2, #0
 80053d6:	2300      	movs	r3, #0
 80053d8:	4620      	mov	r0, r4
 80053da:	4639      	mov	r1, r7
 80053dc:	f7fb fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80053e0:	b918      	cbnz	r0, 80053ea <__cvt+0x86>
 80053e2:	f1c5 0501 	rsb	r5, r5, #1
 80053e6:	f8ca 5000 	str.w	r5, [sl]
 80053ea:	f8da 3000 	ldr.w	r3, [sl]
 80053ee:	4499      	add	r9, r3
 80053f0:	2200      	movs	r2, #0
 80053f2:	2300      	movs	r3, #0
 80053f4:	4620      	mov	r0, r4
 80053f6:	4639      	mov	r1, r7
 80053f8:	f7fb fad6 	bl	80009a8 <__aeabi_dcmpeq>
 80053fc:	b108      	cbz	r0, 8005402 <__cvt+0x9e>
 80053fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8005402:	2230      	movs	r2, #48	; 0x30
 8005404:	9b07      	ldr	r3, [sp, #28]
 8005406:	454b      	cmp	r3, r9
 8005408:	d307      	bcc.n	800541a <__cvt+0xb6>
 800540a:	4630      	mov	r0, r6
 800540c:	9b07      	ldr	r3, [sp, #28]
 800540e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005410:	1b9b      	subs	r3, r3, r6
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	b008      	add	sp, #32
 8005416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541a:	1c59      	adds	r1, r3, #1
 800541c:	9107      	str	r1, [sp, #28]
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	e7f0      	b.n	8005404 <__cvt+0xa0>

08005422 <__exponent>:
 8005422:	4603      	mov	r3, r0
 8005424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005426:	2900      	cmp	r1, #0
 8005428:	f803 2b02 	strb.w	r2, [r3], #2
 800542c:	bfb6      	itet	lt
 800542e:	222d      	movlt	r2, #45	; 0x2d
 8005430:	222b      	movge	r2, #43	; 0x2b
 8005432:	4249      	neglt	r1, r1
 8005434:	2909      	cmp	r1, #9
 8005436:	7042      	strb	r2, [r0, #1]
 8005438:	dd2b      	ble.n	8005492 <__exponent+0x70>
 800543a:	f10d 0407 	add.w	r4, sp, #7
 800543e:	46a4      	mov	ip, r4
 8005440:	270a      	movs	r7, #10
 8005442:	fb91 f6f7 	sdiv	r6, r1, r7
 8005446:	460a      	mov	r2, r1
 8005448:	46a6      	mov	lr, r4
 800544a:	fb07 1516 	mls	r5, r7, r6, r1
 800544e:	2a63      	cmp	r2, #99	; 0x63
 8005450:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005454:	4631      	mov	r1, r6
 8005456:	f104 34ff 	add.w	r4, r4, #4294967295
 800545a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800545e:	dcf0      	bgt.n	8005442 <__exponent+0x20>
 8005460:	3130      	adds	r1, #48	; 0x30
 8005462:	f1ae 0502 	sub.w	r5, lr, #2
 8005466:	f804 1c01 	strb.w	r1, [r4, #-1]
 800546a:	4629      	mov	r1, r5
 800546c:	1c44      	adds	r4, r0, #1
 800546e:	4561      	cmp	r1, ip
 8005470:	d30a      	bcc.n	8005488 <__exponent+0x66>
 8005472:	f10d 0209 	add.w	r2, sp, #9
 8005476:	eba2 020e 	sub.w	r2, r2, lr
 800547a:	4565      	cmp	r5, ip
 800547c:	bf88      	it	hi
 800547e:	2200      	movhi	r2, #0
 8005480:	4413      	add	r3, r2
 8005482:	1a18      	subs	r0, r3, r0
 8005484:	b003      	add	sp, #12
 8005486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005488:	f811 2b01 	ldrb.w	r2, [r1], #1
 800548c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005490:	e7ed      	b.n	800546e <__exponent+0x4c>
 8005492:	2330      	movs	r3, #48	; 0x30
 8005494:	3130      	adds	r1, #48	; 0x30
 8005496:	7083      	strb	r3, [r0, #2]
 8005498:	70c1      	strb	r1, [r0, #3]
 800549a:	1d03      	adds	r3, r0, #4
 800549c:	e7f1      	b.n	8005482 <__exponent+0x60>
	...

080054a0 <_printf_float>:
 80054a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a4:	b091      	sub	sp, #68	; 0x44
 80054a6:	460c      	mov	r4, r1
 80054a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80054ac:	4616      	mov	r6, r2
 80054ae:	461f      	mov	r7, r3
 80054b0:	4605      	mov	r5, r0
 80054b2:	f001 fd7f 	bl	8006fb4 <_localeconv_r>
 80054b6:	6803      	ldr	r3, [r0, #0]
 80054b8:	4618      	mov	r0, r3
 80054ba:	9309      	str	r3, [sp, #36]	; 0x24
 80054bc:	f7fa fe48 	bl	8000150 <strlen>
 80054c0:	2300      	movs	r3, #0
 80054c2:	930e      	str	r3, [sp, #56]	; 0x38
 80054c4:	f8d8 3000 	ldr.w	r3, [r8]
 80054c8:	900a      	str	r0, [sp, #40]	; 0x28
 80054ca:	3307      	adds	r3, #7
 80054cc:	f023 0307 	bic.w	r3, r3, #7
 80054d0:	f103 0208 	add.w	r2, r3, #8
 80054d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80054d8:	f8d4 b000 	ldr.w	fp, [r4]
 80054dc:	f8c8 2000 	str.w	r2, [r8]
 80054e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054e8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80054ec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80054f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80054f2:	f04f 32ff 	mov.w	r2, #4294967295
 80054f6:	4640      	mov	r0, r8
 80054f8:	4b9c      	ldr	r3, [pc, #624]	; (800576c <_printf_float+0x2cc>)
 80054fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054fc:	f7fb fa86 	bl	8000a0c <__aeabi_dcmpun>
 8005500:	bb70      	cbnz	r0, 8005560 <_printf_float+0xc0>
 8005502:	f04f 32ff 	mov.w	r2, #4294967295
 8005506:	4640      	mov	r0, r8
 8005508:	4b98      	ldr	r3, [pc, #608]	; (800576c <_printf_float+0x2cc>)
 800550a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800550c:	f7fb fa60 	bl	80009d0 <__aeabi_dcmple>
 8005510:	bb30      	cbnz	r0, 8005560 <_printf_float+0xc0>
 8005512:	2200      	movs	r2, #0
 8005514:	2300      	movs	r3, #0
 8005516:	4640      	mov	r0, r8
 8005518:	4651      	mov	r1, sl
 800551a:	f7fb fa4f 	bl	80009bc <__aeabi_dcmplt>
 800551e:	b110      	cbz	r0, 8005526 <_printf_float+0x86>
 8005520:	232d      	movs	r3, #45	; 0x2d
 8005522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005526:	4b92      	ldr	r3, [pc, #584]	; (8005770 <_printf_float+0x2d0>)
 8005528:	4892      	ldr	r0, [pc, #584]	; (8005774 <_printf_float+0x2d4>)
 800552a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800552e:	bf94      	ite	ls
 8005530:	4698      	movls	r8, r3
 8005532:	4680      	movhi	r8, r0
 8005534:	2303      	movs	r3, #3
 8005536:	f04f 0a00 	mov.w	sl, #0
 800553a:	6123      	str	r3, [r4, #16]
 800553c:	f02b 0304 	bic.w	r3, fp, #4
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	4633      	mov	r3, r6
 8005544:	4621      	mov	r1, r4
 8005546:	4628      	mov	r0, r5
 8005548:	9700      	str	r7, [sp, #0]
 800554a:	aa0f      	add	r2, sp, #60	; 0x3c
 800554c:	f000 f9d4 	bl	80058f8 <_printf_common>
 8005550:	3001      	adds	r0, #1
 8005552:	f040 8090 	bne.w	8005676 <_printf_float+0x1d6>
 8005556:	f04f 30ff 	mov.w	r0, #4294967295
 800555a:	b011      	add	sp, #68	; 0x44
 800555c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005560:	4642      	mov	r2, r8
 8005562:	4653      	mov	r3, sl
 8005564:	4640      	mov	r0, r8
 8005566:	4651      	mov	r1, sl
 8005568:	f7fb fa50 	bl	8000a0c <__aeabi_dcmpun>
 800556c:	b148      	cbz	r0, 8005582 <_printf_float+0xe2>
 800556e:	f1ba 0f00 	cmp.w	sl, #0
 8005572:	bfb8      	it	lt
 8005574:	232d      	movlt	r3, #45	; 0x2d
 8005576:	4880      	ldr	r0, [pc, #512]	; (8005778 <_printf_float+0x2d8>)
 8005578:	bfb8      	it	lt
 800557a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800557e:	4b7f      	ldr	r3, [pc, #508]	; (800577c <_printf_float+0x2dc>)
 8005580:	e7d3      	b.n	800552a <_printf_float+0x8a>
 8005582:	6863      	ldr	r3, [r4, #4]
 8005584:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	d142      	bne.n	8005612 <_printf_float+0x172>
 800558c:	2306      	movs	r3, #6
 800558e:	6063      	str	r3, [r4, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	9206      	str	r2, [sp, #24]
 8005594:	aa0e      	add	r2, sp, #56	; 0x38
 8005596:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800559a:	aa0d      	add	r2, sp, #52	; 0x34
 800559c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80055a0:	9203      	str	r2, [sp, #12]
 80055a2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80055a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80055aa:	6023      	str	r3, [r4, #0]
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	4642      	mov	r2, r8
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	4628      	mov	r0, r5
 80055b4:	4653      	mov	r3, sl
 80055b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80055b8:	f7ff fed4 	bl	8005364 <__cvt>
 80055bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055be:	4680      	mov	r8, r0
 80055c0:	2947      	cmp	r1, #71	; 0x47
 80055c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055c4:	d108      	bne.n	80055d8 <_printf_float+0x138>
 80055c6:	1cc8      	adds	r0, r1, #3
 80055c8:	db02      	blt.n	80055d0 <_printf_float+0x130>
 80055ca:	6863      	ldr	r3, [r4, #4]
 80055cc:	4299      	cmp	r1, r3
 80055ce:	dd40      	ble.n	8005652 <_printf_float+0x1b2>
 80055d0:	f1a9 0902 	sub.w	r9, r9, #2
 80055d4:	fa5f f989 	uxtb.w	r9, r9
 80055d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055dc:	d81f      	bhi.n	800561e <_printf_float+0x17e>
 80055de:	464a      	mov	r2, r9
 80055e0:	3901      	subs	r1, #1
 80055e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055e6:	910d      	str	r1, [sp, #52]	; 0x34
 80055e8:	f7ff ff1b 	bl	8005422 <__exponent>
 80055ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055ee:	4682      	mov	sl, r0
 80055f0:	1813      	adds	r3, r2, r0
 80055f2:	2a01      	cmp	r2, #1
 80055f4:	6123      	str	r3, [r4, #16]
 80055f6:	dc02      	bgt.n	80055fe <_printf_float+0x15e>
 80055f8:	6822      	ldr	r2, [r4, #0]
 80055fa:	07d2      	lsls	r2, r2, #31
 80055fc:	d501      	bpl.n	8005602 <_printf_float+0x162>
 80055fe:	3301      	adds	r3, #1
 8005600:	6123      	str	r3, [r4, #16]
 8005602:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005606:	2b00      	cmp	r3, #0
 8005608:	d09b      	beq.n	8005542 <_printf_float+0xa2>
 800560a:	232d      	movs	r3, #45	; 0x2d
 800560c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005610:	e797      	b.n	8005542 <_printf_float+0xa2>
 8005612:	2947      	cmp	r1, #71	; 0x47
 8005614:	d1bc      	bne.n	8005590 <_printf_float+0xf0>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1ba      	bne.n	8005590 <_printf_float+0xf0>
 800561a:	2301      	movs	r3, #1
 800561c:	e7b7      	b.n	800558e <_printf_float+0xee>
 800561e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005622:	d118      	bne.n	8005656 <_printf_float+0x1b6>
 8005624:	2900      	cmp	r1, #0
 8005626:	6863      	ldr	r3, [r4, #4]
 8005628:	dd0b      	ble.n	8005642 <_printf_float+0x1a2>
 800562a:	6121      	str	r1, [r4, #16]
 800562c:	b913      	cbnz	r3, 8005634 <_printf_float+0x194>
 800562e:	6822      	ldr	r2, [r4, #0]
 8005630:	07d0      	lsls	r0, r2, #31
 8005632:	d502      	bpl.n	800563a <_printf_float+0x19a>
 8005634:	3301      	adds	r3, #1
 8005636:	440b      	add	r3, r1
 8005638:	6123      	str	r3, [r4, #16]
 800563a:	f04f 0a00 	mov.w	sl, #0
 800563e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005640:	e7df      	b.n	8005602 <_printf_float+0x162>
 8005642:	b913      	cbnz	r3, 800564a <_printf_float+0x1aa>
 8005644:	6822      	ldr	r2, [r4, #0]
 8005646:	07d2      	lsls	r2, r2, #31
 8005648:	d501      	bpl.n	800564e <_printf_float+0x1ae>
 800564a:	3302      	adds	r3, #2
 800564c:	e7f4      	b.n	8005638 <_printf_float+0x198>
 800564e:	2301      	movs	r3, #1
 8005650:	e7f2      	b.n	8005638 <_printf_float+0x198>
 8005652:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005658:	4299      	cmp	r1, r3
 800565a:	db05      	blt.n	8005668 <_printf_float+0x1c8>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	6121      	str	r1, [r4, #16]
 8005660:	07d8      	lsls	r0, r3, #31
 8005662:	d5ea      	bpl.n	800563a <_printf_float+0x19a>
 8005664:	1c4b      	adds	r3, r1, #1
 8005666:	e7e7      	b.n	8005638 <_printf_float+0x198>
 8005668:	2900      	cmp	r1, #0
 800566a:	bfcc      	ite	gt
 800566c:	2201      	movgt	r2, #1
 800566e:	f1c1 0202 	rsble	r2, r1, #2
 8005672:	4413      	add	r3, r2
 8005674:	e7e0      	b.n	8005638 <_printf_float+0x198>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	055a      	lsls	r2, r3, #21
 800567a:	d407      	bmi.n	800568c <_printf_float+0x1ec>
 800567c:	6923      	ldr	r3, [r4, #16]
 800567e:	4642      	mov	r2, r8
 8005680:	4631      	mov	r1, r6
 8005682:	4628      	mov	r0, r5
 8005684:	47b8      	blx	r7
 8005686:	3001      	adds	r0, #1
 8005688:	d12b      	bne.n	80056e2 <_printf_float+0x242>
 800568a:	e764      	b.n	8005556 <_printf_float+0xb6>
 800568c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005690:	f240 80dd 	bls.w	800584e <_printf_float+0x3ae>
 8005694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005698:	2200      	movs	r2, #0
 800569a:	2300      	movs	r3, #0
 800569c:	f7fb f984 	bl	80009a8 <__aeabi_dcmpeq>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d033      	beq.n	800570c <_printf_float+0x26c>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4631      	mov	r1, r6
 80056a8:	4628      	mov	r0, r5
 80056aa:	4a35      	ldr	r2, [pc, #212]	; (8005780 <_printf_float+0x2e0>)
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f af51 	beq.w	8005556 <_printf_float+0xb6>
 80056b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056b8:	429a      	cmp	r2, r3
 80056ba:	db02      	blt.n	80056c2 <_printf_float+0x222>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	07d8      	lsls	r0, r3, #31
 80056c0:	d50f      	bpl.n	80056e2 <_printf_float+0x242>
 80056c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056c6:	4631      	mov	r1, r6
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b8      	blx	r7
 80056cc:	3001      	adds	r0, #1
 80056ce:	f43f af42 	beq.w	8005556 <_printf_float+0xb6>
 80056d2:	f04f 0800 	mov.w	r8, #0
 80056d6:	f104 091a 	add.w	r9, r4, #26
 80056da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056dc:	3b01      	subs	r3, #1
 80056de:	4543      	cmp	r3, r8
 80056e0:	dc09      	bgt.n	80056f6 <_printf_float+0x256>
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	079b      	lsls	r3, r3, #30
 80056e6:	f100 8102 	bmi.w	80058ee <_printf_float+0x44e>
 80056ea:	68e0      	ldr	r0, [r4, #12]
 80056ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056ee:	4298      	cmp	r0, r3
 80056f0:	bfb8      	it	lt
 80056f2:	4618      	movlt	r0, r3
 80056f4:	e731      	b.n	800555a <_printf_float+0xba>
 80056f6:	2301      	movs	r3, #1
 80056f8:	464a      	mov	r2, r9
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	f43f af28 	beq.w	8005556 <_printf_float+0xb6>
 8005706:	f108 0801 	add.w	r8, r8, #1
 800570a:	e7e6      	b.n	80056da <_printf_float+0x23a>
 800570c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800570e:	2b00      	cmp	r3, #0
 8005710:	dc38      	bgt.n	8005784 <_printf_float+0x2e4>
 8005712:	2301      	movs	r3, #1
 8005714:	4631      	mov	r1, r6
 8005716:	4628      	mov	r0, r5
 8005718:	4a19      	ldr	r2, [pc, #100]	; (8005780 <_printf_float+0x2e0>)
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	f43f af1a 	beq.w	8005556 <_printf_float+0xb6>
 8005722:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005726:	4313      	orrs	r3, r2
 8005728:	d102      	bne.n	8005730 <_printf_float+0x290>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	07d9      	lsls	r1, r3, #31
 800572e:	d5d8      	bpl.n	80056e2 <_printf_float+0x242>
 8005730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005734:	4631      	mov	r1, r6
 8005736:	4628      	mov	r0, r5
 8005738:	47b8      	blx	r7
 800573a:	3001      	adds	r0, #1
 800573c:	f43f af0b 	beq.w	8005556 <_printf_float+0xb6>
 8005740:	f04f 0900 	mov.w	r9, #0
 8005744:	f104 0a1a 	add.w	sl, r4, #26
 8005748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800574a:	425b      	negs	r3, r3
 800574c:	454b      	cmp	r3, r9
 800574e:	dc01      	bgt.n	8005754 <_printf_float+0x2b4>
 8005750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005752:	e794      	b.n	800567e <_printf_float+0x1de>
 8005754:	2301      	movs	r3, #1
 8005756:	4652      	mov	r2, sl
 8005758:	4631      	mov	r1, r6
 800575a:	4628      	mov	r0, r5
 800575c:	47b8      	blx	r7
 800575e:	3001      	adds	r0, #1
 8005760:	f43f aef9 	beq.w	8005556 <_printf_float+0xb6>
 8005764:	f109 0901 	add.w	r9, r9, #1
 8005768:	e7ee      	b.n	8005748 <_printf_float+0x2a8>
 800576a:	bf00      	nop
 800576c:	7fefffff 	.word	0x7fefffff
 8005770:	080081d0 	.word	0x080081d0
 8005774:	080081d4 	.word	0x080081d4
 8005778:	080081dc 	.word	0x080081dc
 800577c:	080081d8 	.word	0x080081d8
 8005780:	080081e0 	.word	0x080081e0
 8005784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005786:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005788:	429a      	cmp	r2, r3
 800578a:	bfa8      	it	ge
 800578c:	461a      	movge	r2, r3
 800578e:	2a00      	cmp	r2, #0
 8005790:	4691      	mov	r9, r2
 8005792:	dc37      	bgt.n	8005804 <_printf_float+0x364>
 8005794:	f04f 0b00 	mov.w	fp, #0
 8005798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800579c:	f104 021a 	add.w	r2, r4, #26
 80057a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80057a4:	ebaa 0309 	sub.w	r3, sl, r9
 80057a8:	455b      	cmp	r3, fp
 80057aa:	dc33      	bgt.n	8005814 <_printf_float+0x374>
 80057ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057b0:	429a      	cmp	r2, r3
 80057b2:	db3b      	blt.n	800582c <_printf_float+0x38c>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	07da      	lsls	r2, r3, #31
 80057b8:	d438      	bmi.n	800582c <_printf_float+0x38c>
 80057ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057be:	eba2 030a 	sub.w	r3, r2, sl
 80057c2:	eba2 0901 	sub.w	r9, r2, r1
 80057c6:	4599      	cmp	r9, r3
 80057c8:	bfa8      	it	ge
 80057ca:	4699      	movge	r9, r3
 80057cc:	f1b9 0f00 	cmp.w	r9, #0
 80057d0:	dc34      	bgt.n	800583c <_printf_float+0x39c>
 80057d2:	f04f 0800 	mov.w	r8, #0
 80057d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057da:	f104 0a1a 	add.w	sl, r4, #26
 80057de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	eba3 0309 	sub.w	r3, r3, r9
 80057e8:	4543      	cmp	r3, r8
 80057ea:	f77f af7a 	ble.w	80056e2 <_printf_float+0x242>
 80057ee:	2301      	movs	r3, #1
 80057f0:	4652      	mov	r2, sl
 80057f2:	4631      	mov	r1, r6
 80057f4:	4628      	mov	r0, r5
 80057f6:	47b8      	blx	r7
 80057f8:	3001      	adds	r0, #1
 80057fa:	f43f aeac 	beq.w	8005556 <_printf_float+0xb6>
 80057fe:	f108 0801 	add.w	r8, r8, #1
 8005802:	e7ec      	b.n	80057de <_printf_float+0x33e>
 8005804:	4613      	mov	r3, r2
 8005806:	4631      	mov	r1, r6
 8005808:	4642      	mov	r2, r8
 800580a:	4628      	mov	r0, r5
 800580c:	47b8      	blx	r7
 800580e:	3001      	adds	r0, #1
 8005810:	d1c0      	bne.n	8005794 <_printf_float+0x2f4>
 8005812:	e6a0      	b.n	8005556 <_printf_float+0xb6>
 8005814:	2301      	movs	r3, #1
 8005816:	4631      	mov	r1, r6
 8005818:	4628      	mov	r0, r5
 800581a:	920b      	str	r2, [sp, #44]	; 0x2c
 800581c:	47b8      	blx	r7
 800581e:	3001      	adds	r0, #1
 8005820:	f43f ae99 	beq.w	8005556 <_printf_float+0xb6>
 8005824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005826:	f10b 0b01 	add.w	fp, fp, #1
 800582a:	e7b9      	b.n	80057a0 <_printf_float+0x300>
 800582c:	4631      	mov	r1, r6
 800582e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005832:	4628      	mov	r0, r5
 8005834:	47b8      	blx	r7
 8005836:	3001      	adds	r0, #1
 8005838:	d1bf      	bne.n	80057ba <_printf_float+0x31a>
 800583a:	e68c      	b.n	8005556 <_printf_float+0xb6>
 800583c:	464b      	mov	r3, r9
 800583e:	4631      	mov	r1, r6
 8005840:	4628      	mov	r0, r5
 8005842:	eb08 020a 	add.w	r2, r8, sl
 8005846:	47b8      	blx	r7
 8005848:	3001      	adds	r0, #1
 800584a:	d1c2      	bne.n	80057d2 <_printf_float+0x332>
 800584c:	e683      	b.n	8005556 <_printf_float+0xb6>
 800584e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005850:	2a01      	cmp	r2, #1
 8005852:	dc01      	bgt.n	8005858 <_printf_float+0x3b8>
 8005854:	07db      	lsls	r3, r3, #31
 8005856:	d537      	bpl.n	80058c8 <_printf_float+0x428>
 8005858:	2301      	movs	r3, #1
 800585a:	4642      	mov	r2, r8
 800585c:	4631      	mov	r1, r6
 800585e:	4628      	mov	r0, r5
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	f43f ae77 	beq.w	8005556 <_printf_float+0xb6>
 8005868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800586c:	4631      	mov	r1, r6
 800586e:	4628      	mov	r0, r5
 8005870:	47b8      	blx	r7
 8005872:	3001      	adds	r0, #1
 8005874:	f43f ae6f 	beq.w	8005556 <_printf_float+0xb6>
 8005878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800587c:	2200      	movs	r2, #0
 800587e:	2300      	movs	r3, #0
 8005880:	f7fb f892 	bl	80009a8 <__aeabi_dcmpeq>
 8005884:	b9d8      	cbnz	r0, 80058be <_printf_float+0x41e>
 8005886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005888:	f108 0201 	add.w	r2, r8, #1
 800588c:	3b01      	subs	r3, #1
 800588e:	4631      	mov	r1, r6
 8005890:	4628      	mov	r0, r5
 8005892:	47b8      	blx	r7
 8005894:	3001      	adds	r0, #1
 8005896:	d10e      	bne.n	80058b6 <_printf_float+0x416>
 8005898:	e65d      	b.n	8005556 <_printf_float+0xb6>
 800589a:	2301      	movs	r3, #1
 800589c:	464a      	mov	r2, r9
 800589e:	4631      	mov	r1, r6
 80058a0:	4628      	mov	r0, r5
 80058a2:	47b8      	blx	r7
 80058a4:	3001      	adds	r0, #1
 80058a6:	f43f ae56 	beq.w	8005556 <_printf_float+0xb6>
 80058aa:	f108 0801 	add.w	r8, r8, #1
 80058ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058b0:	3b01      	subs	r3, #1
 80058b2:	4543      	cmp	r3, r8
 80058b4:	dcf1      	bgt.n	800589a <_printf_float+0x3fa>
 80058b6:	4653      	mov	r3, sl
 80058b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058bc:	e6e0      	b.n	8005680 <_printf_float+0x1e0>
 80058be:	f04f 0800 	mov.w	r8, #0
 80058c2:	f104 091a 	add.w	r9, r4, #26
 80058c6:	e7f2      	b.n	80058ae <_printf_float+0x40e>
 80058c8:	2301      	movs	r3, #1
 80058ca:	4642      	mov	r2, r8
 80058cc:	e7df      	b.n	800588e <_printf_float+0x3ee>
 80058ce:	2301      	movs	r3, #1
 80058d0:	464a      	mov	r2, r9
 80058d2:	4631      	mov	r1, r6
 80058d4:	4628      	mov	r0, r5
 80058d6:	47b8      	blx	r7
 80058d8:	3001      	adds	r0, #1
 80058da:	f43f ae3c 	beq.w	8005556 <_printf_float+0xb6>
 80058de:	f108 0801 	add.w	r8, r8, #1
 80058e2:	68e3      	ldr	r3, [r4, #12]
 80058e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058e6:	1a5b      	subs	r3, r3, r1
 80058e8:	4543      	cmp	r3, r8
 80058ea:	dcf0      	bgt.n	80058ce <_printf_float+0x42e>
 80058ec:	e6fd      	b.n	80056ea <_printf_float+0x24a>
 80058ee:	f04f 0800 	mov.w	r8, #0
 80058f2:	f104 0919 	add.w	r9, r4, #25
 80058f6:	e7f4      	b.n	80058e2 <_printf_float+0x442>

080058f8 <_printf_common>:
 80058f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058fc:	4616      	mov	r6, r2
 80058fe:	4699      	mov	r9, r3
 8005900:	688a      	ldr	r2, [r1, #8]
 8005902:	690b      	ldr	r3, [r1, #16]
 8005904:	4607      	mov	r7, r0
 8005906:	4293      	cmp	r3, r2
 8005908:	bfb8      	it	lt
 800590a:	4613      	movlt	r3, r2
 800590c:	6033      	str	r3, [r6, #0]
 800590e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005912:	460c      	mov	r4, r1
 8005914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005918:	b10a      	cbz	r2, 800591e <_printf_common+0x26>
 800591a:	3301      	adds	r3, #1
 800591c:	6033      	str	r3, [r6, #0]
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	0699      	lsls	r1, r3, #26
 8005922:	bf42      	ittt	mi
 8005924:	6833      	ldrmi	r3, [r6, #0]
 8005926:	3302      	addmi	r3, #2
 8005928:	6033      	strmi	r3, [r6, #0]
 800592a:	6825      	ldr	r5, [r4, #0]
 800592c:	f015 0506 	ands.w	r5, r5, #6
 8005930:	d106      	bne.n	8005940 <_printf_common+0x48>
 8005932:	f104 0a19 	add.w	sl, r4, #25
 8005936:	68e3      	ldr	r3, [r4, #12]
 8005938:	6832      	ldr	r2, [r6, #0]
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	42ab      	cmp	r3, r5
 800593e:	dc28      	bgt.n	8005992 <_printf_common+0x9a>
 8005940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005944:	1e13      	subs	r3, r2, #0
 8005946:	6822      	ldr	r2, [r4, #0]
 8005948:	bf18      	it	ne
 800594a:	2301      	movne	r3, #1
 800594c:	0692      	lsls	r2, r2, #26
 800594e:	d42d      	bmi.n	80059ac <_printf_common+0xb4>
 8005950:	4649      	mov	r1, r9
 8005952:	4638      	mov	r0, r7
 8005954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005958:	47c0      	blx	r8
 800595a:	3001      	adds	r0, #1
 800595c:	d020      	beq.n	80059a0 <_printf_common+0xa8>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	68e5      	ldr	r5, [r4, #12]
 8005962:	f003 0306 	and.w	r3, r3, #6
 8005966:	2b04      	cmp	r3, #4
 8005968:	bf18      	it	ne
 800596a:	2500      	movne	r5, #0
 800596c:	6832      	ldr	r2, [r6, #0]
 800596e:	f04f 0600 	mov.w	r6, #0
 8005972:	68a3      	ldr	r3, [r4, #8]
 8005974:	bf08      	it	eq
 8005976:	1aad      	subeq	r5, r5, r2
 8005978:	6922      	ldr	r2, [r4, #16]
 800597a:	bf08      	it	eq
 800597c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005980:	4293      	cmp	r3, r2
 8005982:	bfc4      	itt	gt
 8005984:	1a9b      	subgt	r3, r3, r2
 8005986:	18ed      	addgt	r5, r5, r3
 8005988:	341a      	adds	r4, #26
 800598a:	42b5      	cmp	r5, r6
 800598c:	d11a      	bne.n	80059c4 <_printf_common+0xcc>
 800598e:	2000      	movs	r0, #0
 8005990:	e008      	b.n	80059a4 <_printf_common+0xac>
 8005992:	2301      	movs	r3, #1
 8005994:	4652      	mov	r2, sl
 8005996:	4649      	mov	r1, r9
 8005998:	4638      	mov	r0, r7
 800599a:	47c0      	blx	r8
 800599c:	3001      	adds	r0, #1
 800599e:	d103      	bne.n	80059a8 <_printf_common+0xb0>
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	3501      	adds	r5, #1
 80059aa:	e7c4      	b.n	8005936 <_printf_common+0x3e>
 80059ac:	2030      	movs	r0, #48	; 0x30
 80059ae:	18e1      	adds	r1, r4, r3
 80059b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059ba:	4422      	add	r2, r4
 80059bc:	3302      	adds	r3, #2
 80059be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059c2:	e7c5      	b.n	8005950 <_printf_common+0x58>
 80059c4:	2301      	movs	r3, #1
 80059c6:	4622      	mov	r2, r4
 80059c8:	4649      	mov	r1, r9
 80059ca:	4638      	mov	r0, r7
 80059cc:	47c0      	blx	r8
 80059ce:	3001      	adds	r0, #1
 80059d0:	d0e6      	beq.n	80059a0 <_printf_common+0xa8>
 80059d2:	3601      	adds	r6, #1
 80059d4:	e7d9      	b.n	800598a <_printf_common+0x92>
	...

080059d8 <_printf_i>:
 80059d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059dc:	460c      	mov	r4, r1
 80059de:	7e27      	ldrb	r7, [r4, #24]
 80059e0:	4691      	mov	r9, r2
 80059e2:	2f78      	cmp	r7, #120	; 0x78
 80059e4:	4680      	mov	r8, r0
 80059e6:	469a      	mov	sl, r3
 80059e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059ee:	d807      	bhi.n	8005a00 <_printf_i+0x28>
 80059f0:	2f62      	cmp	r7, #98	; 0x62
 80059f2:	d80a      	bhi.n	8005a0a <_printf_i+0x32>
 80059f4:	2f00      	cmp	r7, #0
 80059f6:	f000 80d9 	beq.w	8005bac <_printf_i+0x1d4>
 80059fa:	2f58      	cmp	r7, #88	; 0x58
 80059fc:	f000 80a4 	beq.w	8005b48 <_printf_i+0x170>
 8005a00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a08:	e03a      	b.n	8005a80 <_printf_i+0xa8>
 8005a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a0e:	2b15      	cmp	r3, #21
 8005a10:	d8f6      	bhi.n	8005a00 <_printf_i+0x28>
 8005a12:	a001      	add	r0, pc, #4	; (adr r0, 8005a18 <_printf_i+0x40>)
 8005a14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005a85 	.word	0x08005a85
 8005a20:	08005a01 	.word	0x08005a01
 8005a24:	08005a01 	.word	0x08005a01
 8005a28:	08005a01 	.word	0x08005a01
 8005a2c:	08005a01 	.word	0x08005a01
 8005a30:	08005a85 	.word	0x08005a85
 8005a34:	08005a01 	.word	0x08005a01
 8005a38:	08005a01 	.word	0x08005a01
 8005a3c:	08005a01 	.word	0x08005a01
 8005a40:	08005a01 	.word	0x08005a01
 8005a44:	08005b93 	.word	0x08005b93
 8005a48:	08005ab5 	.word	0x08005ab5
 8005a4c:	08005b75 	.word	0x08005b75
 8005a50:	08005a01 	.word	0x08005a01
 8005a54:	08005a01 	.word	0x08005a01
 8005a58:	08005bb5 	.word	0x08005bb5
 8005a5c:	08005a01 	.word	0x08005a01
 8005a60:	08005ab5 	.word	0x08005ab5
 8005a64:	08005a01 	.word	0x08005a01
 8005a68:	08005a01 	.word	0x08005a01
 8005a6c:	08005b7d 	.word	0x08005b7d
 8005a70:	680b      	ldr	r3, [r1, #0]
 8005a72:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a76:	1d1a      	adds	r2, r3, #4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	600a      	str	r2, [r1, #0]
 8005a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0a4      	b.n	8005bce <_printf_i+0x1f6>
 8005a84:	6825      	ldr	r5, [r4, #0]
 8005a86:	6808      	ldr	r0, [r1, #0]
 8005a88:	062e      	lsls	r6, r5, #24
 8005a8a:	f100 0304 	add.w	r3, r0, #4
 8005a8e:	d50a      	bpl.n	8005aa6 <_printf_i+0xce>
 8005a90:	6805      	ldr	r5, [r0, #0]
 8005a92:	600b      	str	r3, [r1, #0]
 8005a94:	2d00      	cmp	r5, #0
 8005a96:	da03      	bge.n	8005aa0 <_printf_i+0xc8>
 8005a98:	232d      	movs	r3, #45	; 0x2d
 8005a9a:	426d      	negs	r5, r5
 8005a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa0:	230a      	movs	r3, #10
 8005aa2:	485e      	ldr	r0, [pc, #376]	; (8005c1c <_printf_i+0x244>)
 8005aa4:	e019      	b.n	8005ada <_printf_i+0x102>
 8005aa6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005aaa:	6805      	ldr	r5, [r0, #0]
 8005aac:	600b      	str	r3, [r1, #0]
 8005aae:	bf18      	it	ne
 8005ab0:	b22d      	sxthne	r5, r5
 8005ab2:	e7ef      	b.n	8005a94 <_printf_i+0xbc>
 8005ab4:	680b      	ldr	r3, [r1, #0]
 8005ab6:	6825      	ldr	r5, [r4, #0]
 8005ab8:	1d18      	adds	r0, r3, #4
 8005aba:	6008      	str	r0, [r1, #0]
 8005abc:	0628      	lsls	r0, r5, #24
 8005abe:	d501      	bpl.n	8005ac4 <_printf_i+0xec>
 8005ac0:	681d      	ldr	r5, [r3, #0]
 8005ac2:	e002      	b.n	8005aca <_printf_i+0xf2>
 8005ac4:	0669      	lsls	r1, r5, #25
 8005ac6:	d5fb      	bpl.n	8005ac0 <_printf_i+0xe8>
 8005ac8:	881d      	ldrh	r5, [r3, #0]
 8005aca:	2f6f      	cmp	r7, #111	; 0x6f
 8005acc:	bf0c      	ite	eq
 8005ace:	2308      	moveq	r3, #8
 8005ad0:	230a      	movne	r3, #10
 8005ad2:	4852      	ldr	r0, [pc, #328]	; (8005c1c <_printf_i+0x244>)
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ada:	6866      	ldr	r6, [r4, #4]
 8005adc:	2e00      	cmp	r6, #0
 8005ade:	bfa8      	it	ge
 8005ae0:	6821      	ldrge	r1, [r4, #0]
 8005ae2:	60a6      	str	r6, [r4, #8]
 8005ae4:	bfa4      	itt	ge
 8005ae6:	f021 0104 	bicge.w	r1, r1, #4
 8005aea:	6021      	strge	r1, [r4, #0]
 8005aec:	b90d      	cbnz	r5, 8005af2 <_printf_i+0x11a>
 8005aee:	2e00      	cmp	r6, #0
 8005af0:	d04d      	beq.n	8005b8e <_printf_i+0x1b6>
 8005af2:	4616      	mov	r6, r2
 8005af4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005af8:	fb03 5711 	mls	r7, r3, r1, r5
 8005afc:	5dc7      	ldrb	r7, [r0, r7]
 8005afe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b02:	462f      	mov	r7, r5
 8005b04:	42bb      	cmp	r3, r7
 8005b06:	460d      	mov	r5, r1
 8005b08:	d9f4      	bls.n	8005af4 <_printf_i+0x11c>
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d10b      	bne.n	8005b26 <_printf_i+0x14e>
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	07df      	lsls	r7, r3, #31
 8005b12:	d508      	bpl.n	8005b26 <_printf_i+0x14e>
 8005b14:	6923      	ldr	r3, [r4, #16]
 8005b16:	6861      	ldr	r1, [r4, #4]
 8005b18:	4299      	cmp	r1, r3
 8005b1a:	bfde      	ittt	le
 8005b1c:	2330      	movle	r3, #48	; 0x30
 8005b1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b26:	1b92      	subs	r2, r2, r6
 8005b28:	6122      	str	r2, [r4, #16]
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4640      	mov	r0, r8
 8005b30:	f8cd a000 	str.w	sl, [sp]
 8005b34:	aa03      	add	r2, sp, #12
 8005b36:	f7ff fedf 	bl	80058f8 <_printf_common>
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	d14c      	bne.n	8005bd8 <_printf_i+0x200>
 8005b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b42:	b004      	add	sp, #16
 8005b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b48:	4834      	ldr	r0, [pc, #208]	; (8005c1c <_printf_i+0x244>)
 8005b4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b4e:	680e      	ldr	r6, [r1, #0]
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b56:	061f      	lsls	r7, r3, #24
 8005b58:	600e      	str	r6, [r1, #0]
 8005b5a:	d514      	bpl.n	8005b86 <_printf_i+0x1ae>
 8005b5c:	07d9      	lsls	r1, r3, #31
 8005b5e:	bf44      	itt	mi
 8005b60:	f043 0320 	orrmi.w	r3, r3, #32
 8005b64:	6023      	strmi	r3, [r4, #0]
 8005b66:	b91d      	cbnz	r5, 8005b70 <_printf_i+0x198>
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	f023 0320 	bic.w	r3, r3, #32
 8005b6e:	6023      	str	r3, [r4, #0]
 8005b70:	2310      	movs	r3, #16
 8005b72:	e7af      	b.n	8005ad4 <_printf_i+0xfc>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	f043 0320 	orr.w	r3, r3, #32
 8005b7a:	6023      	str	r3, [r4, #0]
 8005b7c:	2378      	movs	r3, #120	; 0x78
 8005b7e:	4828      	ldr	r0, [pc, #160]	; (8005c20 <_printf_i+0x248>)
 8005b80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b84:	e7e3      	b.n	8005b4e <_printf_i+0x176>
 8005b86:	065e      	lsls	r6, r3, #25
 8005b88:	bf48      	it	mi
 8005b8a:	b2ad      	uxthmi	r5, r5
 8005b8c:	e7e6      	b.n	8005b5c <_printf_i+0x184>
 8005b8e:	4616      	mov	r6, r2
 8005b90:	e7bb      	b.n	8005b0a <_printf_i+0x132>
 8005b92:	680b      	ldr	r3, [r1, #0]
 8005b94:	6826      	ldr	r6, [r4, #0]
 8005b96:	1d1d      	adds	r5, r3, #4
 8005b98:	6960      	ldr	r0, [r4, #20]
 8005b9a:	600d      	str	r5, [r1, #0]
 8005b9c:	0635      	lsls	r5, r6, #24
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	d501      	bpl.n	8005ba6 <_printf_i+0x1ce>
 8005ba2:	6018      	str	r0, [r3, #0]
 8005ba4:	e002      	b.n	8005bac <_printf_i+0x1d4>
 8005ba6:	0671      	lsls	r1, r6, #25
 8005ba8:	d5fb      	bpl.n	8005ba2 <_printf_i+0x1ca>
 8005baa:	8018      	strh	r0, [r3, #0]
 8005bac:	2300      	movs	r3, #0
 8005bae:	4616      	mov	r6, r2
 8005bb0:	6123      	str	r3, [r4, #16]
 8005bb2:	e7ba      	b.n	8005b2a <_printf_i+0x152>
 8005bb4:	680b      	ldr	r3, [r1, #0]
 8005bb6:	1d1a      	adds	r2, r3, #4
 8005bb8:	600a      	str	r2, [r1, #0]
 8005bba:	681e      	ldr	r6, [r3, #0]
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	6862      	ldr	r2, [r4, #4]
 8005bc2:	f001 fa63 	bl	800708c <memchr>
 8005bc6:	b108      	cbz	r0, 8005bcc <_printf_i+0x1f4>
 8005bc8:	1b80      	subs	r0, r0, r6
 8005bca:	6060      	str	r0, [r4, #4]
 8005bcc:	6863      	ldr	r3, [r4, #4]
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bd6:	e7a8      	b.n	8005b2a <_printf_i+0x152>
 8005bd8:	4632      	mov	r2, r6
 8005bda:	4649      	mov	r1, r9
 8005bdc:	4640      	mov	r0, r8
 8005bde:	6923      	ldr	r3, [r4, #16]
 8005be0:	47d0      	blx	sl
 8005be2:	3001      	adds	r0, #1
 8005be4:	d0ab      	beq.n	8005b3e <_printf_i+0x166>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	079b      	lsls	r3, r3, #30
 8005bea:	d413      	bmi.n	8005c14 <_printf_i+0x23c>
 8005bec:	68e0      	ldr	r0, [r4, #12]
 8005bee:	9b03      	ldr	r3, [sp, #12]
 8005bf0:	4298      	cmp	r0, r3
 8005bf2:	bfb8      	it	lt
 8005bf4:	4618      	movlt	r0, r3
 8005bf6:	e7a4      	b.n	8005b42 <_printf_i+0x16a>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	4640      	mov	r0, r8
 8005c00:	47d0      	blx	sl
 8005c02:	3001      	adds	r0, #1
 8005c04:	d09b      	beq.n	8005b3e <_printf_i+0x166>
 8005c06:	3501      	adds	r5, #1
 8005c08:	68e3      	ldr	r3, [r4, #12]
 8005c0a:	9903      	ldr	r1, [sp, #12]
 8005c0c:	1a5b      	subs	r3, r3, r1
 8005c0e:	42ab      	cmp	r3, r5
 8005c10:	dcf2      	bgt.n	8005bf8 <_printf_i+0x220>
 8005c12:	e7eb      	b.n	8005bec <_printf_i+0x214>
 8005c14:	2500      	movs	r5, #0
 8005c16:	f104 0619 	add.w	r6, r4, #25
 8005c1a:	e7f5      	b.n	8005c08 <_printf_i+0x230>
 8005c1c:	080081e2 	.word	0x080081e2
 8005c20:	080081f3 	.word	0x080081f3

08005c24 <iprintf>:
 8005c24:	b40f      	push	{r0, r1, r2, r3}
 8005c26:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <iprintf+0x2c>)
 8005c28:	b513      	push	{r0, r1, r4, lr}
 8005c2a:	681c      	ldr	r4, [r3, #0]
 8005c2c:	b124      	cbz	r4, 8005c38 <iprintf+0x14>
 8005c2e:	69a3      	ldr	r3, [r4, #24]
 8005c30:	b913      	cbnz	r3, 8005c38 <iprintf+0x14>
 8005c32:	4620      	mov	r0, r4
 8005c34:	f001 f920 	bl	8006e78 <__sinit>
 8005c38:	ab05      	add	r3, sp, #20
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	9a04      	ldr	r2, [sp, #16]
 8005c3e:	68a1      	ldr	r1, [r4, #8]
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	f001 ff5f 	bl	8007b04 <_vfiprintf_r>
 8005c46:	b002      	add	sp, #8
 8005c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c4c:	b004      	add	sp, #16
 8005c4e:	4770      	bx	lr
 8005c50:	2000000c 	.word	0x2000000c

08005c54 <_puts_r>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	460e      	mov	r6, r1
 8005c58:	4605      	mov	r5, r0
 8005c5a:	b118      	cbz	r0, 8005c64 <_puts_r+0x10>
 8005c5c:	6983      	ldr	r3, [r0, #24]
 8005c5e:	b90b      	cbnz	r3, 8005c64 <_puts_r+0x10>
 8005c60:	f001 f90a 	bl	8006e78 <__sinit>
 8005c64:	69ab      	ldr	r3, [r5, #24]
 8005c66:	68ac      	ldr	r4, [r5, #8]
 8005c68:	b913      	cbnz	r3, 8005c70 <_puts_r+0x1c>
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	f001 f904 	bl	8006e78 <__sinit>
 8005c70:	4b2c      	ldr	r3, [pc, #176]	; (8005d24 <_puts_r+0xd0>)
 8005c72:	429c      	cmp	r4, r3
 8005c74:	d120      	bne.n	8005cb8 <_puts_r+0x64>
 8005c76:	686c      	ldr	r4, [r5, #4]
 8005c78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c7a:	07db      	lsls	r3, r3, #31
 8005c7c:	d405      	bmi.n	8005c8a <_puts_r+0x36>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	0598      	lsls	r0, r3, #22
 8005c82:	d402      	bmi.n	8005c8a <_puts_r+0x36>
 8005c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c86:	f001 f99a 	bl	8006fbe <__retarget_lock_acquire_recursive>
 8005c8a:	89a3      	ldrh	r3, [r4, #12]
 8005c8c:	0719      	lsls	r1, r3, #28
 8005c8e:	d51d      	bpl.n	8005ccc <_puts_r+0x78>
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	b1db      	cbz	r3, 8005ccc <_puts_r+0x78>
 8005c94:	3e01      	subs	r6, #1
 8005c96:	68a3      	ldr	r3, [r4, #8]
 8005c98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	60a3      	str	r3, [r4, #8]
 8005ca0:	bb39      	cbnz	r1, 8005cf2 <_puts_r+0x9e>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	da38      	bge.n	8005d18 <_puts_r+0xc4>
 8005ca6:	4622      	mov	r2, r4
 8005ca8:	210a      	movs	r1, #10
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 f88c 	bl	8005dc8 <__swbuf_r>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d011      	beq.n	8005cd8 <_puts_r+0x84>
 8005cb4:	250a      	movs	r5, #10
 8005cb6:	e011      	b.n	8005cdc <_puts_r+0x88>
 8005cb8:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <_puts_r+0xd4>)
 8005cba:	429c      	cmp	r4, r3
 8005cbc:	d101      	bne.n	8005cc2 <_puts_r+0x6e>
 8005cbe:	68ac      	ldr	r4, [r5, #8]
 8005cc0:	e7da      	b.n	8005c78 <_puts_r+0x24>
 8005cc2:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <_puts_r+0xd8>)
 8005cc4:	429c      	cmp	r4, r3
 8005cc6:	bf08      	it	eq
 8005cc8:	68ec      	ldreq	r4, [r5, #12]
 8005cca:	e7d5      	b.n	8005c78 <_puts_r+0x24>
 8005ccc:	4621      	mov	r1, r4
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 f8cc 	bl	8005e6c <__swsetup_r>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d0dd      	beq.n	8005c94 <_puts_r+0x40>
 8005cd8:	f04f 35ff 	mov.w	r5, #4294967295
 8005cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cde:	07da      	lsls	r2, r3, #31
 8005ce0:	d405      	bmi.n	8005cee <_puts_r+0x9a>
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	059b      	lsls	r3, r3, #22
 8005ce6:	d402      	bmi.n	8005cee <_puts_r+0x9a>
 8005ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cea:	f001 f969 	bl	8006fc0 <__retarget_lock_release_recursive>
 8005cee:	4628      	mov	r0, r5
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da04      	bge.n	8005d00 <_puts_r+0xac>
 8005cf6:	69a2      	ldr	r2, [r4, #24]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	dc06      	bgt.n	8005d0a <_puts_r+0xb6>
 8005cfc:	290a      	cmp	r1, #10
 8005cfe:	d004      	beq.n	8005d0a <_puts_r+0xb6>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	6022      	str	r2, [r4, #0]
 8005d06:	7019      	strb	r1, [r3, #0]
 8005d08:	e7c5      	b.n	8005c96 <_puts_r+0x42>
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f000 f85b 	bl	8005dc8 <__swbuf_r>
 8005d12:	3001      	adds	r0, #1
 8005d14:	d1bf      	bne.n	8005c96 <_puts_r+0x42>
 8005d16:	e7df      	b.n	8005cd8 <_puts_r+0x84>
 8005d18:	250a      	movs	r5, #10
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	6022      	str	r2, [r4, #0]
 8005d20:	701d      	strb	r5, [r3, #0]
 8005d22:	e7db      	b.n	8005cdc <_puts_r+0x88>
 8005d24:	080082b8 	.word	0x080082b8
 8005d28:	080082d8 	.word	0x080082d8
 8005d2c:	08008298 	.word	0x08008298

08005d30 <puts>:
 8005d30:	4b02      	ldr	r3, [pc, #8]	; (8005d3c <puts+0xc>)
 8005d32:	4601      	mov	r1, r0
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	f7ff bf8d 	b.w	8005c54 <_puts_r>
 8005d3a:	bf00      	nop
 8005d3c:	2000000c 	.word	0x2000000c

08005d40 <_sbrk_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	2300      	movs	r3, #0
 8005d44:	4d05      	ldr	r5, [pc, #20]	; (8005d5c <_sbrk_r+0x1c>)
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	602b      	str	r3, [r5, #0]
 8005d4c:	f7fb ffd4 	bl	8001cf8 <_sbrk>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_sbrk_r+0x1a>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_sbrk_r+0x1a>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	2000036c 	.word	0x2000036c

08005d60 <sniprintf>:
 8005d60:	b40c      	push	{r2, r3}
 8005d62:	b530      	push	{r4, r5, lr}
 8005d64:	4b17      	ldr	r3, [pc, #92]	; (8005dc4 <sniprintf+0x64>)
 8005d66:	1e0c      	subs	r4, r1, #0
 8005d68:	681d      	ldr	r5, [r3, #0]
 8005d6a:	b09d      	sub	sp, #116	; 0x74
 8005d6c:	da08      	bge.n	8005d80 <sniprintf+0x20>
 8005d6e:	238b      	movs	r3, #139	; 0x8b
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	602b      	str	r3, [r5, #0]
 8005d76:	b01d      	add	sp, #116	; 0x74
 8005d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d7c:	b002      	add	sp, #8
 8005d7e:	4770      	bx	lr
 8005d80:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005d84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d88:	bf0c      	ite	eq
 8005d8a:	4623      	moveq	r3, r4
 8005d8c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d90:	9304      	str	r3, [sp, #16]
 8005d92:	9307      	str	r3, [sp, #28]
 8005d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d98:	9002      	str	r0, [sp, #8]
 8005d9a:	9006      	str	r0, [sp, #24]
 8005d9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005da0:	4628      	mov	r0, r5
 8005da2:	ab21      	add	r3, sp, #132	; 0x84
 8005da4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005da6:	a902      	add	r1, sp, #8
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	f001 fd83 	bl	80078b4 <_svfiprintf_r>
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	bfbc      	itt	lt
 8005db2:	238b      	movlt	r3, #139	; 0x8b
 8005db4:	602b      	strlt	r3, [r5, #0]
 8005db6:	2c00      	cmp	r4, #0
 8005db8:	d0dd      	beq.n	8005d76 <sniprintf+0x16>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	9b02      	ldr	r3, [sp, #8]
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	e7d9      	b.n	8005d76 <sniprintf+0x16>
 8005dc2:	bf00      	nop
 8005dc4:	2000000c 	.word	0x2000000c

08005dc8 <__swbuf_r>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	460e      	mov	r6, r1
 8005dcc:	4614      	mov	r4, r2
 8005dce:	4605      	mov	r5, r0
 8005dd0:	b118      	cbz	r0, 8005dda <__swbuf_r+0x12>
 8005dd2:	6983      	ldr	r3, [r0, #24]
 8005dd4:	b90b      	cbnz	r3, 8005dda <__swbuf_r+0x12>
 8005dd6:	f001 f84f 	bl	8006e78 <__sinit>
 8005dda:	4b21      	ldr	r3, [pc, #132]	; (8005e60 <__swbuf_r+0x98>)
 8005ddc:	429c      	cmp	r4, r3
 8005dde:	d12b      	bne.n	8005e38 <__swbuf_r+0x70>
 8005de0:	686c      	ldr	r4, [r5, #4]
 8005de2:	69a3      	ldr	r3, [r4, #24]
 8005de4:	60a3      	str	r3, [r4, #8]
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	071a      	lsls	r2, r3, #28
 8005dea:	d52f      	bpl.n	8005e4c <__swbuf_r+0x84>
 8005dec:	6923      	ldr	r3, [r4, #16]
 8005dee:	b36b      	cbz	r3, 8005e4c <__swbuf_r+0x84>
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	b2f6      	uxtb	r6, r6
 8005df6:	1ac0      	subs	r0, r0, r3
 8005df8:	6963      	ldr	r3, [r4, #20]
 8005dfa:	4637      	mov	r7, r6
 8005dfc:	4283      	cmp	r3, r0
 8005dfe:	dc04      	bgt.n	8005e0a <__swbuf_r+0x42>
 8005e00:	4621      	mov	r1, r4
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 ffa4 	bl	8006d50 <_fflush_r>
 8005e08:	bb30      	cbnz	r0, 8005e58 <__swbuf_r+0x90>
 8005e0a:	68a3      	ldr	r3, [r4, #8]
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	60a3      	str	r3, [r4, #8]
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	6022      	str	r2, [r4, #0]
 8005e18:	701e      	strb	r6, [r3, #0]
 8005e1a:	6963      	ldr	r3, [r4, #20]
 8005e1c:	4283      	cmp	r3, r0
 8005e1e:	d004      	beq.n	8005e2a <__swbuf_r+0x62>
 8005e20:	89a3      	ldrh	r3, [r4, #12]
 8005e22:	07db      	lsls	r3, r3, #31
 8005e24:	d506      	bpl.n	8005e34 <__swbuf_r+0x6c>
 8005e26:	2e0a      	cmp	r6, #10
 8005e28:	d104      	bne.n	8005e34 <__swbuf_r+0x6c>
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f000 ff8f 	bl	8006d50 <_fflush_r>
 8005e32:	b988      	cbnz	r0, 8005e58 <__swbuf_r+0x90>
 8005e34:	4638      	mov	r0, r7
 8005e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e38:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <__swbuf_r+0x9c>)
 8005e3a:	429c      	cmp	r4, r3
 8005e3c:	d101      	bne.n	8005e42 <__swbuf_r+0x7a>
 8005e3e:	68ac      	ldr	r4, [r5, #8]
 8005e40:	e7cf      	b.n	8005de2 <__swbuf_r+0x1a>
 8005e42:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <__swbuf_r+0xa0>)
 8005e44:	429c      	cmp	r4, r3
 8005e46:	bf08      	it	eq
 8005e48:	68ec      	ldreq	r4, [r5, #12]
 8005e4a:	e7ca      	b.n	8005de2 <__swbuf_r+0x1a>
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f000 f80c 	bl	8005e6c <__swsetup_r>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d0cb      	beq.n	8005df0 <__swbuf_r+0x28>
 8005e58:	f04f 37ff 	mov.w	r7, #4294967295
 8005e5c:	e7ea      	b.n	8005e34 <__swbuf_r+0x6c>
 8005e5e:	bf00      	nop
 8005e60:	080082b8 	.word	0x080082b8
 8005e64:	080082d8 	.word	0x080082d8
 8005e68:	08008298 	.word	0x08008298

08005e6c <__swsetup_r>:
 8005e6c:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <__swsetup_r+0xcc>)
 8005e6e:	b570      	push	{r4, r5, r6, lr}
 8005e70:	681d      	ldr	r5, [r3, #0]
 8005e72:	4606      	mov	r6, r0
 8005e74:	460c      	mov	r4, r1
 8005e76:	b125      	cbz	r5, 8005e82 <__swsetup_r+0x16>
 8005e78:	69ab      	ldr	r3, [r5, #24]
 8005e7a:	b913      	cbnz	r3, 8005e82 <__swsetup_r+0x16>
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 fffb 	bl	8006e78 <__sinit>
 8005e82:	4b2e      	ldr	r3, [pc, #184]	; (8005f3c <__swsetup_r+0xd0>)
 8005e84:	429c      	cmp	r4, r3
 8005e86:	d10f      	bne.n	8005ea8 <__swsetup_r+0x3c>
 8005e88:	686c      	ldr	r4, [r5, #4]
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e90:	0719      	lsls	r1, r3, #28
 8005e92:	d42c      	bmi.n	8005eee <__swsetup_r+0x82>
 8005e94:	06dd      	lsls	r5, r3, #27
 8005e96:	d411      	bmi.n	8005ebc <__swsetup_r+0x50>
 8005e98:	2309      	movs	r3, #9
 8005e9a:	6033      	str	r3, [r6, #0]
 8005e9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	e03e      	b.n	8005f26 <__swsetup_r+0xba>
 8005ea8:	4b25      	ldr	r3, [pc, #148]	; (8005f40 <__swsetup_r+0xd4>)
 8005eaa:	429c      	cmp	r4, r3
 8005eac:	d101      	bne.n	8005eb2 <__swsetup_r+0x46>
 8005eae:	68ac      	ldr	r4, [r5, #8]
 8005eb0:	e7eb      	b.n	8005e8a <__swsetup_r+0x1e>
 8005eb2:	4b24      	ldr	r3, [pc, #144]	; (8005f44 <__swsetup_r+0xd8>)
 8005eb4:	429c      	cmp	r4, r3
 8005eb6:	bf08      	it	eq
 8005eb8:	68ec      	ldreq	r4, [r5, #12]
 8005eba:	e7e6      	b.n	8005e8a <__swsetup_r+0x1e>
 8005ebc:	0758      	lsls	r0, r3, #29
 8005ebe:	d512      	bpl.n	8005ee6 <__swsetup_r+0x7a>
 8005ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ec2:	b141      	cbz	r1, 8005ed6 <__swsetup_r+0x6a>
 8005ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ec8:	4299      	cmp	r1, r3
 8005eca:	d002      	beq.n	8005ed2 <__swsetup_r+0x66>
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f7ff f9a3 	bl	8005218 <_free_r>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005edc:	81a3      	strh	r3, [r4, #12]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	6063      	str	r3, [r4, #4]
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	f043 0308 	orr.w	r3, r3, #8
 8005eec:	81a3      	strh	r3, [r4, #12]
 8005eee:	6923      	ldr	r3, [r4, #16]
 8005ef0:	b94b      	cbnz	r3, 8005f06 <__swsetup_r+0x9a>
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005efc:	d003      	beq.n	8005f06 <__swsetup_r+0x9a>
 8005efe:	4621      	mov	r1, r4
 8005f00:	4630      	mov	r0, r6
 8005f02:	f001 f883 	bl	800700c <__smakebuf_r>
 8005f06:	89a0      	ldrh	r0, [r4, #12]
 8005f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f0c:	f010 0301 	ands.w	r3, r0, #1
 8005f10:	d00a      	beq.n	8005f28 <__swsetup_r+0xbc>
 8005f12:	2300      	movs	r3, #0
 8005f14:	60a3      	str	r3, [r4, #8]
 8005f16:	6963      	ldr	r3, [r4, #20]
 8005f18:	425b      	negs	r3, r3
 8005f1a:	61a3      	str	r3, [r4, #24]
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	b943      	cbnz	r3, 8005f32 <__swsetup_r+0xc6>
 8005f20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f24:	d1ba      	bne.n	8005e9c <__swsetup_r+0x30>
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
 8005f28:	0781      	lsls	r1, r0, #30
 8005f2a:	bf58      	it	pl
 8005f2c:	6963      	ldrpl	r3, [r4, #20]
 8005f2e:	60a3      	str	r3, [r4, #8]
 8005f30:	e7f4      	b.n	8005f1c <__swsetup_r+0xb0>
 8005f32:	2000      	movs	r0, #0
 8005f34:	e7f7      	b.n	8005f26 <__swsetup_r+0xba>
 8005f36:	bf00      	nop
 8005f38:	2000000c 	.word	0x2000000c
 8005f3c:	080082b8 	.word	0x080082b8
 8005f40:	080082d8 	.word	0x080082d8
 8005f44:	08008298 	.word	0x08008298

08005f48 <quorem>:
 8005f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	6903      	ldr	r3, [r0, #16]
 8005f4e:	690c      	ldr	r4, [r1, #16]
 8005f50:	4607      	mov	r7, r0
 8005f52:	42a3      	cmp	r3, r4
 8005f54:	f2c0 8083 	blt.w	800605e <quorem+0x116>
 8005f58:	3c01      	subs	r4, #1
 8005f5a:	f100 0514 	add.w	r5, r0, #20
 8005f5e:	f101 0814 	add.w	r8, r1, #20
 8005f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f66:	9301      	str	r3, [sp, #4]
 8005f68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f70:	3301      	adds	r3, #1
 8005f72:	429a      	cmp	r2, r3
 8005f74:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f80:	d332      	bcc.n	8005fe8 <quorem+0xa0>
 8005f82:	f04f 0e00 	mov.w	lr, #0
 8005f86:	4640      	mov	r0, r8
 8005f88:	46ac      	mov	ip, r5
 8005f8a:	46f2      	mov	sl, lr
 8005f8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f90:	b293      	uxth	r3, r2
 8005f92:	fb06 e303 	mla	r3, r6, r3, lr
 8005f96:	0c12      	lsrs	r2, r2, #16
 8005f98:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f9c:	fb06 e202 	mla	r2, r6, r2, lr
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	ebaa 0303 	sub.w	r3, sl, r3
 8005fa6:	f8dc a000 	ldr.w	sl, [ip]
 8005faa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005fae:	fa1f fa8a 	uxth.w	sl, sl
 8005fb2:	4453      	add	r3, sl
 8005fb4:	fa1f fa82 	uxth.w	sl, r2
 8005fb8:	f8dc 2000 	ldr.w	r2, [ip]
 8005fbc:	4581      	cmp	r9, r0
 8005fbe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005fc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fcc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005fd0:	f84c 3b04 	str.w	r3, [ip], #4
 8005fd4:	d2da      	bcs.n	8005f8c <quorem+0x44>
 8005fd6:	f855 300b 	ldr.w	r3, [r5, fp]
 8005fda:	b92b      	cbnz	r3, 8005fe8 <quorem+0xa0>
 8005fdc:	9b01      	ldr	r3, [sp, #4]
 8005fde:	3b04      	subs	r3, #4
 8005fe0:	429d      	cmp	r5, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	d32f      	bcc.n	8006046 <quorem+0xfe>
 8005fe6:	613c      	str	r4, [r7, #16]
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f001 faf1 	bl	80075d0 <__mcmp>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	db25      	blt.n	800603e <quorem+0xf6>
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f04f 0c00 	mov.w	ip, #0
 8005ff8:	3601      	adds	r6, #1
 8005ffa:	f858 1b04 	ldr.w	r1, [r8], #4
 8005ffe:	f8d0 e000 	ldr.w	lr, [r0]
 8006002:	b28b      	uxth	r3, r1
 8006004:	ebac 0303 	sub.w	r3, ip, r3
 8006008:	fa1f f28e 	uxth.w	r2, lr
 800600c:	4413      	add	r3, r2
 800600e:	0c0a      	lsrs	r2, r1, #16
 8006010:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006018:	b29b      	uxth	r3, r3
 800601a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800601e:	45c1      	cmp	r9, r8
 8006020:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006024:	f840 3b04 	str.w	r3, [r0], #4
 8006028:	d2e7      	bcs.n	8005ffa <quorem+0xb2>
 800602a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800602e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006032:	b922      	cbnz	r2, 800603e <quorem+0xf6>
 8006034:	3b04      	subs	r3, #4
 8006036:	429d      	cmp	r5, r3
 8006038:	461a      	mov	r2, r3
 800603a:	d30a      	bcc.n	8006052 <quorem+0x10a>
 800603c:	613c      	str	r4, [r7, #16]
 800603e:	4630      	mov	r0, r6
 8006040:	b003      	add	sp, #12
 8006042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	3b04      	subs	r3, #4
 800604a:	2a00      	cmp	r2, #0
 800604c:	d1cb      	bne.n	8005fe6 <quorem+0x9e>
 800604e:	3c01      	subs	r4, #1
 8006050:	e7c6      	b.n	8005fe0 <quorem+0x98>
 8006052:	6812      	ldr	r2, [r2, #0]
 8006054:	3b04      	subs	r3, #4
 8006056:	2a00      	cmp	r2, #0
 8006058:	d1f0      	bne.n	800603c <quorem+0xf4>
 800605a:	3c01      	subs	r4, #1
 800605c:	e7eb      	b.n	8006036 <quorem+0xee>
 800605e:	2000      	movs	r0, #0
 8006060:	e7ee      	b.n	8006040 <quorem+0xf8>
 8006062:	0000      	movs	r0, r0
 8006064:	0000      	movs	r0, r0
	...

08006068 <_dtoa_r>:
 8006068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606c:	4616      	mov	r6, r2
 800606e:	461f      	mov	r7, r3
 8006070:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006072:	b099      	sub	sp, #100	; 0x64
 8006074:	4605      	mov	r5, r0
 8006076:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800607a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800607e:	b974      	cbnz	r4, 800609e <_dtoa_r+0x36>
 8006080:	2010      	movs	r0, #16
 8006082:	f7ff f8b1 	bl	80051e8 <malloc>
 8006086:	4602      	mov	r2, r0
 8006088:	6268      	str	r0, [r5, #36]	; 0x24
 800608a:	b920      	cbnz	r0, 8006096 <_dtoa_r+0x2e>
 800608c:	21ea      	movs	r1, #234	; 0xea
 800608e:	4bae      	ldr	r3, [pc, #696]	; (8006348 <_dtoa_r+0x2e0>)
 8006090:	48ae      	ldr	r0, [pc, #696]	; (800634c <_dtoa_r+0x2e4>)
 8006092:	f001 febd 	bl	8007e10 <__assert_func>
 8006096:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800609a:	6004      	str	r4, [r0, #0]
 800609c:	60c4      	str	r4, [r0, #12]
 800609e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060a0:	6819      	ldr	r1, [r3, #0]
 80060a2:	b151      	cbz	r1, 80060ba <_dtoa_r+0x52>
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	2301      	movs	r3, #1
 80060a8:	4093      	lsls	r3, r2
 80060aa:	604a      	str	r2, [r1, #4]
 80060ac:	608b      	str	r3, [r1, #8]
 80060ae:	4628      	mov	r0, r5
 80060b0:	f001 f854 	bl	800715c <_Bfree>
 80060b4:	2200      	movs	r2, #0
 80060b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	1e3b      	subs	r3, r7, #0
 80060bc:	bfaf      	iteee	ge
 80060be:	2300      	movge	r3, #0
 80060c0:	2201      	movlt	r2, #1
 80060c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060c6:	9305      	strlt	r3, [sp, #20]
 80060c8:	bfa8      	it	ge
 80060ca:	f8c8 3000 	strge.w	r3, [r8]
 80060ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80060d2:	4b9f      	ldr	r3, [pc, #636]	; (8006350 <_dtoa_r+0x2e8>)
 80060d4:	bfb8      	it	lt
 80060d6:	f8c8 2000 	strlt.w	r2, [r8]
 80060da:	ea33 0309 	bics.w	r3, r3, r9
 80060de:	d119      	bne.n	8006114 <_dtoa_r+0xac>
 80060e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80060e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060ec:	4333      	orrs	r3, r6
 80060ee:	f000 8580 	beq.w	8006bf2 <_dtoa_r+0xb8a>
 80060f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060f4:	b953      	cbnz	r3, 800610c <_dtoa_r+0xa4>
 80060f6:	4b97      	ldr	r3, [pc, #604]	; (8006354 <_dtoa_r+0x2ec>)
 80060f8:	e022      	b.n	8006140 <_dtoa_r+0xd8>
 80060fa:	4b97      	ldr	r3, [pc, #604]	; (8006358 <_dtoa_r+0x2f0>)
 80060fc:	9308      	str	r3, [sp, #32]
 80060fe:	3308      	adds	r3, #8
 8006100:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	9808      	ldr	r0, [sp, #32]
 8006106:	b019      	add	sp, #100	; 0x64
 8006108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610c:	4b91      	ldr	r3, [pc, #580]	; (8006354 <_dtoa_r+0x2ec>)
 800610e:	9308      	str	r3, [sp, #32]
 8006110:	3303      	adds	r3, #3
 8006112:	e7f5      	b.n	8006100 <_dtoa_r+0x98>
 8006114:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006118:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800611c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006120:	2200      	movs	r2, #0
 8006122:	2300      	movs	r3, #0
 8006124:	f7fa fc40 	bl	80009a8 <__aeabi_dcmpeq>
 8006128:	4680      	mov	r8, r0
 800612a:	b158      	cbz	r0, 8006144 <_dtoa_r+0xdc>
 800612c:	2301      	movs	r3, #1
 800612e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 8559 	beq.w	8006bec <_dtoa_r+0xb84>
 800613a:	4888      	ldr	r0, [pc, #544]	; (800635c <_dtoa_r+0x2f4>)
 800613c:	6018      	str	r0, [r3, #0]
 800613e:	1e43      	subs	r3, r0, #1
 8006140:	9308      	str	r3, [sp, #32]
 8006142:	e7df      	b.n	8006104 <_dtoa_r+0x9c>
 8006144:	ab16      	add	r3, sp, #88	; 0x58
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	ab17      	add	r3, sp, #92	; 0x5c
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	4628      	mov	r0, r5
 800614e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006152:	f001 fae9 	bl	8007728 <__d2b>
 8006156:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800615a:	4682      	mov	sl, r0
 800615c:	2c00      	cmp	r4, #0
 800615e:	d07e      	beq.n	800625e <_dtoa_r+0x1f6>
 8006160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006166:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800616a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800616e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006172:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006176:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800617a:	2200      	movs	r2, #0
 800617c:	4b78      	ldr	r3, [pc, #480]	; (8006360 <_dtoa_r+0x2f8>)
 800617e:	f7f9 fff3 	bl	8000168 <__aeabi_dsub>
 8006182:	a36b      	add	r3, pc, #428	; (adr r3, 8006330 <_dtoa_r+0x2c8>)
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f7fa f9a6 	bl	80004d8 <__aeabi_dmul>
 800618c:	a36a      	add	r3, pc, #424	; (adr r3, 8006338 <_dtoa_r+0x2d0>)
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	f7f9 ffeb 	bl	800016c <__adddf3>
 8006196:	4606      	mov	r6, r0
 8006198:	4620      	mov	r0, r4
 800619a:	460f      	mov	r7, r1
 800619c:	f7fa f932 	bl	8000404 <__aeabi_i2d>
 80061a0:	a367      	add	r3, pc, #412	; (adr r3, 8006340 <_dtoa_r+0x2d8>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f7fa f997 	bl	80004d8 <__aeabi_dmul>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4630      	mov	r0, r6
 80061b0:	4639      	mov	r1, r7
 80061b2:	f7f9 ffdb 	bl	800016c <__adddf3>
 80061b6:	4606      	mov	r6, r0
 80061b8:	460f      	mov	r7, r1
 80061ba:	f7fa fc3d 	bl	8000a38 <__aeabi_d2iz>
 80061be:	2200      	movs	r2, #0
 80061c0:	4681      	mov	r9, r0
 80061c2:	2300      	movs	r3, #0
 80061c4:	4630      	mov	r0, r6
 80061c6:	4639      	mov	r1, r7
 80061c8:	f7fa fbf8 	bl	80009bc <__aeabi_dcmplt>
 80061cc:	b148      	cbz	r0, 80061e2 <_dtoa_r+0x17a>
 80061ce:	4648      	mov	r0, r9
 80061d0:	f7fa f918 	bl	8000404 <__aeabi_i2d>
 80061d4:	4632      	mov	r2, r6
 80061d6:	463b      	mov	r3, r7
 80061d8:	f7fa fbe6 	bl	80009a8 <__aeabi_dcmpeq>
 80061dc:	b908      	cbnz	r0, 80061e2 <_dtoa_r+0x17a>
 80061de:	f109 39ff 	add.w	r9, r9, #4294967295
 80061e2:	f1b9 0f16 	cmp.w	r9, #22
 80061e6:	d857      	bhi.n	8006298 <_dtoa_r+0x230>
 80061e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061ec:	4b5d      	ldr	r3, [pc, #372]	; (8006364 <_dtoa_r+0x2fc>)
 80061ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f7fa fbe1 	bl	80009bc <__aeabi_dcmplt>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d04e      	beq.n	800629c <_dtoa_r+0x234>
 80061fe:	2300      	movs	r3, #0
 8006200:	f109 39ff 	add.w	r9, r9, #4294967295
 8006204:	930f      	str	r3, [sp, #60]	; 0x3c
 8006206:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006208:	1b1c      	subs	r4, r3, r4
 800620a:	1e63      	subs	r3, r4, #1
 800620c:	9309      	str	r3, [sp, #36]	; 0x24
 800620e:	bf49      	itett	mi
 8006210:	f1c4 0301 	rsbmi	r3, r4, #1
 8006214:	2300      	movpl	r3, #0
 8006216:	9306      	strmi	r3, [sp, #24]
 8006218:	2300      	movmi	r3, #0
 800621a:	bf54      	ite	pl
 800621c:	9306      	strpl	r3, [sp, #24]
 800621e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006220:	f1b9 0f00 	cmp.w	r9, #0
 8006224:	db3c      	blt.n	80062a0 <_dtoa_r+0x238>
 8006226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006228:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800622c:	444b      	add	r3, r9
 800622e:	9309      	str	r3, [sp, #36]	; 0x24
 8006230:	2300      	movs	r3, #0
 8006232:	930a      	str	r3, [sp, #40]	; 0x28
 8006234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006236:	2b09      	cmp	r3, #9
 8006238:	d86c      	bhi.n	8006314 <_dtoa_r+0x2ac>
 800623a:	2b05      	cmp	r3, #5
 800623c:	bfc4      	itt	gt
 800623e:	3b04      	subgt	r3, #4
 8006240:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006242:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006244:	bfc8      	it	gt
 8006246:	2400      	movgt	r4, #0
 8006248:	f1a3 0302 	sub.w	r3, r3, #2
 800624c:	bfd8      	it	le
 800624e:	2401      	movle	r4, #1
 8006250:	2b03      	cmp	r3, #3
 8006252:	f200 808b 	bhi.w	800636c <_dtoa_r+0x304>
 8006256:	e8df f003 	tbb	[pc, r3]
 800625a:	4f2d      	.short	0x4f2d
 800625c:	5b4d      	.short	0x5b4d
 800625e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006262:	441c      	add	r4, r3
 8006264:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006268:	2b20      	cmp	r3, #32
 800626a:	bfc3      	ittte	gt
 800626c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006270:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006274:	fa09 f303 	lslgt.w	r3, r9, r3
 8006278:	f1c3 0320 	rsble	r3, r3, #32
 800627c:	bfc6      	itte	gt
 800627e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006282:	4318      	orrgt	r0, r3
 8006284:	fa06 f003 	lslle.w	r0, r6, r3
 8006288:	f7fa f8ac 	bl	80003e4 <__aeabi_ui2d>
 800628c:	2301      	movs	r3, #1
 800628e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006292:	3c01      	subs	r4, #1
 8006294:	9313      	str	r3, [sp, #76]	; 0x4c
 8006296:	e770      	b.n	800617a <_dtoa_r+0x112>
 8006298:	2301      	movs	r3, #1
 800629a:	e7b3      	b.n	8006204 <_dtoa_r+0x19c>
 800629c:	900f      	str	r0, [sp, #60]	; 0x3c
 800629e:	e7b2      	b.n	8006206 <_dtoa_r+0x19e>
 80062a0:	9b06      	ldr	r3, [sp, #24]
 80062a2:	eba3 0309 	sub.w	r3, r3, r9
 80062a6:	9306      	str	r3, [sp, #24]
 80062a8:	f1c9 0300 	rsb	r3, r9, #0
 80062ac:	930a      	str	r3, [sp, #40]	; 0x28
 80062ae:	2300      	movs	r3, #0
 80062b0:	930e      	str	r3, [sp, #56]	; 0x38
 80062b2:	e7bf      	b.n	8006234 <_dtoa_r+0x1cc>
 80062b4:	2300      	movs	r3, #0
 80062b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	dc59      	bgt.n	8006372 <_dtoa_r+0x30a>
 80062be:	f04f 0b01 	mov.w	fp, #1
 80062c2:	465b      	mov	r3, fp
 80062c4:	f8cd b008 	str.w	fp, [sp, #8]
 80062c8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80062cc:	2200      	movs	r2, #0
 80062ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80062d0:	6042      	str	r2, [r0, #4]
 80062d2:	2204      	movs	r2, #4
 80062d4:	f102 0614 	add.w	r6, r2, #20
 80062d8:	429e      	cmp	r6, r3
 80062da:	6841      	ldr	r1, [r0, #4]
 80062dc:	d94f      	bls.n	800637e <_dtoa_r+0x316>
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 fefc 	bl	80070dc <_Balloc>
 80062e4:	9008      	str	r0, [sp, #32]
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d14d      	bne.n	8006386 <_dtoa_r+0x31e>
 80062ea:	4602      	mov	r2, r0
 80062ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80062f0:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <_dtoa_r+0x300>)
 80062f2:	e6cd      	b.n	8006090 <_dtoa_r+0x28>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e7de      	b.n	80062b6 <_dtoa_r+0x24e>
 80062f8:	2300      	movs	r3, #0
 80062fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80062fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062fe:	eb09 0b03 	add.w	fp, r9, r3
 8006302:	f10b 0301 	add.w	r3, fp, #1
 8006306:	2b01      	cmp	r3, #1
 8006308:	9302      	str	r3, [sp, #8]
 800630a:	bfb8      	it	lt
 800630c:	2301      	movlt	r3, #1
 800630e:	e7dd      	b.n	80062cc <_dtoa_r+0x264>
 8006310:	2301      	movs	r3, #1
 8006312:	e7f2      	b.n	80062fa <_dtoa_r+0x292>
 8006314:	2401      	movs	r4, #1
 8006316:	2300      	movs	r3, #0
 8006318:	940b      	str	r4, [sp, #44]	; 0x2c
 800631a:	9322      	str	r3, [sp, #136]	; 0x88
 800631c:	f04f 3bff 	mov.w	fp, #4294967295
 8006320:	2200      	movs	r2, #0
 8006322:	2312      	movs	r3, #18
 8006324:	f8cd b008 	str.w	fp, [sp, #8]
 8006328:	9223      	str	r2, [sp, #140]	; 0x8c
 800632a:	e7cf      	b.n	80062cc <_dtoa_r+0x264>
 800632c:	f3af 8000 	nop.w
 8006330:	636f4361 	.word	0x636f4361
 8006334:	3fd287a7 	.word	0x3fd287a7
 8006338:	8b60c8b3 	.word	0x8b60c8b3
 800633c:	3fc68a28 	.word	0x3fc68a28
 8006340:	509f79fb 	.word	0x509f79fb
 8006344:	3fd34413 	.word	0x3fd34413
 8006348:	08008211 	.word	0x08008211
 800634c:	08008228 	.word	0x08008228
 8006350:	7ff00000 	.word	0x7ff00000
 8006354:	0800820d 	.word	0x0800820d
 8006358:	08008204 	.word	0x08008204
 800635c:	080081e1 	.word	0x080081e1
 8006360:	3ff80000 	.word	0x3ff80000
 8006364:	08008380 	.word	0x08008380
 8006368:	08008287 	.word	0x08008287
 800636c:	2301      	movs	r3, #1
 800636e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006370:	e7d4      	b.n	800631c <_dtoa_r+0x2b4>
 8006372:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006376:	465b      	mov	r3, fp
 8006378:	f8cd b008 	str.w	fp, [sp, #8]
 800637c:	e7a6      	b.n	80062cc <_dtoa_r+0x264>
 800637e:	3101      	adds	r1, #1
 8006380:	6041      	str	r1, [r0, #4]
 8006382:	0052      	lsls	r2, r2, #1
 8006384:	e7a6      	b.n	80062d4 <_dtoa_r+0x26c>
 8006386:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006388:	9a08      	ldr	r2, [sp, #32]
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	9b02      	ldr	r3, [sp, #8]
 800638e:	2b0e      	cmp	r3, #14
 8006390:	f200 80a8 	bhi.w	80064e4 <_dtoa_r+0x47c>
 8006394:	2c00      	cmp	r4, #0
 8006396:	f000 80a5 	beq.w	80064e4 <_dtoa_r+0x47c>
 800639a:	f1b9 0f00 	cmp.w	r9, #0
 800639e:	dd34      	ble.n	800640a <_dtoa_r+0x3a2>
 80063a0:	4a9a      	ldr	r2, [pc, #616]	; (800660c <_dtoa_r+0x5a4>)
 80063a2:	f009 030f 	and.w	r3, r9, #15
 80063a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063aa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80063ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80063b6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80063ba:	d016      	beq.n	80063ea <_dtoa_r+0x382>
 80063bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063c0:	4b93      	ldr	r3, [pc, #588]	; (8006610 <_dtoa_r+0x5a8>)
 80063c2:	2703      	movs	r7, #3
 80063c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063c8:	f7fa f9b0 	bl	800072c <__aeabi_ddiv>
 80063cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063d0:	f004 040f 	and.w	r4, r4, #15
 80063d4:	4e8e      	ldr	r6, [pc, #568]	; (8006610 <_dtoa_r+0x5a8>)
 80063d6:	b954      	cbnz	r4, 80063ee <_dtoa_r+0x386>
 80063d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063e0:	f7fa f9a4 	bl	800072c <__aeabi_ddiv>
 80063e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063e8:	e029      	b.n	800643e <_dtoa_r+0x3d6>
 80063ea:	2702      	movs	r7, #2
 80063ec:	e7f2      	b.n	80063d4 <_dtoa_r+0x36c>
 80063ee:	07e1      	lsls	r1, r4, #31
 80063f0:	d508      	bpl.n	8006404 <_dtoa_r+0x39c>
 80063f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063fa:	f7fa f86d 	bl	80004d8 <__aeabi_dmul>
 80063fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006402:	3701      	adds	r7, #1
 8006404:	1064      	asrs	r4, r4, #1
 8006406:	3608      	adds	r6, #8
 8006408:	e7e5      	b.n	80063d6 <_dtoa_r+0x36e>
 800640a:	f000 80a5 	beq.w	8006558 <_dtoa_r+0x4f0>
 800640e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006412:	f1c9 0400 	rsb	r4, r9, #0
 8006416:	4b7d      	ldr	r3, [pc, #500]	; (800660c <_dtoa_r+0x5a4>)
 8006418:	f004 020f 	and.w	r2, r4, #15
 800641c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f7fa f858 	bl	80004d8 <__aeabi_dmul>
 8006428:	2702      	movs	r7, #2
 800642a:	2300      	movs	r3, #0
 800642c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006430:	4e77      	ldr	r6, [pc, #476]	; (8006610 <_dtoa_r+0x5a8>)
 8006432:	1124      	asrs	r4, r4, #4
 8006434:	2c00      	cmp	r4, #0
 8006436:	f040 8084 	bne.w	8006542 <_dtoa_r+0x4da>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1d2      	bne.n	80063e4 <_dtoa_r+0x37c>
 800643e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 808b 	beq.w	800655c <_dtoa_r+0x4f4>
 8006446:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800644a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800644e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006452:	2200      	movs	r2, #0
 8006454:	4b6f      	ldr	r3, [pc, #444]	; (8006614 <_dtoa_r+0x5ac>)
 8006456:	f7fa fab1 	bl	80009bc <__aeabi_dcmplt>
 800645a:	2800      	cmp	r0, #0
 800645c:	d07e      	beq.n	800655c <_dtoa_r+0x4f4>
 800645e:	9b02      	ldr	r3, [sp, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d07b      	beq.n	800655c <_dtoa_r+0x4f4>
 8006464:	f1bb 0f00 	cmp.w	fp, #0
 8006468:	dd38      	ble.n	80064dc <_dtoa_r+0x474>
 800646a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800646e:	2200      	movs	r2, #0
 8006470:	4b69      	ldr	r3, [pc, #420]	; (8006618 <_dtoa_r+0x5b0>)
 8006472:	f7fa f831 	bl	80004d8 <__aeabi_dmul>
 8006476:	465c      	mov	r4, fp
 8006478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800647c:	f109 38ff 	add.w	r8, r9, #4294967295
 8006480:	3701      	adds	r7, #1
 8006482:	4638      	mov	r0, r7
 8006484:	f7f9 ffbe 	bl	8000404 <__aeabi_i2d>
 8006488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800648c:	f7fa f824 	bl	80004d8 <__aeabi_dmul>
 8006490:	2200      	movs	r2, #0
 8006492:	4b62      	ldr	r3, [pc, #392]	; (800661c <_dtoa_r+0x5b4>)
 8006494:	f7f9 fe6a 	bl	800016c <__adddf3>
 8006498:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800649c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064a0:	9611      	str	r6, [sp, #68]	; 0x44
 80064a2:	2c00      	cmp	r4, #0
 80064a4:	d15d      	bne.n	8006562 <_dtoa_r+0x4fa>
 80064a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064aa:	2200      	movs	r2, #0
 80064ac:	4b5c      	ldr	r3, [pc, #368]	; (8006620 <_dtoa_r+0x5b8>)
 80064ae:	f7f9 fe5b 	bl	8000168 <__aeabi_dsub>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064ba:	4633      	mov	r3, r6
 80064bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064be:	f7fa fa9b 	bl	80009f8 <__aeabi_dcmpgt>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f040 829e 	bne.w	8006a04 <_dtoa_r+0x99c>
 80064c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80064d2:	f7fa fa73 	bl	80009bc <__aeabi_dcmplt>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	f040 8292 	bne.w	8006a00 <_dtoa_r+0x998>
 80064dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80064e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f2c0 8153 	blt.w	8006792 <_dtoa_r+0x72a>
 80064ec:	f1b9 0f0e 	cmp.w	r9, #14
 80064f0:	f300 814f 	bgt.w	8006792 <_dtoa_r+0x72a>
 80064f4:	4b45      	ldr	r3, [pc, #276]	; (800660c <_dtoa_r+0x5a4>)
 80064f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80064fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006502:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006504:	2b00      	cmp	r3, #0
 8006506:	f280 80db 	bge.w	80066c0 <_dtoa_r+0x658>
 800650a:	9b02      	ldr	r3, [sp, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f300 80d7 	bgt.w	80066c0 <_dtoa_r+0x658>
 8006512:	f040 8274 	bne.w	80069fe <_dtoa_r+0x996>
 8006516:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800651a:	2200      	movs	r2, #0
 800651c:	4b40      	ldr	r3, [pc, #256]	; (8006620 <_dtoa_r+0x5b8>)
 800651e:	f7f9 ffdb 	bl	80004d8 <__aeabi_dmul>
 8006522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006526:	f7fa fa5d 	bl	80009e4 <__aeabi_dcmpge>
 800652a:	9c02      	ldr	r4, [sp, #8]
 800652c:	4626      	mov	r6, r4
 800652e:	2800      	cmp	r0, #0
 8006530:	f040 824a 	bne.w	80069c8 <_dtoa_r+0x960>
 8006534:	2331      	movs	r3, #49	; 0x31
 8006536:	9f08      	ldr	r7, [sp, #32]
 8006538:	f109 0901 	add.w	r9, r9, #1
 800653c:	f807 3b01 	strb.w	r3, [r7], #1
 8006540:	e246      	b.n	80069d0 <_dtoa_r+0x968>
 8006542:	07e2      	lsls	r2, r4, #31
 8006544:	d505      	bpl.n	8006552 <_dtoa_r+0x4ea>
 8006546:	e9d6 2300 	ldrd	r2, r3, [r6]
 800654a:	f7f9 ffc5 	bl	80004d8 <__aeabi_dmul>
 800654e:	2301      	movs	r3, #1
 8006550:	3701      	adds	r7, #1
 8006552:	1064      	asrs	r4, r4, #1
 8006554:	3608      	adds	r6, #8
 8006556:	e76d      	b.n	8006434 <_dtoa_r+0x3cc>
 8006558:	2702      	movs	r7, #2
 800655a:	e770      	b.n	800643e <_dtoa_r+0x3d6>
 800655c:	46c8      	mov	r8, r9
 800655e:	9c02      	ldr	r4, [sp, #8]
 8006560:	e78f      	b.n	8006482 <_dtoa_r+0x41a>
 8006562:	9908      	ldr	r1, [sp, #32]
 8006564:	4b29      	ldr	r3, [pc, #164]	; (800660c <_dtoa_r+0x5a4>)
 8006566:	4421      	add	r1, r4
 8006568:	9112      	str	r1, [sp, #72]	; 0x48
 800656a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800656c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006570:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006574:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006578:	2900      	cmp	r1, #0
 800657a:	d055      	beq.n	8006628 <_dtoa_r+0x5c0>
 800657c:	2000      	movs	r0, #0
 800657e:	4929      	ldr	r1, [pc, #164]	; (8006624 <_dtoa_r+0x5bc>)
 8006580:	f7fa f8d4 	bl	800072c <__aeabi_ddiv>
 8006584:	463b      	mov	r3, r7
 8006586:	4632      	mov	r2, r6
 8006588:	f7f9 fdee 	bl	8000168 <__aeabi_dsub>
 800658c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006590:	9f08      	ldr	r7, [sp, #32]
 8006592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006596:	f7fa fa4f 	bl	8000a38 <__aeabi_d2iz>
 800659a:	4604      	mov	r4, r0
 800659c:	f7f9 ff32 	bl	8000404 <__aeabi_i2d>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065a8:	f7f9 fdde 	bl	8000168 <__aeabi_dsub>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	3430      	adds	r4, #48	; 0x30
 80065b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065ba:	f807 4b01 	strb.w	r4, [r7], #1
 80065be:	f7fa f9fd 	bl	80009bc <__aeabi_dcmplt>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d174      	bne.n	80066b0 <_dtoa_r+0x648>
 80065c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ca:	2000      	movs	r0, #0
 80065cc:	4911      	ldr	r1, [pc, #68]	; (8006614 <_dtoa_r+0x5ac>)
 80065ce:	f7f9 fdcb 	bl	8000168 <__aeabi_dsub>
 80065d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065d6:	f7fa f9f1 	bl	80009bc <__aeabi_dcmplt>
 80065da:	2800      	cmp	r0, #0
 80065dc:	f040 80b6 	bne.w	800674c <_dtoa_r+0x6e4>
 80065e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065e2:	429f      	cmp	r7, r3
 80065e4:	f43f af7a 	beq.w	80064dc <_dtoa_r+0x474>
 80065e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065ec:	2200      	movs	r2, #0
 80065ee:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <_dtoa_r+0x5b0>)
 80065f0:	f7f9 ff72 	bl	80004d8 <__aeabi_dmul>
 80065f4:	2200      	movs	r2, #0
 80065f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065fe:	4b06      	ldr	r3, [pc, #24]	; (8006618 <_dtoa_r+0x5b0>)
 8006600:	f7f9 ff6a 	bl	80004d8 <__aeabi_dmul>
 8006604:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006608:	e7c3      	b.n	8006592 <_dtoa_r+0x52a>
 800660a:	bf00      	nop
 800660c:	08008380 	.word	0x08008380
 8006610:	08008358 	.word	0x08008358
 8006614:	3ff00000 	.word	0x3ff00000
 8006618:	40240000 	.word	0x40240000
 800661c:	401c0000 	.word	0x401c0000
 8006620:	40140000 	.word	0x40140000
 8006624:	3fe00000 	.word	0x3fe00000
 8006628:	4630      	mov	r0, r6
 800662a:	4639      	mov	r1, r7
 800662c:	f7f9 ff54 	bl	80004d8 <__aeabi_dmul>
 8006630:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006632:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006636:	9c08      	ldr	r4, [sp, #32]
 8006638:	9314      	str	r3, [sp, #80]	; 0x50
 800663a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800663e:	f7fa f9fb 	bl	8000a38 <__aeabi_d2iz>
 8006642:	9015      	str	r0, [sp, #84]	; 0x54
 8006644:	f7f9 fede 	bl	8000404 <__aeabi_i2d>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006650:	f7f9 fd8a 	bl	8000168 <__aeabi_dsub>
 8006654:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006656:	4606      	mov	r6, r0
 8006658:	3330      	adds	r3, #48	; 0x30
 800665a:	f804 3b01 	strb.w	r3, [r4], #1
 800665e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006660:	460f      	mov	r7, r1
 8006662:	429c      	cmp	r4, r3
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	d124      	bne.n	80066b4 <_dtoa_r+0x64c>
 800666a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800666e:	4bb3      	ldr	r3, [pc, #716]	; (800693c <_dtoa_r+0x8d4>)
 8006670:	f7f9 fd7c 	bl	800016c <__adddf3>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f7fa f9bc 	bl	80009f8 <__aeabi_dcmpgt>
 8006680:	2800      	cmp	r0, #0
 8006682:	d162      	bne.n	800674a <_dtoa_r+0x6e2>
 8006684:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006688:	2000      	movs	r0, #0
 800668a:	49ac      	ldr	r1, [pc, #688]	; (800693c <_dtoa_r+0x8d4>)
 800668c:	f7f9 fd6c 	bl	8000168 <__aeabi_dsub>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4630      	mov	r0, r6
 8006696:	4639      	mov	r1, r7
 8006698:	f7fa f990 	bl	80009bc <__aeabi_dcmplt>
 800669c:	2800      	cmp	r0, #0
 800669e:	f43f af1d 	beq.w	80064dc <_dtoa_r+0x474>
 80066a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80066a4:	1e7b      	subs	r3, r7, #1
 80066a6:	9314      	str	r3, [sp, #80]	; 0x50
 80066a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80066ac:	2b30      	cmp	r3, #48	; 0x30
 80066ae:	d0f8      	beq.n	80066a2 <_dtoa_r+0x63a>
 80066b0:	46c1      	mov	r9, r8
 80066b2:	e03a      	b.n	800672a <_dtoa_r+0x6c2>
 80066b4:	4ba2      	ldr	r3, [pc, #648]	; (8006940 <_dtoa_r+0x8d8>)
 80066b6:	f7f9 ff0f 	bl	80004d8 <__aeabi_dmul>
 80066ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066be:	e7bc      	b.n	800663a <_dtoa_r+0x5d2>
 80066c0:	9f08      	ldr	r7, [sp, #32]
 80066c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066ca:	f7fa f82f 	bl	800072c <__aeabi_ddiv>
 80066ce:	f7fa f9b3 	bl	8000a38 <__aeabi_d2iz>
 80066d2:	4604      	mov	r4, r0
 80066d4:	f7f9 fe96 	bl	8000404 <__aeabi_i2d>
 80066d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066dc:	f7f9 fefc 	bl	80004d8 <__aeabi_dmul>
 80066e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80066e4:	460b      	mov	r3, r1
 80066e6:	4602      	mov	r2, r0
 80066e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066ec:	f7f9 fd3c 	bl	8000168 <__aeabi_dsub>
 80066f0:	f807 6b01 	strb.w	r6, [r7], #1
 80066f4:	9e08      	ldr	r6, [sp, #32]
 80066f6:	9b02      	ldr	r3, [sp, #8]
 80066f8:	1bbe      	subs	r6, r7, r6
 80066fa:	42b3      	cmp	r3, r6
 80066fc:	d13a      	bne.n	8006774 <_dtoa_r+0x70c>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	f7f9 fd33 	bl	800016c <__adddf3>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800670e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006712:	f7fa f971 	bl	80009f8 <__aeabi_dcmpgt>
 8006716:	bb58      	cbnz	r0, 8006770 <_dtoa_r+0x708>
 8006718:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800671c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006720:	f7fa f942 	bl	80009a8 <__aeabi_dcmpeq>
 8006724:	b108      	cbz	r0, 800672a <_dtoa_r+0x6c2>
 8006726:	07e1      	lsls	r1, r4, #31
 8006728:	d422      	bmi.n	8006770 <_dtoa_r+0x708>
 800672a:	4628      	mov	r0, r5
 800672c:	4651      	mov	r1, sl
 800672e:	f000 fd15 	bl	800715c <_Bfree>
 8006732:	2300      	movs	r3, #0
 8006734:	703b      	strb	r3, [r7, #0]
 8006736:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006738:	f109 0001 	add.w	r0, r9, #1
 800673c:	6018      	str	r0, [r3, #0]
 800673e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006740:	2b00      	cmp	r3, #0
 8006742:	f43f acdf 	beq.w	8006104 <_dtoa_r+0x9c>
 8006746:	601f      	str	r7, [r3, #0]
 8006748:	e4dc      	b.n	8006104 <_dtoa_r+0x9c>
 800674a:	4627      	mov	r7, r4
 800674c:	463b      	mov	r3, r7
 800674e:	461f      	mov	r7, r3
 8006750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006754:	2a39      	cmp	r2, #57	; 0x39
 8006756:	d107      	bne.n	8006768 <_dtoa_r+0x700>
 8006758:	9a08      	ldr	r2, [sp, #32]
 800675a:	429a      	cmp	r2, r3
 800675c:	d1f7      	bne.n	800674e <_dtoa_r+0x6e6>
 800675e:	2230      	movs	r2, #48	; 0x30
 8006760:	9908      	ldr	r1, [sp, #32]
 8006762:	f108 0801 	add.w	r8, r8, #1
 8006766:	700a      	strb	r2, [r1, #0]
 8006768:	781a      	ldrb	r2, [r3, #0]
 800676a:	3201      	adds	r2, #1
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	e79f      	b.n	80066b0 <_dtoa_r+0x648>
 8006770:	46c8      	mov	r8, r9
 8006772:	e7eb      	b.n	800674c <_dtoa_r+0x6e4>
 8006774:	2200      	movs	r2, #0
 8006776:	4b72      	ldr	r3, [pc, #456]	; (8006940 <_dtoa_r+0x8d8>)
 8006778:	f7f9 feae 	bl	80004d8 <__aeabi_dmul>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006784:	2200      	movs	r2, #0
 8006786:	2300      	movs	r3, #0
 8006788:	f7fa f90e 	bl	80009a8 <__aeabi_dcmpeq>
 800678c:	2800      	cmp	r0, #0
 800678e:	d098      	beq.n	80066c2 <_dtoa_r+0x65a>
 8006790:	e7cb      	b.n	800672a <_dtoa_r+0x6c2>
 8006792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006794:	2a00      	cmp	r2, #0
 8006796:	f000 80cd 	beq.w	8006934 <_dtoa_r+0x8cc>
 800679a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800679c:	2a01      	cmp	r2, #1
 800679e:	f300 80af 	bgt.w	8006900 <_dtoa_r+0x898>
 80067a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067a4:	2a00      	cmp	r2, #0
 80067a6:	f000 80a7 	beq.w	80068f8 <_dtoa_r+0x890>
 80067aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80067b0:	9f06      	ldr	r7, [sp, #24]
 80067b2:	9a06      	ldr	r2, [sp, #24]
 80067b4:	2101      	movs	r1, #1
 80067b6:	441a      	add	r2, r3
 80067b8:	9206      	str	r2, [sp, #24]
 80067ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067bc:	4628      	mov	r0, r5
 80067be:	441a      	add	r2, r3
 80067c0:	9209      	str	r2, [sp, #36]	; 0x24
 80067c2:	f000 fd85 	bl	80072d0 <__i2b>
 80067c6:	4606      	mov	r6, r0
 80067c8:	2f00      	cmp	r7, #0
 80067ca:	dd0c      	ble.n	80067e6 <_dtoa_r+0x77e>
 80067cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	dd09      	ble.n	80067e6 <_dtoa_r+0x77e>
 80067d2:	42bb      	cmp	r3, r7
 80067d4:	bfa8      	it	ge
 80067d6:	463b      	movge	r3, r7
 80067d8:	9a06      	ldr	r2, [sp, #24]
 80067da:	1aff      	subs	r7, r7, r3
 80067dc:	1ad2      	subs	r2, r2, r3
 80067de:	9206      	str	r2, [sp, #24]
 80067e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	9309      	str	r3, [sp, #36]	; 0x24
 80067e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e8:	b1f3      	cbz	r3, 8006828 <_dtoa_r+0x7c0>
 80067ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80a9 	beq.w	8006944 <_dtoa_r+0x8dc>
 80067f2:	2c00      	cmp	r4, #0
 80067f4:	dd10      	ble.n	8006818 <_dtoa_r+0x7b0>
 80067f6:	4631      	mov	r1, r6
 80067f8:	4622      	mov	r2, r4
 80067fa:	4628      	mov	r0, r5
 80067fc:	f000 fe22 	bl	8007444 <__pow5mult>
 8006800:	4652      	mov	r2, sl
 8006802:	4601      	mov	r1, r0
 8006804:	4606      	mov	r6, r0
 8006806:	4628      	mov	r0, r5
 8006808:	f000 fd78 	bl	80072fc <__multiply>
 800680c:	4680      	mov	r8, r0
 800680e:	4651      	mov	r1, sl
 8006810:	4628      	mov	r0, r5
 8006812:	f000 fca3 	bl	800715c <_Bfree>
 8006816:	46c2      	mov	sl, r8
 8006818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800681a:	1b1a      	subs	r2, r3, r4
 800681c:	d004      	beq.n	8006828 <_dtoa_r+0x7c0>
 800681e:	4651      	mov	r1, sl
 8006820:	4628      	mov	r0, r5
 8006822:	f000 fe0f 	bl	8007444 <__pow5mult>
 8006826:	4682      	mov	sl, r0
 8006828:	2101      	movs	r1, #1
 800682a:	4628      	mov	r0, r5
 800682c:	f000 fd50 	bl	80072d0 <__i2b>
 8006830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006832:	4604      	mov	r4, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	f340 8087 	ble.w	8006948 <_dtoa_r+0x8e0>
 800683a:	461a      	mov	r2, r3
 800683c:	4601      	mov	r1, r0
 800683e:	4628      	mov	r0, r5
 8006840:	f000 fe00 	bl	8007444 <__pow5mult>
 8006844:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006846:	4604      	mov	r4, r0
 8006848:	2b01      	cmp	r3, #1
 800684a:	f340 8080 	ble.w	800694e <_dtoa_r+0x8e6>
 800684e:	f04f 0800 	mov.w	r8, #0
 8006852:	6923      	ldr	r3, [r4, #16]
 8006854:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006858:	6918      	ldr	r0, [r3, #16]
 800685a:	f000 fceb 	bl	8007234 <__hi0bits>
 800685e:	f1c0 0020 	rsb	r0, r0, #32
 8006862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006864:	4418      	add	r0, r3
 8006866:	f010 001f 	ands.w	r0, r0, #31
 800686a:	f000 8092 	beq.w	8006992 <_dtoa_r+0x92a>
 800686e:	f1c0 0320 	rsb	r3, r0, #32
 8006872:	2b04      	cmp	r3, #4
 8006874:	f340 808a 	ble.w	800698c <_dtoa_r+0x924>
 8006878:	f1c0 001c 	rsb	r0, r0, #28
 800687c:	9b06      	ldr	r3, [sp, #24]
 800687e:	4407      	add	r7, r0
 8006880:	4403      	add	r3, r0
 8006882:	9306      	str	r3, [sp, #24]
 8006884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006886:	4403      	add	r3, r0
 8006888:	9309      	str	r3, [sp, #36]	; 0x24
 800688a:	9b06      	ldr	r3, [sp, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	dd05      	ble.n	800689c <_dtoa_r+0x834>
 8006890:	4651      	mov	r1, sl
 8006892:	461a      	mov	r2, r3
 8006894:	4628      	mov	r0, r5
 8006896:	f000 fe2f 	bl	80074f8 <__lshift>
 800689a:	4682      	mov	sl, r0
 800689c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	dd05      	ble.n	80068ae <_dtoa_r+0x846>
 80068a2:	4621      	mov	r1, r4
 80068a4:	461a      	mov	r2, r3
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 fe26 	bl	80074f8 <__lshift>
 80068ac:	4604      	mov	r4, r0
 80068ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d070      	beq.n	8006996 <_dtoa_r+0x92e>
 80068b4:	4621      	mov	r1, r4
 80068b6:	4650      	mov	r0, sl
 80068b8:	f000 fe8a 	bl	80075d0 <__mcmp>
 80068bc:	2800      	cmp	r0, #0
 80068be:	da6a      	bge.n	8006996 <_dtoa_r+0x92e>
 80068c0:	2300      	movs	r3, #0
 80068c2:	4651      	mov	r1, sl
 80068c4:	220a      	movs	r2, #10
 80068c6:	4628      	mov	r0, r5
 80068c8:	f000 fc6a 	bl	80071a0 <__multadd>
 80068cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ce:	4682      	mov	sl, r0
 80068d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8193 	beq.w	8006c00 <_dtoa_r+0xb98>
 80068da:	4631      	mov	r1, r6
 80068dc:	2300      	movs	r3, #0
 80068de:	220a      	movs	r2, #10
 80068e0:	4628      	mov	r0, r5
 80068e2:	f000 fc5d 	bl	80071a0 <__multadd>
 80068e6:	f1bb 0f00 	cmp.w	fp, #0
 80068ea:	4606      	mov	r6, r0
 80068ec:	f300 8093 	bgt.w	8006a16 <_dtoa_r+0x9ae>
 80068f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	dc57      	bgt.n	80069a6 <_dtoa_r+0x93e>
 80068f6:	e08e      	b.n	8006a16 <_dtoa_r+0x9ae>
 80068f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80068fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068fe:	e756      	b.n	80067ae <_dtoa_r+0x746>
 8006900:	9b02      	ldr	r3, [sp, #8]
 8006902:	1e5c      	subs	r4, r3, #1
 8006904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006906:	42a3      	cmp	r3, r4
 8006908:	bfb7      	itett	lt
 800690a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800690c:	1b1c      	subge	r4, r3, r4
 800690e:	1ae2      	sublt	r2, r4, r3
 8006910:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006912:	bfbe      	ittt	lt
 8006914:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006916:	189b      	addlt	r3, r3, r2
 8006918:	930e      	strlt	r3, [sp, #56]	; 0x38
 800691a:	9b02      	ldr	r3, [sp, #8]
 800691c:	bfb8      	it	lt
 800691e:	2400      	movlt	r4, #0
 8006920:	2b00      	cmp	r3, #0
 8006922:	bfbb      	ittet	lt
 8006924:	9b06      	ldrlt	r3, [sp, #24]
 8006926:	9a02      	ldrlt	r2, [sp, #8]
 8006928:	9f06      	ldrge	r7, [sp, #24]
 800692a:	1a9f      	sublt	r7, r3, r2
 800692c:	bfac      	ite	ge
 800692e:	9b02      	ldrge	r3, [sp, #8]
 8006930:	2300      	movlt	r3, #0
 8006932:	e73e      	b.n	80067b2 <_dtoa_r+0x74a>
 8006934:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006936:	9f06      	ldr	r7, [sp, #24]
 8006938:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800693a:	e745      	b.n	80067c8 <_dtoa_r+0x760>
 800693c:	3fe00000 	.word	0x3fe00000
 8006940:	40240000 	.word	0x40240000
 8006944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006946:	e76a      	b.n	800681e <_dtoa_r+0x7b6>
 8006948:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800694a:	2b01      	cmp	r3, #1
 800694c:	dc19      	bgt.n	8006982 <_dtoa_r+0x91a>
 800694e:	9b04      	ldr	r3, [sp, #16]
 8006950:	b9bb      	cbnz	r3, 8006982 <_dtoa_r+0x91a>
 8006952:	9b05      	ldr	r3, [sp, #20]
 8006954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006958:	b99b      	cbnz	r3, 8006982 <_dtoa_r+0x91a>
 800695a:	9b05      	ldr	r3, [sp, #20]
 800695c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006960:	0d1b      	lsrs	r3, r3, #20
 8006962:	051b      	lsls	r3, r3, #20
 8006964:	b183      	cbz	r3, 8006988 <_dtoa_r+0x920>
 8006966:	f04f 0801 	mov.w	r8, #1
 800696a:	9b06      	ldr	r3, [sp, #24]
 800696c:	3301      	adds	r3, #1
 800696e:	9306      	str	r3, [sp, #24]
 8006970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006972:	3301      	adds	r3, #1
 8006974:	9309      	str	r3, [sp, #36]	; 0x24
 8006976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006978:	2b00      	cmp	r3, #0
 800697a:	f47f af6a 	bne.w	8006852 <_dtoa_r+0x7ea>
 800697e:	2001      	movs	r0, #1
 8006980:	e76f      	b.n	8006862 <_dtoa_r+0x7fa>
 8006982:	f04f 0800 	mov.w	r8, #0
 8006986:	e7f6      	b.n	8006976 <_dtoa_r+0x90e>
 8006988:	4698      	mov	r8, r3
 800698a:	e7f4      	b.n	8006976 <_dtoa_r+0x90e>
 800698c:	f43f af7d 	beq.w	800688a <_dtoa_r+0x822>
 8006990:	4618      	mov	r0, r3
 8006992:	301c      	adds	r0, #28
 8006994:	e772      	b.n	800687c <_dtoa_r+0x814>
 8006996:	9b02      	ldr	r3, [sp, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	dc36      	bgt.n	8006a0a <_dtoa_r+0x9a2>
 800699c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800699e:	2b02      	cmp	r3, #2
 80069a0:	dd33      	ble.n	8006a0a <_dtoa_r+0x9a2>
 80069a2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80069a6:	f1bb 0f00 	cmp.w	fp, #0
 80069aa:	d10d      	bne.n	80069c8 <_dtoa_r+0x960>
 80069ac:	4621      	mov	r1, r4
 80069ae:	465b      	mov	r3, fp
 80069b0:	2205      	movs	r2, #5
 80069b2:	4628      	mov	r0, r5
 80069b4:	f000 fbf4 	bl	80071a0 <__multadd>
 80069b8:	4601      	mov	r1, r0
 80069ba:	4604      	mov	r4, r0
 80069bc:	4650      	mov	r0, sl
 80069be:	f000 fe07 	bl	80075d0 <__mcmp>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	f73f adb6 	bgt.w	8006534 <_dtoa_r+0x4cc>
 80069c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069ca:	9f08      	ldr	r7, [sp, #32]
 80069cc:	ea6f 0903 	mvn.w	r9, r3
 80069d0:	f04f 0800 	mov.w	r8, #0
 80069d4:	4621      	mov	r1, r4
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 fbc0 	bl	800715c <_Bfree>
 80069dc:	2e00      	cmp	r6, #0
 80069de:	f43f aea4 	beq.w	800672a <_dtoa_r+0x6c2>
 80069e2:	f1b8 0f00 	cmp.w	r8, #0
 80069e6:	d005      	beq.n	80069f4 <_dtoa_r+0x98c>
 80069e8:	45b0      	cmp	r8, r6
 80069ea:	d003      	beq.n	80069f4 <_dtoa_r+0x98c>
 80069ec:	4641      	mov	r1, r8
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 fbb4 	bl	800715c <_Bfree>
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	f000 fbb0 	bl	800715c <_Bfree>
 80069fc:	e695      	b.n	800672a <_dtoa_r+0x6c2>
 80069fe:	2400      	movs	r4, #0
 8006a00:	4626      	mov	r6, r4
 8006a02:	e7e1      	b.n	80069c8 <_dtoa_r+0x960>
 8006a04:	46c1      	mov	r9, r8
 8006a06:	4626      	mov	r6, r4
 8006a08:	e594      	b.n	8006534 <_dtoa_r+0x4cc>
 8006a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a0c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 80fc 	beq.w	8006c0e <_dtoa_r+0xba6>
 8006a16:	2f00      	cmp	r7, #0
 8006a18:	dd05      	ble.n	8006a26 <_dtoa_r+0x9be>
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	463a      	mov	r2, r7
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f000 fd6a 	bl	80074f8 <__lshift>
 8006a24:	4606      	mov	r6, r0
 8006a26:	f1b8 0f00 	cmp.w	r8, #0
 8006a2a:	d05c      	beq.n	8006ae6 <_dtoa_r+0xa7e>
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	6871      	ldr	r1, [r6, #4]
 8006a30:	f000 fb54 	bl	80070dc <_Balloc>
 8006a34:	4607      	mov	r7, r0
 8006a36:	b928      	cbnz	r0, 8006a44 <_dtoa_r+0x9dc>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a3e:	4b7e      	ldr	r3, [pc, #504]	; (8006c38 <_dtoa_r+0xbd0>)
 8006a40:	f7ff bb26 	b.w	8006090 <_dtoa_r+0x28>
 8006a44:	6932      	ldr	r2, [r6, #16]
 8006a46:	f106 010c 	add.w	r1, r6, #12
 8006a4a:	3202      	adds	r2, #2
 8006a4c:	0092      	lsls	r2, r2, #2
 8006a4e:	300c      	adds	r0, #12
 8006a50:	f000 fb2a 	bl	80070a8 <memcpy>
 8006a54:	2201      	movs	r2, #1
 8006a56:	4639      	mov	r1, r7
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 fd4d 	bl	80074f8 <__lshift>
 8006a5e:	46b0      	mov	r8, r6
 8006a60:	4606      	mov	r6, r0
 8006a62:	9b08      	ldr	r3, [sp, #32]
 8006a64:	3301      	adds	r3, #1
 8006a66:	9302      	str	r3, [sp, #8]
 8006a68:	9b08      	ldr	r3, [sp, #32]
 8006a6a:	445b      	add	r3, fp
 8006a6c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a6e:	9b04      	ldr	r3, [sp, #16]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	9309      	str	r3, [sp, #36]	; 0x24
 8006a76:	9b02      	ldr	r3, [sp, #8]
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4650      	mov	r0, sl
 8006a7c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006a80:	f7ff fa62 	bl	8005f48 <quorem>
 8006a84:	4603      	mov	r3, r0
 8006a86:	4641      	mov	r1, r8
 8006a88:	3330      	adds	r3, #48	; 0x30
 8006a8a:	9004      	str	r0, [sp, #16]
 8006a8c:	4650      	mov	r0, sl
 8006a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a90:	f000 fd9e 	bl	80075d0 <__mcmp>
 8006a94:	4632      	mov	r2, r6
 8006a96:	9006      	str	r0, [sp, #24]
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f000 fdb4 	bl	8007608 <__mdiff>
 8006aa0:	68c2      	ldr	r2, [r0, #12]
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aa6:	bb02      	cbnz	r2, 8006aea <_dtoa_r+0xa82>
 8006aa8:	4601      	mov	r1, r0
 8006aaa:	4650      	mov	r0, sl
 8006aac:	f000 fd90 	bl	80075d0 <__mcmp>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006abc:	f000 fb4e 	bl	800715c <_Bfree>
 8006ac0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ac4:	9f02      	ldr	r7, [sp, #8]
 8006ac6:	ea43 0102 	orr.w	r1, r3, r2
 8006aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006acc:	430b      	orrs	r3, r1
 8006ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ad0:	d10d      	bne.n	8006aee <_dtoa_r+0xa86>
 8006ad2:	2b39      	cmp	r3, #57	; 0x39
 8006ad4:	d027      	beq.n	8006b26 <_dtoa_r+0xabe>
 8006ad6:	9a06      	ldr	r2, [sp, #24]
 8006ad8:	2a00      	cmp	r2, #0
 8006ada:	dd01      	ble.n	8006ae0 <_dtoa_r+0xa78>
 8006adc:	9b04      	ldr	r3, [sp, #16]
 8006ade:	3331      	adds	r3, #49	; 0x31
 8006ae0:	f88b 3000 	strb.w	r3, [fp]
 8006ae4:	e776      	b.n	80069d4 <_dtoa_r+0x96c>
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	e7b9      	b.n	8006a5e <_dtoa_r+0x9f6>
 8006aea:	2201      	movs	r2, #1
 8006aec:	e7e2      	b.n	8006ab4 <_dtoa_r+0xa4c>
 8006aee:	9906      	ldr	r1, [sp, #24]
 8006af0:	2900      	cmp	r1, #0
 8006af2:	db04      	blt.n	8006afe <_dtoa_r+0xa96>
 8006af4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006af6:	4301      	orrs	r1, r0
 8006af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006afa:	4301      	orrs	r1, r0
 8006afc:	d120      	bne.n	8006b40 <_dtoa_r+0xad8>
 8006afe:	2a00      	cmp	r2, #0
 8006b00:	ddee      	ble.n	8006ae0 <_dtoa_r+0xa78>
 8006b02:	4651      	mov	r1, sl
 8006b04:	2201      	movs	r2, #1
 8006b06:	4628      	mov	r0, r5
 8006b08:	9302      	str	r3, [sp, #8]
 8006b0a:	f000 fcf5 	bl	80074f8 <__lshift>
 8006b0e:	4621      	mov	r1, r4
 8006b10:	4682      	mov	sl, r0
 8006b12:	f000 fd5d 	bl	80075d0 <__mcmp>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	9b02      	ldr	r3, [sp, #8]
 8006b1a:	dc02      	bgt.n	8006b22 <_dtoa_r+0xaba>
 8006b1c:	d1e0      	bne.n	8006ae0 <_dtoa_r+0xa78>
 8006b1e:	07da      	lsls	r2, r3, #31
 8006b20:	d5de      	bpl.n	8006ae0 <_dtoa_r+0xa78>
 8006b22:	2b39      	cmp	r3, #57	; 0x39
 8006b24:	d1da      	bne.n	8006adc <_dtoa_r+0xa74>
 8006b26:	2339      	movs	r3, #57	; 0x39
 8006b28:	f88b 3000 	strb.w	r3, [fp]
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	461f      	mov	r7, r3
 8006b30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	2a39      	cmp	r2, #57	; 0x39
 8006b38:	d050      	beq.n	8006bdc <_dtoa_r+0xb74>
 8006b3a:	3201      	adds	r2, #1
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	e749      	b.n	80069d4 <_dtoa_r+0x96c>
 8006b40:	2a00      	cmp	r2, #0
 8006b42:	dd03      	ble.n	8006b4c <_dtoa_r+0xae4>
 8006b44:	2b39      	cmp	r3, #57	; 0x39
 8006b46:	d0ee      	beq.n	8006b26 <_dtoa_r+0xabe>
 8006b48:	3301      	adds	r3, #1
 8006b4a:	e7c9      	b.n	8006ae0 <_dtoa_r+0xa78>
 8006b4c:	9a02      	ldr	r2, [sp, #8]
 8006b4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b54:	428a      	cmp	r2, r1
 8006b56:	d02a      	beq.n	8006bae <_dtoa_r+0xb46>
 8006b58:	4651      	mov	r1, sl
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	220a      	movs	r2, #10
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 fb1e 	bl	80071a0 <__multadd>
 8006b64:	45b0      	cmp	r8, r6
 8006b66:	4682      	mov	sl, r0
 8006b68:	f04f 0300 	mov.w	r3, #0
 8006b6c:	f04f 020a 	mov.w	r2, #10
 8006b70:	4641      	mov	r1, r8
 8006b72:	4628      	mov	r0, r5
 8006b74:	d107      	bne.n	8006b86 <_dtoa_r+0xb1e>
 8006b76:	f000 fb13 	bl	80071a0 <__multadd>
 8006b7a:	4680      	mov	r8, r0
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	3301      	adds	r3, #1
 8006b82:	9302      	str	r3, [sp, #8]
 8006b84:	e777      	b.n	8006a76 <_dtoa_r+0xa0e>
 8006b86:	f000 fb0b 	bl	80071a0 <__multadd>
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	4680      	mov	r8, r0
 8006b8e:	2300      	movs	r3, #0
 8006b90:	220a      	movs	r2, #10
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 fb04 	bl	80071a0 <__multadd>
 8006b98:	4606      	mov	r6, r0
 8006b9a:	e7f0      	b.n	8006b7e <_dtoa_r+0xb16>
 8006b9c:	f1bb 0f00 	cmp.w	fp, #0
 8006ba0:	bfcc      	ite	gt
 8006ba2:	465f      	movgt	r7, fp
 8006ba4:	2701      	movle	r7, #1
 8006ba6:	f04f 0800 	mov.w	r8, #0
 8006baa:	9a08      	ldr	r2, [sp, #32]
 8006bac:	4417      	add	r7, r2
 8006bae:	4651      	mov	r1, sl
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	9302      	str	r3, [sp, #8]
 8006bb6:	f000 fc9f 	bl	80074f8 <__lshift>
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4682      	mov	sl, r0
 8006bbe:	f000 fd07 	bl	80075d0 <__mcmp>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	dcb2      	bgt.n	8006b2c <_dtoa_r+0xac4>
 8006bc6:	d102      	bne.n	8006bce <_dtoa_r+0xb66>
 8006bc8:	9b02      	ldr	r3, [sp, #8]
 8006bca:	07db      	lsls	r3, r3, #31
 8006bcc:	d4ae      	bmi.n	8006b2c <_dtoa_r+0xac4>
 8006bce:	463b      	mov	r3, r7
 8006bd0:	461f      	mov	r7, r3
 8006bd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bd6:	2a30      	cmp	r2, #48	; 0x30
 8006bd8:	d0fa      	beq.n	8006bd0 <_dtoa_r+0xb68>
 8006bda:	e6fb      	b.n	80069d4 <_dtoa_r+0x96c>
 8006bdc:	9a08      	ldr	r2, [sp, #32]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d1a5      	bne.n	8006b2e <_dtoa_r+0xac6>
 8006be2:	2331      	movs	r3, #49	; 0x31
 8006be4:	f109 0901 	add.w	r9, r9, #1
 8006be8:	7013      	strb	r3, [r2, #0]
 8006bea:	e6f3      	b.n	80069d4 <_dtoa_r+0x96c>
 8006bec:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <_dtoa_r+0xbd4>)
 8006bee:	f7ff baa7 	b.w	8006140 <_dtoa_r+0xd8>
 8006bf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f47f aa80 	bne.w	80060fa <_dtoa_r+0x92>
 8006bfa:	4b11      	ldr	r3, [pc, #68]	; (8006c40 <_dtoa_r+0xbd8>)
 8006bfc:	f7ff baa0 	b.w	8006140 <_dtoa_r+0xd8>
 8006c00:	f1bb 0f00 	cmp.w	fp, #0
 8006c04:	dc03      	bgt.n	8006c0e <_dtoa_r+0xba6>
 8006c06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	f73f aecc 	bgt.w	80069a6 <_dtoa_r+0x93e>
 8006c0e:	9f08      	ldr	r7, [sp, #32]
 8006c10:	4621      	mov	r1, r4
 8006c12:	4650      	mov	r0, sl
 8006c14:	f7ff f998 	bl	8005f48 <quorem>
 8006c18:	9a08      	ldr	r2, [sp, #32]
 8006c1a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006c1e:	f807 3b01 	strb.w	r3, [r7], #1
 8006c22:	1aba      	subs	r2, r7, r2
 8006c24:	4593      	cmp	fp, r2
 8006c26:	ddb9      	ble.n	8006b9c <_dtoa_r+0xb34>
 8006c28:	4651      	mov	r1, sl
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	220a      	movs	r2, #10
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f000 fab6 	bl	80071a0 <__multadd>
 8006c34:	4682      	mov	sl, r0
 8006c36:	e7eb      	b.n	8006c10 <_dtoa_r+0xba8>
 8006c38:	08008287 	.word	0x08008287
 8006c3c:	080081e0 	.word	0x080081e0
 8006c40:	08008204 	.word	0x08008204

08006c44 <__sflush_r>:
 8006c44:	898a      	ldrh	r2, [r1, #12]
 8006c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	0710      	lsls	r0, r2, #28
 8006c4e:	460c      	mov	r4, r1
 8006c50:	d458      	bmi.n	8006d04 <__sflush_r+0xc0>
 8006c52:	684b      	ldr	r3, [r1, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	dc05      	bgt.n	8006c64 <__sflush_r+0x20>
 8006c58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	dc02      	bgt.n	8006c64 <__sflush_r+0x20>
 8006c5e:	2000      	movs	r0, #0
 8006c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c66:	2e00      	cmp	r6, #0
 8006c68:	d0f9      	beq.n	8006c5e <__sflush_r+0x1a>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c70:	682f      	ldr	r7, [r5, #0]
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	d032      	beq.n	8006cdc <__sflush_r+0x98>
 8006c76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	075a      	lsls	r2, r3, #29
 8006c7c:	d505      	bpl.n	8006c8a <__sflush_r+0x46>
 8006c7e:	6863      	ldr	r3, [r4, #4]
 8006c80:	1ac0      	subs	r0, r0, r3
 8006c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c84:	b10b      	cbz	r3, 8006c8a <__sflush_r+0x46>
 8006c86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c88:	1ac0      	subs	r0, r0, r3
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c90:	4628      	mov	r0, r5
 8006c92:	6a21      	ldr	r1, [r4, #32]
 8006c94:	47b0      	blx	r6
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	d106      	bne.n	8006caa <__sflush_r+0x66>
 8006c9c:	6829      	ldr	r1, [r5, #0]
 8006c9e:	291d      	cmp	r1, #29
 8006ca0:	d82c      	bhi.n	8006cfc <__sflush_r+0xb8>
 8006ca2:	4a2a      	ldr	r2, [pc, #168]	; (8006d4c <__sflush_r+0x108>)
 8006ca4:	40ca      	lsrs	r2, r1
 8006ca6:	07d6      	lsls	r6, r2, #31
 8006ca8:	d528      	bpl.n	8006cfc <__sflush_r+0xb8>
 8006caa:	2200      	movs	r2, #0
 8006cac:	6062      	str	r2, [r4, #4]
 8006cae:	6922      	ldr	r2, [r4, #16]
 8006cb0:	04d9      	lsls	r1, r3, #19
 8006cb2:	6022      	str	r2, [r4, #0]
 8006cb4:	d504      	bpl.n	8006cc0 <__sflush_r+0x7c>
 8006cb6:	1c42      	adds	r2, r0, #1
 8006cb8:	d101      	bne.n	8006cbe <__sflush_r+0x7a>
 8006cba:	682b      	ldr	r3, [r5, #0]
 8006cbc:	b903      	cbnz	r3, 8006cc0 <__sflush_r+0x7c>
 8006cbe:	6560      	str	r0, [r4, #84]	; 0x54
 8006cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cc2:	602f      	str	r7, [r5, #0]
 8006cc4:	2900      	cmp	r1, #0
 8006cc6:	d0ca      	beq.n	8006c5e <__sflush_r+0x1a>
 8006cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ccc:	4299      	cmp	r1, r3
 8006cce:	d002      	beq.n	8006cd6 <__sflush_r+0x92>
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	f7fe faa1 	bl	8005218 <_free_r>
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	6360      	str	r0, [r4, #52]	; 0x34
 8006cda:	e7c1      	b.n	8006c60 <__sflush_r+0x1c>
 8006cdc:	6a21      	ldr	r1, [r4, #32]
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b0      	blx	r6
 8006ce4:	1c41      	adds	r1, r0, #1
 8006ce6:	d1c7      	bne.n	8006c78 <__sflush_r+0x34>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0c4      	beq.n	8006c78 <__sflush_r+0x34>
 8006cee:	2b1d      	cmp	r3, #29
 8006cf0:	d001      	beq.n	8006cf6 <__sflush_r+0xb2>
 8006cf2:	2b16      	cmp	r3, #22
 8006cf4:	d101      	bne.n	8006cfa <__sflush_r+0xb6>
 8006cf6:	602f      	str	r7, [r5, #0]
 8006cf8:	e7b1      	b.n	8006c5e <__sflush_r+0x1a>
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d00:	81a3      	strh	r3, [r4, #12]
 8006d02:	e7ad      	b.n	8006c60 <__sflush_r+0x1c>
 8006d04:	690f      	ldr	r7, [r1, #16]
 8006d06:	2f00      	cmp	r7, #0
 8006d08:	d0a9      	beq.n	8006c5e <__sflush_r+0x1a>
 8006d0a:	0793      	lsls	r3, r2, #30
 8006d0c:	bf18      	it	ne
 8006d0e:	2300      	movne	r3, #0
 8006d10:	680e      	ldr	r6, [r1, #0]
 8006d12:	bf08      	it	eq
 8006d14:	694b      	ldreq	r3, [r1, #20]
 8006d16:	eba6 0807 	sub.w	r8, r6, r7
 8006d1a:	600f      	str	r7, [r1, #0]
 8006d1c:	608b      	str	r3, [r1, #8]
 8006d1e:	f1b8 0f00 	cmp.w	r8, #0
 8006d22:	dd9c      	ble.n	8006c5e <__sflush_r+0x1a>
 8006d24:	4643      	mov	r3, r8
 8006d26:	463a      	mov	r2, r7
 8006d28:	4628      	mov	r0, r5
 8006d2a:	6a21      	ldr	r1, [r4, #32]
 8006d2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d2e:	47b0      	blx	r6
 8006d30:	2800      	cmp	r0, #0
 8006d32:	dc06      	bgt.n	8006d42 <__sflush_r+0xfe>
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d3e:	81a3      	strh	r3, [r4, #12]
 8006d40:	e78e      	b.n	8006c60 <__sflush_r+0x1c>
 8006d42:	4407      	add	r7, r0
 8006d44:	eba8 0800 	sub.w	r8, r8, r0
 8006d48:	e7e9      	b.n	8006d1e <__sflush_r+0xda>
 8006d4a:	bf00      	nop
 8006d4c:	20400001 	.word	0x20400001

08006d50 <_fflush_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	690b      	ldr	r3, [r1, #16]
 8006d54:	4605      	mov	r5, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	b913      	cbnz	r3, 8006d60 <_fflush_r+0x10>
 8006d5a:	2500      	movs	r5, #0
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	b118      	cbz	r0, 8006d6a <_fflush_r+0x1a>
 8006d62:	6983      	ldr	r3, [r0, #24]
 8006d64:	b90b      	cbnz	r3, 8006d6a <_fflush_r+0x1a>
 8006d66:	f000 f887 	bl	8006e78 <__sinit>
 8006d6a:	4b14      	ldr	r3, [pc, #80]	; (8006dbc <_fflush_r+0x6c>)
 8006d6c:	429c      	cmp	r4, r3
 8006d6e:	d11b      	bne.n	8006da8 <_fflush_r+0x58>
 8006d70:	686c      	ldr	r4, [r5, #4]
 8006d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0ef      	beq.n	8006d5a <_fflush_r+0xa>
 8006d7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d7c:	07d0      	lsls	r0, r2, #31
 8006d7e:	d404      	bmi.n	8006d8a <_fflush_r+0x3a>
 8006d80:	0599      	lsls	r1, r3, #22
 8006d82:	d402      	bmi.n	8006d8a <_fflush_r+0x3a>
 8006d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d86:	f000 f91a 	bl	8006fbe <__retarget_lock_acquire_recursive>
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	f7ff ff59 	bl	8006c44 <__sflush_r>
 8006d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d94:	4605      	mov	r5, r0
 8006d96:	07da      	lsls	r2, r3, #31
 8006d98:	d4e0      	bmi.n	8006d5c <_fflush_r+0xc>
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	059b      	lsls	r3, r3, #22
 8006d9e:	d4dd      	bmi.n	8006d5c <_fflush_r+0xc>
 8006da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006da2:	f000 f90d 	bl	8006fc0 <__retarget_lock_release_recursive>
 8006da6:	e7d9      	b.n	8006d5c <_fflush_r+0xc>
 8006da8:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <_fflush_r+0x70>)
 8006daa:	429c      	cmp	r4, r3
 8006dac:	d101      	bne.n	8006db2 <_fflush_r+0x62>
 8006dae:	68ac      	ldr	r4, [r5, #8]
 8006db0:	e7df      	b.n	8006d72 <_fflush_r+0x22>
 8006db2:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <_fflush_r+0x74>)
 8006db4:	429c      	cmp	r4, r3
 8006db6:	bf08      	it	eq
 8006db8:	68ec      	ldreq	r4, [r5, #12]
 8006dba:	e7da      	b.n	8006d72 <_fflush_r+0x22>
 8006dbc:	080082b8 	.word	0x080082b8
 8006dc0:	080082d8 	.word	0x080082d8
 8006dc4:	08008298 	.word	0x08008298

08006dc8 <std>:
 8006dc8:	2300      	movs	r3, #0
 8006dca:	b510      	push	{r4, lr}
 8006dcc:	4604      	mov	r4, r0
 8006dce:	e9c0 3300 	strd	r3, r3, [r0]
 8006dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dd6:	6083      	str	r3, [r0, #8]
 8006dd8:	8181      	strh	r1, [r0, #12]
 8006dda:	6643      	str	r3, [r0, #100]	; 0x64
 8006ddc:	81c2      	strh	r2, [r0, #14]
 8006dde:	6183      	str	r3, [r0, #24]
 8006de0:	4619      	mov	r1, r3
 8006de2:	2208      	movs	r2, #8
 8006de4:	305c      	adds	r0, #92	; 0x5c
 8006de6:	f7fe fa0f 	bl	8005208 <memset>
 8006dea:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <std+0x38>)
 8006dec:	6224      	str	r4, [r4, #32]
 8006dee:	6263      	str	r3, [r4, #36]	; 0x24
 8006df0:	4b04      	ldr	r3, [pc, #16]	; (8006e04 <std+0x3c>)
 8006df2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006df4:	4b04      	ldr	r3, [pc, #16]	; (8006e08 <std+0x40>)
 8006df6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <std+0x44>)
 8006dfa:	6323      	str	r3, [r4, #48]	; 0x30
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	bf00      	nop
 8006e00:	08007d65 	.word	0x08007d65
 8006e04:	08007d87 	.word	0x08007d87
 8006e08:	08007dbf 	.word	0x08007dbf
 8006e0c:	08007de3 	.word	0x08007de3

08006e10 <_cleanup_r>:
 8006e10:	4901      	ldr	r1, [pc, #4]	; (8006e18 <_cleanup_r+0x8>)
 8006e12:	f000 b8af 	b.w	8006f74 <_fwalk_reent>
 8006e16:	bf00      	nop
 8006e18:	08006d51 	.word	0x08006d51

08006e1c <__sfmoreglue>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	2568      	movs	r5, #104	; 0x68
 8006e20:	1e4a      	subs	r2, r1, #1
 8006e22:	4355      	muls	r5, r2
 8006e24:	460e      	mov	r6, r1
 8006e26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e2a:	f7fe fa41 	bl	80052b0 <_malloc_r>
 8006e2e:	4604      	mov	r4, r0
 8006e30:	b140      	cbz	r0, 8006e44 <__sfmoreglue+0x28>
 8006e32:	2100      	movs	r1, #0
 8006e34:	e9c0 1600 	strd	r1, r6, [r0]
 8006e38:	300c      	adds	r0, #12
 8006e3a:	60a0      	str	r0, [r4, #8]
 8006e3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e40:	f7fe f9e2 	bl	8005208 <memset>
 8006e44:	4620      	mov	r0, r4
 8006e46:	bd70      	pop	{r4, r5, r6, pc}

08006e48 <__sfp_lock_acquire>:
 8006e48:	4801      	ldr	r0, [pc, #4]	; (8006e50 <__sfp_lock_acquire+0x8>)
 8006e4a:	f000 b8b8 	b.w	8006fbe <__retarget_lock_acquire_recursive>
 8006e4e:	bf00      	nop
 8006e50:	20000368 	.word	0x20000368

08006e54 <__sfp_lock_release>:
 8006e54:	4801      	ldr	r0, [pc, #4]	; (8006e5c <__sfp_lock_release+0x8>)
 8006e56:	f000 b8b3 	b.w	8006fc0 <__retarget_lock_release_recursive>
 8006e5a:	bf00      	nop
 8006e5c:	20000368 	.word	0x20000368

08006e60 <__sinit_lock_acquire>:
 8006e60:	4801      	ldr	r0, [pc, #4]	; (8006e68 <__sinit_lock_acquire+0x8>)
 8006e62:	f000 b8ac 	b.w	8006fbe <__retarget_lock_acquire_recursive>
 8006e66:	bf00      	nop
 8006e68:	20000363 	.word	0x20000363

08006e6c <__sinit_lock_release>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	; (8006e74 <__sinit_lock_release+0x8>)
 8006e6e:	f000 b8a7 	b.w	8006fc0 <__retarget_lock_release_recursive>
 8006e72:	bf00      	nop
 8006e74:	20000363 	.word	0x20000363

08006e78 <__sinit>:
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	f7ff fff0 	bl	8006e60 <__sinit_lock_acquire>
 8006e80:	69a3      	ldr	r3, [r4, #24]
 8006e82:	b11b      	cbz	r3, 8006e8c <__sinit+0x14>
 8006e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e88:	f7ff bff0 	b.w	8006e6c <__sinit_lock_release>
 8006e8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e90:	6523      	str	r3, [r4, #80]	; 0x50
 8006e92:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <__sinit+0x68>)
 8006e94:	4a13      	ldr	r2, [pc, #76]	; (8006ee4 <__sinit+0x6c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e9a:	42a3      	cmp	r3, r4
 8006e9c:	bf08      	it	eq
 8006e9e:	2301      	moveq	r3, #1
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	bf08      	it	eq
 8006ea4:	61a3      	streq	r3, [r4, #24]
 8006ea6:	f000 f81f 	bl	8006ee8 <__sfp>
 8006eaa:	6060      	str	r0, [r4, #4]
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 f81b 	bl	8006ee8 <__sfp>
 8006eb2:	60a0      	str	r0, [r4, #8]
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 f817 	bl	8006ee8 <__sfp>
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2104      	movs	r1, #4
 8006ebe:	60e0      	str	r0, [r4, #12]
 8006ec0:	6860      	ldr	r0, [r4, #4]
 8006ec2:	f7ff ff81 	bl	8006dc8 <std>
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	2109      	movs	r1, #9
 8006eca:	68a0      	ldr	r0, [r4, #8]
 8006ecc:	f7ff ff7c 	bl	8006dc8 <std>
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	2112      	movs	r1, #18
 8006ed4:	68e0      	ldr	r0, [r4, #12]
 8006ed6:	f7ff ff77 	bl	8006dc8 <std>
 8006eda:	2301      	movs	r3, #1
 8006edc:	61a3      	str	r3, [r4, #24]
 8006ede:	e7d1      	b.n	8006e84 <__sinit+0xc>
 8006ee0:	080081cc 	.word	0x080081cc
 8006ee4:	08006e11 	.word	0x08006e11

08006ee8 <__sfp>:
 8006ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eea:	4607      	mov	r7, r0
 8006eec:	f7ff ffac 	bl	8006e48 <__sfp_lock_acquire>
 8006ef0:	4b1e      	ldr	r3, [pc, #120]	; (8006f6c <__sfp+0x84>)
 8006ef2:	681e      	ldr	r6, [r3, #0]
 8006ef4:	69b3      	ldr	r3, [r6, #24]
 8006ef6:	b913      	cbnz	r3, 8006efe <__sfp+0x16>
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f7ff ffbd 	bl	8006e78 <__sinit>
 8006efe:	3648      	adds	r6, #72	; 0x48
 8006f00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	d503      	bpl.n	8006f10 <__sfp+0x28>
 8006f08:	6833      	ldr	r3, [r6, #0]
 8006f0a:	b30b      	cbz	r3, 8006f50 <__sfp+0x68>
 8006f0c:	6836      	ldr	r6, [r6, #0]
 8006f0e:	e7f7      	b.n	8006f00 <__sfp+0x18>
 8006f10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f14:	b9d5      	cbnz	r5, 8006f4c <__sfp+0x64>
 8006f16:	4b16      	ldr	r3, [pc, #88]	; (8006f70 <__sfp+0x88>)
 8006f18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f1c:	60e3      	str	r3, [r4, #12]
 8006f1e:	6665      	str	r5, [r4, #100]	; 0x64
 8006f20:	f000 f84c 	bl	8006fbc <__retarget_lock_init_recursive>
 8006f24:	f7ff ff96 	bl	8006e54 <__sfp_lock_release>
 8006f28:	2208      	movs	r2, #8
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f34:	6025      	str	r5, [r4, #0]
 8006f36:	61a5      	str	r5, [r4, #24]
 8006f38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f3c:	f7fe f964 	bl	8005208 <memset>
 8006f40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f48:	4620      	mov	r0, r4
 8006f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f4c:	3468      	adds	r4, #104	; 0x68
 8006f4e:	e7d9      	b.n	8006f04 <__sfp+0x1c>
 8006f50:	2104      	movs	r1, #4
 8006f52:	4638      	mov	r0, r7
 8006f54:	f7ff ff62 	bl	8006e1c <__sfmoreglue>
 8006f58:	4604      	mov	r4, r0
 8006f5a:	6030      	str	r0, [r6, #0]
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d1d5      	bne.n	8006f0c <__sfp+0x24>
 8006f60:	f7ff ff78 	bl	8006e54 <__sfp_lock_release>
 8006f64:	230c      	movs	r3, #12
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	e7ee      	b.n	8006f48 <__sfp+0x60>
 8006f6a:	bf00      	nop
 8006f6c:	080081cc 	.word	0x080081cc
 8006f70:	ffff0001 	.word	0xffff0001

08006f74 <_fwalk_reent>:
 8006f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f78:	4606      	mov	r6, r0
 8006f7a:	4688      	mov	r8, r1
 8006f7c:	2700      	movs	r7, #0
 8006f7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f86:	f1b9 0901 	subs.w	r9, r9, #1
 8006f8a:	d505      	bpl.n	8006f98 <_fwalk_reent+0x24>
 8006f8c:	6824      	ldr	r4, [r4, #0]
 8006f8e:	2c00      	cmp	r4, #0
 8006f90:	d1f7      	bne.n	8006f82 <_fwalk_reent+0xe>
 8006f92:	4638      	mov	r0, r7
 8006f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f98:	89ab      	ldrh	r3, [r5, #12]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d907      	bls.n	8006fae <_fwalk_reent+0x3a>
 8006f9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	d003      	beq.n	8006fae <_fwalk_reent+0x3a>
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	4630      	mov	r0, r6
 8006faa:	47c0      	blx	r8
 8006fac:	4307      	orrs	r7, r0
 8006fae:	3568      	adds	r5, #104	; 0x68
 8006fb0:	e7e9      	b.n	8006f86 <_fwalk_reent+0x12>
	...

08006fb4 <_localeconv_r>:
 8006fb4:	4800      	ldr	r0, [pc, #0]	; (8006fb8 <_localeconv_r+0x4>)
 8006fb6:	4770      	bx	lr
 8006fb8:	20000160 	.word	0x20000160

08006fbc <__retarget_lock_init_recursive>:
 8006fbc:	4770      	bx	lr

08006fbe <__retarget_lock_acquire_recursive>:
 8006fbe:	4770      	bx	lr

08006fc0 <__retarget_lock_release_recursive>:
 8006fc0:	4770      	bx	lr

08006fc2 <__swhatbuf_r>:
 8006fc2:	b570      	push	{r4, r5, r6, lr}
 8006fc4:	460e      	mov	r6, r1
 8006fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fca:	4614      	mov	r4, r2
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	461d      	mov	r5, r3
 8006fd0:	b096      	sub	sp, #88	; 0x58
 8006fd2:	da07      	bge.n	8006fe4 <__swhatbuf_r+0x22>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	602b      	str	r3, [r5, #0]
 8006fd8:	89b3      	ldrh	r3, [r6, #12]
 8006fda:	061a      	lsls	r2, r3, #24
 8006fdc:	d410      	bmi.n	8007000 <__swhatbuf_r+0x3e>
 8006fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fe2:	e00e      	b.n	8007002 <__swhatbuf_r+0x40>
 8006fe4:	466a      	mov	r2, sp
 8006fe6:	f000 ff53 	bl	8007e90 <_fstat_r>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	dbf2      	blt.n	8006fd4 <__swhatbuf_r+0x12>
 8006fee:	9a01      	ldr	r2, [sp, #4]
 8006ff0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ff4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ff8:	425a      	negs	r2, r3
 8006ffa:	415a      	adcs	r2, r3
 8006ffc:	602a      	str	r2, [r5, #0]
 8006ffe:	e7ee      	b.n	8006fde <__swhatbuf_r+0x1c>
 8007000:	2340      	movs	r3, #64	; 0x40
 8007002:	2000      	movs	r0, #0
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	b016      	add	sp, #88	; 0x58
 8007008:	bd70      	pop	{r4, r5, r6, pc}
	...

0800700c <__smakebuf_r>:
 800700c:	898b      	ldrh	r3, [r1, #12]
 800700e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007010:	079d      	lsls	r5, r3, #30
 8007012:	4606      	mov	r6, r0
 8007014:	460c      	mov	r4, r1
 8007016:	d507      	bpl.n	8007028 <__smakebuf_r+0x1c>
 8007018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	6123      	str	r3, [r4, #16]
 8007020:	2301      	movs	r3, #1
 8007022:	6163      	str	r3, [r4, #20]
 8007024:	b002      	add	sp, #8
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	466a      	mov	r2, sp
 800702a:	ab01      	add	r3, sp, #4
 800702c:	f7ff ffc9 	bl	8006fc2 <__swhatbuf_r>
 8007030:	9900      	ldr	r1, [sp, #0]
 8007032:	4605      	mov	r5, r0
 8007034:	4630      	mov	r0, r6
 8007036:	f7fe f93b 	bl	80052b0 <_malloc_r>
 800703a:	b948      	cbnz	r0, 8007050 <__smakebuf_r+0x44>
 800703c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007040:	059a      	lsls	r2, r3, #22
 8007042:	d4ef      	bmi.n	8007024 <__smakebuf_r+0x18>
 8007044:	f023 0303 	bic.w	r3, r3, #3
 8007048:	f043 0302 	orr.w	r3, r3, #2
 800704c:	81a3      	strh	r3, [r4, #12]
 800704e:	e7e3      	b.n	8007018 <__smakebuf_r+0xc>
 8007050:	4b0d      	ldr	r3, [pc, #52]	; (8007088 <__smakebuf_r+0x7c>)
 8007052:	62b3      	str	r3, [r6, #40]	; 0x28
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	6020      	str	r0, [r4, #0]
 8007058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	9b00      	ldr	r3, [sp, #0]
 8007060:	6120      	str	r0, [r4, #16]
 8007062:	6163      	str	r3, [r4, #20]
 8007064:	9b01      	ldr	r3, [sp, #4]
 8007066:	b15b      	cbz	r3, 8007080 <__smakebuf_r+0x74>
 8007068:	4630      	mov	r0, r6
 800706a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800706e:	f000 ff21 	bl	8007eb4 <_isatty_r>
 8007072:	b128      	cbz	r0, 8007080 <__smakebuf_r+0x74>
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	f023 0303 	bic.w	r3, r3, #3
 800707a:	f043 0301 	orr.w	r3, r3, #1
 800707e:	81a3      	strh	r3, [r4, #12]
 8007080:	89a0      	ldrh	r0, [r4, #12]
 8007082:	4305      	orrs	r5, r0
 8007084:	81a5      	strh	r5, [r4, #12]
 8007086:	e7cd      	b.n	8007024 <__smakebuf_r+0x18>
 8007088:	08006e11 	.word	0x08006e11

0800708c <memchr>:
 800708c:	4603      	mov	r3, r0
 800708e:	b510      	push	{r4, lr}
 8007090:	b2c9      	uxtb	r1, r1
 8007092:	4402      	add	r2, r0
 8007094:	4293      	cmp	r3, r2
 8007096:	4618      	mov	r0, r3
 8007098:	d101      	bne.n	800709e <memchr+0x12>
 800709a:	2000      	movs	r0, #0
 800709c:	e003      	b.n	80070a6 <memchr+0x1a>
 800709e:	7804      	ldrb	r4, [r0, #0]
 80070a0:	3301      	adds	r3, #1
 80070a2:	428c      	cmp	r4, r1
 80070a4:	d1f6      	bne.n	8007094 <memchr+0x8>
 80070a6:	bd10      	pop	{r4, pc}

080070a8 <memcpy>:
 80070a8:	440a      	add	r2, r1
 80070aa:	4291      	cmp	r1, r2
 80070ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80070b0:	d100      	bne.n	80070b4 <memcpy+0xc>
 80070b2:	4770      	bx	lr
 80070b4:	b510      	push	{r4, lr}
 80070b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ba:	4291      	cmp	r1, r2
 80070bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070c0:	d1f9      	bne.n	80070b6 <memcpy+0xe>
 80070c2:	bd10      	pop	{r4, pc}

080070c4 <__malloc_lock>:
 80070c4:	4801      	ldr	r0, [pc, #4]	; (80070cc <__malloc_lock+0x8>)
 80070c6:	f7ff bf7a 	b.w	8006fbe <__retarget_lock_acquire_recursive>
 80070ca:	bf00      	nop
 80070cc:	20000364 	.word	0x20000364

080070d0 <__malloc_unlock>:
 80070d0:	4801      	ldr	r0, [pc, #4]	; (80070d8 <__malloc_unlock+0x8>)
 80070d2:	f7ff bf75 	b.w	8006fc0 <__retarget_lock_release_recursive>
 80070d6:	bf00      	nop
 80070d8:	20000364 	.word	0x20000364

080070dc <_Balloc>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070e0:	4604      	mov	r4, r0
 80070e2:	460d      	mov	r5, r1
 80070e4:	b976      	cbnz	r6, 8007104 <_Balloc+0x28>
 80070e6:	2010      	movs	r0, #16
 80070e8:	f7fe f87e 	bl	80051e8 <malloc>
 80070ec:	4602      	mov	r2, r0
 80070ee:	6260      	str	r0, [r4, #36]	; 0x24
 80070f0:	b920      	cbnz	r0, 80070fc <_Balloc+0x20>
 80070f2:	2166      	movs	r1, #102	; 0x66
 80070f4:	4b17      	ldr	r3, [pc, #92]	; (8007154 <_Balloc+0x78>)
 80070f6:	4818      	ldr	r0, [pc, #96]	; (8007158 <_Balloc+0x7c>)
 80070f8:	f000 fe8a 	bl	8007e10 <__assert_func>
 80070fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007100:	6006      	str	r6, [r0, #0]
 8007102:	60c6      	str	r6, [r0, #12]
 8007104:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007106:	68f3      	ldr	r3, [r6, #12]
 8007108:	b183      	cbz	r3, 800712c <_Balloc+0x50>
 800710a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007112:	b9b8      	cbnz	r0, 8007144 <_Balloc+0x68>
 8007114:	2101      	movs	r1, #1
 8007116:	fa01 f605 	lsl.w	r6, r1, r5
 800711a:	1d72      	adds	r2, r6, #5
 800711c:	4620      	mov	r0, r4
 800711e:	0092      	lsls	r2, r2, #2
 8007120:	f000 fb5e 	bl	80077e0 <_calloc_r>
 8007124:	b160      	cbz	r0, 8007140 <_Balloc+0x64>
 8007126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800712a:	e00e      	b.n	800714a <_Balloc+0x6e>
 800712c:	2221      	movs	r2, #33	; 0x21
 800712e:	2104      	movs	r1, #4
 8007130:	4620      	mov	r0, r4
 8007132:	f000 fb55 	bl	80077e0 <_calloc_r>
 8007136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007138:	60f0      	str	r0, [r6, #12]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e4      	bne.n	800710a <_Balloc+0x2e>
 8007140:	2000      	movs	r0, #0
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	6802      	ldr	r2, [r0, #0]
 8007146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800714a:	2300      	movs	r3, #0
 800714c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007150:	e7f7      	b.n	8007142 <_Balloc+0x66>
 8007152:	bf00      	nop
 8007154:	08008211 	.word	0x08008211
 8007158:	080082f8 	.word	0x080082f8

0800715c <_Bfree>:
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007160:	4605      	mov	r5, r0
 8007162:	460c      	mov	r4, r1
 8007164:	b976      	cbnz	r6, 8007184 <_Bfree+0x28>
 8007166:	2010      	movs	r0, #16
 8007168:	f7fe f83e 	bl	80051e8 <malloc>
 800716c:	4602      	mov	r2, r0
 800716e:	6268      	str	r0, [r5, #36]	; 0x24
 8007170:	b920      	cbnz	r0, 800717c <_Bfree+0x20>
 8007172:	218a      	movs	r1, #138	; 0x8a
 8007174:	4b08      	ldr	r3, [pc, #32]	; (8007198 <_Bfree+0x3c>)
 8007176:	4809      	ldr	r0, [pc, #36]	; (800719c <_Bfree+0x40>)
 8007178:	f000 fe4a 	bl	8007e10 <__assert_func>
 800717c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007180:	6006      	str	r6, [r0, #0]
 8007182:	60c6      	str	r6, [r0, #12]
 8007184:	b13c      	cbz	r4, 8007196 <_Bfree+0x3a>
 8007186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007188:	6862      	ldr	r2, [r4, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007190:	6021      	str	r1, [r4, #0]
 8007192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007196:	bd70      	pop	{r4, r5, r6, pc}
 8007198:	08008211 	.word	0x08008211
 800719c:	080082f8 	.word	0x080082f8

080071a0 <__multadd>:
 80071a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a4:	4698      	mov	r8, r3
 80071a6:	460c      	mov	r4, r1
 80071a8:	2300      	movs	r3, #0
 80071aa:	690e      	ldr	r6, [r1, #16]
 80071ac:	4607      	mov	r7, r0
 80071ae:	f101 0014 	add.w	r0, r1, #20
 80071b2:	6805      	ldr	r5, [r0, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	b2a9      	uxth	r1, r5
 80071b8:	fb02 8101 	mla	r1, r2, r1, r8
 80071bc:	0c2d      	lsrs	r5, r5, #16
 80071be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80071c2:	fb02 c505 	mla	r5, r2, r5, ip
 80071c6:	b289      	uxth	r1, r1
 80071c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80071cc:	429e      	cmp	r6, r3
 80071ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80071d2:	f840 1b04 	str.w	r1, [r0], #4
 80071d6:	dcec      	bgt.n	80071b2 <__multadd+0x12>
 80071d8:	f1b8 0f00 	cmp.w	r8, #0
 80071dc:	d022      	beq.n	8007224 <__multadd+0x84>
 80071de:	68a3      	ldr	r3, [r4, #8]
 80071e0:	42b3      	cmp	r3, r6
 80071e2:	dc19      	bgt.n	8007218 <__multadd+0x78>
 80071e4:	6861      	ldr	r1, [r4, #4]
 80071e6:	4638      	mov	r0, r7
 80071e8:	3101      	adds	r1, #1
 80071ea:	f7ff ff77 	bl	80070dc <_Balloc>
 80071ee:	4605      	mov	r5, r0
 80071f0:	b928      	cbnz	r0, 80071fe <__multadd+0x5e>
 80071f2:	4602      	mov	r2, r0
 80071f4:	21b5      	movs	r1, #181	; 0xb5
 80071f6:	4b0d      	ldr	r3, [pc, #52]	; (800722c <__multadd+0x8c>)
 80071f8:	480d      	ldr	r0, [pc, #52]	; (8007230 <__multadd+0x90>)
 80071fa:	f000 fe09 	bl	8007e10 <__assert_func>
 80071fe:	6922      	ldr	r2, [r4, #16]
 8007200:	f104 010c 	add.w	r1, r4, #12
 8007204:	3202      	adds	r2, #2
 8007206:	0092      	lsls	r2, r2, #2
 8007208:	300c      	adds	r0, #12
 800720a:	f7ff ff4d 	bl	80070a8 <memcpy>
 800720e:	4621      	mov	r1, r4
 8007210:	4638      	mov	r0, r7
 8007212:	f7ff ffa3 	bl	800715c <_Bfree>
 8007216:	462c      	mov	r4, r5
 8007218:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800721c:	3601      	adds	r6, #1
 800721e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007222:	6126      	str	r6, [r4, #16]
 8007224:	4620      	mov	r0, r4
 8007226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800722a:	bf00      	nop
 800722c:	08008287 	.word	0x08008287
 8007230:	080082f8 	.word	0x080082f8

08007234 <__hi0bits>:
 8007234:	0c02      	lsrs	r2, r0, #16
 8007236:	0412      	lsls	r2, r2, #16
 8007238:	4603      	mov	r3, r0
 800723a:	b9ca      	cbnz	r2, 8007270 <__hi0bits+0x3c>
 800723c:	0403      	lsls	r3, r0, #16
 800723e:	2010      	movs	r0, #16
 8007240:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007244:	bf04      	itt	eq
 8007246:	021b      	lsleq	r3, r3, #8
 8007248:	3008      	addeq	r0, #8
 800724a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800724e:	bf04      	itt	eq
 8007250:	011b      	lsleq	r3, r3, #4
 8007252:	3004      	addeq	r0, #4
 8007254:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007258:	bf04      	itt	eq
 800725a:	009b      	lsleq	r3, r3, #2
 800725c:	3002      	addeq	r0, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	db05      	blt.n	800726e <__hi0bits+0x3a>
 8007262:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007266:	f100 0001 	add.w	r0, r0, #1
 800726a:	bf08      	it	eq
 800726c:	2020      	moveq	r0, #32
 800726e:	4770      	bx	lr
 8007270:	2000      	movs	r0, #0
 8007272:	e7e5      	b.n	8007240 <__hi0bits+0xc>

08007274 <__lo0bits>:
 8007274:	6803      	ldr	r3, [r0, #0]
 8007276:	4602      	mov	r2, r0
 8007278:	f013 0007 	ands.w	r0, r3, #7
 800727c:	d00b      	beq.n	8007296 <__lo0bits+0x22>
 800727e:	07d9      	lsls	r1, r3, #31
 8007280:	d422      	bmi.n	80072c8 <__lo0bits+0x54>
 8007282:	0798      	lsls	r0, r3, #30
 8007284:	bf49      	itett	mi
 8007286:	085b      	lsrmi	r3, r3, #1
 8007288:	089b      	lsrpl	r3, r3, #2
 800728a:	2001      	movmi	r0, #1
 800728c:	6013      	strmi	r3, [r2, #0]
 800728e:	bf5c      	itt	pl
 8007290:	2002      	movpl	r0, #2
 8007292:	6013      	strpl	r3, [r2, #0]
 8007294:	4770      	bx	lr
 8007296:	b299      	uxth	r1, r3
 8007298:	b909      	cbnz	r1, 800729e <__lo0bits+0x2a>
 800729a:	2010      	movs	r0, #16
 800729c:	0c1b      	lsrs	r3, r3, #16
 800729e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80072a2:	bf04      	itt	eq
 80072a4:	0a1b      	lsreq	r3, r3, #8
 80072a6:	3008      	addeq	r0, #8
 80072a8:	0719      	lsls	r1, r3, #28
 80072aa:	bf04      	itt	eq
 80072ac:	091b      	lsreq	r3, r3, #4
 80072ae:	3004      	addeq	r0, #4
 80072b0:	0799      	lsls	r1, r3, #30
 80072b2:	bf04      	itt	eq
 80072b4:	089b      	lsreq	r3, r3, #2
 80072b6:	3002      	addeq	r0, #2
 80072b8:	07d9      	lsls	r1, r3, #31
 80072ba:	d403      	bmi.n	80072c4 <__lo0bits+0x50>
 80072bc:	085b      	lsrs	r3, r3, #1
 80072be:	f100 0001 	add.w	r0, r0, #1
 80072c2:	d003      	beq.n	80072cc <__lo0bits+0x58>
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4770      	bx	lr
 80072c8:	2000      	movs	r0, #0
 80072ca:	4770      	bx	lr
 80072cc:	2020      	movs	r0, #32
 80072ce:	4770      	bx	lr

080072d0 <__i2b>:
 80072d0:	b510      	push	{r4, lr}
 80072d2:	460c      	mov	r4, r1
 80072d4:	2101      	movs	r1, #1
 80072d6:	f7ff ff01 	bl	80070dc <_Balloc>
 80072da:	4602      	mov	r2, r0
 80072dc:	b928      	cbnz	r0, 80072ea <__i2b+0x1a>
 80072de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072e2:	4b04      	ldr	r3, [pc, #16]	; (80072f4 <__i2b+0x24>)
 80072e4:	4804      	ldr	r0, [pc, #16]	; (80072f8 <__i2b+0x28>)
 80072e6:	f000 fd93 	bl	8007e10 <__assert_func>
 80072ea:	2301      	movs	r3, #1
 80072ec:	6144      	str	r4, [r0, #20]
 80072ee:	6103      	str	r3, [r0, #16]
 80072f0:	bd10      	pop	{r4, pc}
 80072f2:	bf00      	nop
 80072f4:	08008287 	.word	0x08008287
 80072f8:	080082f8 	.word	0x080082f8

080072fc <__multiply>:
 80072fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007300:	4614      	mov	r4, r2
 8007302:	690a      	ldr	r2, [r1, #16]
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	460d      	mov	r5, r1
 8007308:	429a      	cmp	r2, r3
 800730a:	bfbe      	ittt	lt
 800730c:	460b      	movlt	r3, r1
 800730e:	4625      	movlt	r5, r4
 8007310:	461c      	movlt	r4, r3
 8007312:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007316:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800731a:	68ab      	ldr	r3, [r5, #8]
 800731c:	6869      	ldr	r1, [r5, #4]
 800731e:	eb0a 0709 	add.w	r7, sl, r9
 8007322:	42bb      	cmp	r3, r7
 8007324:	b085      	sub	sp, #20
 8007326:	bfb8      	it	lt
 8007328:	3101      	addlt	r1, #1
 800732a:	f7ff fed7 	bl	80070dc <_Balloc>
 800732e:	b930      	cbnz	r0, 800733e <__multiply+0x42>
 8007330:	4602      	mov	r2, r0
 8007332:	f240 115d 	movw	r1, #349	; 0x15d
 8007336:	4b41      	ldr	r3, [pc, #260]	; (800743c <__multiply+0x140>)
 8007338:	4841      	ldr	r0, [pc, #260]	; (8007440 <__multiply+0x144>)
 800733a:	f000 fd69 	bl	8007e10 <__assert_func>
 800733e:	f100 0614 	add.w	r6, r0, #20
 8007342:	4633      	mov	r3, r6
 8007344:	2200      	movs	r2, #0
 8007346:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800734a:	4543      	cmp	r3, r8
 800734c:	d31e      	bcc.n	800738c <__multiply+0x90>
 800734e:	f105 0c14 	add.w	ip, r5, #20
 8007352:	f104 0314 	add.w	r3, r4, #20
 8007356:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800735a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800735e:	9202      	str	r2, [sp, #8]
 8007360:	ebac 0205 	sub.w	r2, ip, r5
 8007364:	3a15      	subs	r2, #21
 8007366:	f022 0203 	bic.w	r2, r2, #3
 800736a:	3204      	adds	r2, #4
 800736c:	f105 0115 	add.w	r1, r5, #21
 8007370:	458c      	cmp	ip, r1
 8007372:	bf38      	it	cc
 8007374:	2204      	movcc	r2, #4
 8007376:	9201      	str	r2, [sp, #4]
 8007378:	9a02      	ldr	r2, [sp, #8]
 800737a:	9303      	str	r3, [sp, #12]
 800737c:	429a      	cmp	r2, r3
 800737e:	d808      	bhi.n	8007392 <__multiply+0x96>
 8007380:	2f00      	cmp	r7, #0
 8007382:	dc55      	bgt.n	8007430 <__multiply+0x134>
 8007384:	6107      	str	r7, [r0, #16]
 8007386:	b005      	add	sp, #20
 8007388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738c:	f843 2b04 	str.w	r2, [r3], #4
 8007390:	e7db      	b.n	800734a <__multiply+0x4e>
 8007392:	f8b3 a000 	ldrh.w	sl, [r3]
 8007396:	f1ba 0f00 	cmp.w	sl, #0
 800739a:	d020      	beq.n	80073de <__multiply+0xe2>
 800739c:	46b1      	mov	r9, r6
 800739e:	2200      	movs	r2, #0
 80073a0:	f105 0e14 	add.w	lr, r5, #20
 80073a4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80073a8:	f8d9 b000 	ldr.w	fp, [r9]
 80073ac:	b2a1      	uxth	r1, r4
 80073ae:	fa1f fb8b 	uxth.w	fp, fp
 80073b2:	fb0a b101 	mla	r1, sl, r1, fp
 80073b6:	4411      	add	r1, r2
 80073b8:	f8d9 2000 	ldr.w	r2, [r9]
 80073bc:	0c24      	lsrs	r4, r4, #16
 80073be:	0c12      	lsrs	r2, r2, #16
 80073c0:	fb0a 2404 	mla	r4, sl, r4, r2
 80073c4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80073c8:	b289      	uxth	r1, r1
 80073ca:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80073ce:	45f4      	cmp	ip, lr
 80073d0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80073d4:	f849 1b04 	str.w	r1, [r9], #4
 80073d8:	d8e4      	bhi.n	80073a4 <__multiply+0xa8>
 80073da:	9901      	ldr	r1, [sp, #4]
 80073dc:	5072      	str	r2, [r6, r1]
 80073de:	9a03      	ldr	r2, [sp, #12]
 80073e0:	3304      	adds	r3, #4
 80073e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073e6:	f1b9 0f00 	cmp.w	r9, #0
 80073ea:	d01f      	beq.n	800742c <__multiply+0x130>
 80073ec:	46b6      	mov	lr, r6
 80073ee:	f04f 0a00 	mov.w	sl, #0
 80073f2:	6834      	ldr	r4, [r6, #0]
 80073f4:	f105 0114 	add.w	r1, r5, #20
 80073f8:	880a      	ldrh	r2, [r1, #0]
 80073fa:	f8be b002 	ldrh.w	fp, [lr, #2]
 80073fe:	b2a4      	uxth	r4, r4
 8007400:	fb09 b202 	mla	r2, r9, r2, fp
 8007404:	4492      	add	sl, r2
 8007406:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800740a:	f84e 4b04 	str.w	r4, [lr], #4
 800740e:	f851 4b04 	ldr.w	r4, [r1], #4
 8007412:	f8be 2000 	ldrh.w	r2, [lr]
 8007416:	0c24      	lsrs	r4, r4, #16
 8007418:	fb09 2404 	mla	r4, r9, r4, r2
 800741c:	458c      	cmp	ip, r1
 800741e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007422:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007426:	d8e7      	bhi.n	80073f8 <__multiply+0xfc>
 8007428:	9a01      	ldr	r2, [sp, #4]
 800742a:	50b4      	str	r4, [r6, r2]
 800742c:	3604      	adds	r6, #4
 800742e:	e7a3      	b.n	8007378 <__multiply+0x7c>
 8007430:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1a5      	bne.n	8007384 <__multiply+0x88>
 8007438:	3f01      	subs	r7, #1
 800743a:	e7a1      	b.n	8007380 <__multiply+0x84>
 800743c:	08008287 	.word	0x08008287
 8007440:	080082f8 	.word	0x080082f8

08007444 <__pow5mult>:
 8007444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007448:	4615      	mov	r5, r2
 800744a:	f012 0203 	ands.w	r2, r2, #3
 800744e:	4606      	mov	r6, r0
 8007450:	460f      	mov	r7, r1
 8007452:	d007      	beq.n	8007464 <__pow5mult+0x20>
 8007454:	4c25      	ldr	r4, [pc, #148]	; (80074ec <__pow5mult+0xa8>)
 8007456:	3a01      	subs	r2, #1
 8007458:	2300      	movs	r3, #0
 800745a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800745e:	f7ff fe9f 	bl	80071a0 <__multadd>
 8007462:	4607      	mov	r7, r0
 8007464:	10ad      	asrs	r5, r5, #2
 8007466:	d03d      	beq.n	80074e4 <__pow5mult+0xa0>
 8007468:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800746a:	b97c      	cbnz	r4, 800748c <__pow5mult+0x48>
 800746c:	2010      	movs	r0, #16
 800746e:	f7fd febb 	bl	80051e8 <malloc>
 8007472:	4602      	mov	r2, r0
 8007474:	6270      	str	r0, [r6, #36]	; 0x24
 8007476:	b928      	cbnz	r0, 8007484 <__pow5mult+0x40>
 8007478:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800747c:	4b1c      	ldr	r3, [pc, #112]	; (80074f0 <__pow5mult+0xac>)
 800747e:	481d      	ldr	r0, [pc, #116]	; (80074f4 <__pow5mult+0xb0>)
 8007480:	f000 fcc6 	bl	8007e10 <__assert_func>
 8007484:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007488:	6004      	str	r4, [r0, #0]
 800748a:	60c4      	str	r4, [r0, #12]
 800748c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007490:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007494:	b94c      	cbnz	r4, 80074aa <__pow5mult+0x66>
 8007496:	f240 2171 	movw	r1, #625	; 0x271
 800749a:	4630      	mov	r0, r6
 800749c:	f7ff ff18 	bl	80072d0 <__i2b>
 80074a0:	2300      	movs	r3, #0
 80074a2:	4604      	mov	r4, r0
 80074a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80074a8:	6003      	str	r3, [r0, #0]
 80074aa:	f04f 0900 	mov.w	r9, #0
 80074ae:	07eb      	lsls	r3, r5, #31
 80074b0:	d50a      	bpl.n	80074c8 <__pow5mult+0x84>
 80074b2:	4639      	mov	r1, r7
 80074b4:	4622      	mov	r2, r4
 80074b6:	4630      	mov	r0, r6
 80074b8:	f7ff ff20 	bl	80072fc <__multiply>
 80074bc:	4680      	mov	r8, r0
 80074be:	4639      	mov	r1, r7
 80074c0:	4630      	mov	r0, r6
 80074c2:	f7ff fe4b 	bl	800715c <_Bfree>
 80074c6:	4647      	mov	r7, r8
 80074c8:	106d      	asrs	r5, r5, #1
 80074ca:	d00b      	beq.n	80074e4 <__pow5mult+0xa0>
 80074cc:	6820      	ldr	r0, [r4, #0]
 80074ce:	b938      	cbnz	r0, 80074e0 <__pow5mult+0x9c>
 80074d0:	4622      	mov	r2, r4
 80074d2:	4621      	mov	r1, r4
 80074d4:	4630      	mov	r0, r6
 80074d6:	f7ff ff11 	bl	80072fc <__multiply>
 80074da:	6020      	str	r0, [r4, #0]
 80074dc:	f8c0 9000 	str.w	r9, [r0]
 80074e0:	4604      	mov	r4, r0
 80074e2:	e7e4      	b.n	80074ae <__pow5mult+0x6a>
 80074e4:	4638      	mov	r0, r7
 80074e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ea:	bf00      	nop
 80074ec:	08008448 	.word	0x08008448
 80074f0:	08008211 	.word	0x08008211
 80074f4:	080082f8 	.word	0x080082f8

080074f8 <__lshift>:
 80074f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074fc:	460c      	mov	r4, r1
 80074fe:	4607      	mov	r7, r0
 8007500:	4691      	mov	r9, r2
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	6849      	ldr	r1, [r1, #4]
 8007506:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800750a:	68a3      	ldr	r3, [r4, #8]
 800750c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007510:	f108 0601 	add.w	r6, r8, #1
 8007514:	42b3      	cmp	r3, r6
 8007516:	db0b      	blt.n	8007530 <__lshift+0x38>
 8007518:	4638      	mov	r0, r7
 800751a:	f7ff fddf 	bl	80070dc <_Balloc>
 800751e:	4605      	mov	r5, r0
 8007520:	b948      	cbnz	r0, 8007536 <__lshift+0x3e>
 8007522:	4602      	mov	r2, r0
 8007524:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007528:	4b27      	ldr	r3, [pc, #156]	; (80075c8 <__lshift+0xd0>)
 800752a:	4828      	ldr	r0, [pc, #160]	; (80075cc <__lshift+0xd4>)
 800752c:	f000 fc70 	bl	8007e10 <__assert_func>
 8007530:	3101      	adds	r1, #1
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	e7ee      	b.n	8007514 <__lshift+0x1c>
 8007536:	2300      	movs	r3, #0
 8007538:	f100 0114 	add.w	r1, r0, #20
 800753c:	f100 0210 	add.w	r2, r0, #16
 8007540:	4618      	mov	r0, r3
 8007542:	4553      	cmp	r3, sl
 8007544:	db33      	blt.n	80075ae <__lshift+0xb6>
 8007546:	6920      	ldr	r0, [r4, #16]
 8007548:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800754c:	f104 0314 	add.w	r3, r4, #20
 8007550:	f019 091f 	ands.w	r9, r9, #31
 8007554:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007558:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800755c:	d02b      	beq.n	80075b6 <__lshift+0xbe>
 800755e:	468a      	mov	sl, r1
 8007560:	2200      	movs	r2, #0
 8007562:	f1c9 0e20 	rsb	lr, r9, #32
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	fa00 f009 	lsl.w	r0, r0, r9
 800756c:	4302      	orrs	r2, r0
 800756e:	f84a 2b04 	str.w	r2, [sl], #4
 8007572:	f853 2b04 	ldr.w	r2, [r3], #4
 8007576:	459c      	cmp	ip, r3
 8007578:	fa22 f20e 	lsr.w	r2, r2, lr
 800757c:	d8f3      	bhi.n	8007566 <__lshift+0x6e>
 800757e:	ebac 0304 	sub.w	r3, ip, r4
 8007582:	3b15      	subs	r3, #21
 8007584:	f023 0303 	bic.w	r3, r3, #3
 8007588:	3304      	adds	r3, #4
 800758a:	f104 0015 	add.w	r0, r4, #21
 800758e:	4584      	cmp	ip, r0
 8007590:	bf38      	it	cc
 8007592:	2304      	movcc	r3, #4
 8007594:	50ca      	str	r2, [r1, r3]
 8007596:	b10a      	cbz	r2, 800759c <__lshift+0xa4>
 8007598:	f108 0602 	add.w	r6, r8, #2
 800759c:	3e01      	subs	r6, #1
 800759e:	4638      	mov	r0, r7
 80075a0:	4621      	mov	r1, r4
 80075a2:	612e      	str	r6, [r5, #16]
 80075a4:	f7ff fdda 	bl	800715c <_Bfree>
 80075a8:	4628      	mov	r0, r5
 80075aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80075b2:	3301      	adds	r3, #1
 80075b4:	e7c5      	b.n	8007542 <__lshift+0x4a>
 80075b6:	3904      	subs	r1, #4
 80075b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075bc:	459c      	cmp	ip, r3
 80075be:	f841 2f04 	str.w	r2, [r1, #4]!
 80075c2:	d8f9      	bhi.n	80075b8 <__lshift+0xc0>
 80075c4:	e7ea      	b.n	800759c <__lshift+0xa4>
 80075c6:	bf00      	nop
 80075c8:	08008287 	.word	0x08008287
 80075cc:	080082f8 	.word	0x080082f8

080075d0 <__mcmp>:
 80075d0:	4603      	mov	r3, r0
 80075d2:	690a      	ldr	r2, [r1, #16]
 80075d4:	6900      	ldr	r0, [r0, #16]
 80075d6:	b530      	push	{r4, r5, lr}
 80075d8:	1a80      	subs	r0, r0, r2
 80075da:	d10d      	bne.n	80075f8 <__mcmp+0x28>
 80075dc:	3314      	adds	r3, #20
 80075de:	3114      	adds	r1, #20
 80075e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80075e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80075e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075f0:	4295      	cmp	r5, r2
 80075f2:	d002      	beq.n	80075fa <__mcmp+0x2a>
 80075f4:	d304      	bcc.n	8007600 <__mcmp+0x30>
 80075f6:	2001      	movs	r0, #1
 80075f8:	bd30      	pop	{r4, r5, pc}
 80075fa:	42a3      	cmp	r3, r4
 80075fc:	d3f4      	bcc.n	80075e8 <__mcmp+0x18>
 80075fe:	e7fb      	b.n	80075f8 <__mcmp+0x28>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	e7f8      	b.n	80075f8 <__mcmp+0x28>
	...

08007608 <__mdiff>:
 8007608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	460c      	mov	r4, r1
 800760e:	4606      	mov	r6, r0
 8007610:	4611      	mov	r1, r2
 8007612:	4620      	mov	r0, r4
 8007614:	4692      	mov	sl, r2
 8007616:	f7ff ffdb 	bl	80075d0 <__mcmp>
 800761a:	1e05      	subs	r5, r0, #0
 800761c:	d111      	bne.n	8007642 <__mdiff+0x3a>
 800761e:	4629      	mov	r1, r5
 8007620:	4630      	mov	r0, r6
 8007622:	f7ff fd5b 	bl	80070dc <_Balloc>
 8007626:	4602      	mov	r2, r0
 8007628:	b928      	cbnz	r0, 8007636 <__mdiff+0x2e>
 800762a:	f240 2132 	movw	r1, #562	; 0x232
 800762e:	4b3c      	ldr	r3, [pc, #240]	; (8007720 <__mdiff+0x118>)
 8007630:	483c      	ldr	r0, [pc, #240]	; (8007724 <__mdiff+0x11c>)
 8007632:	f000 fbed 	bl	8007e10 <__assert_func>
 8007636:	2301      	movs	r3, #1
 8007638:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800763c:	4610      	mov	r0, r2
 800763e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007642:	bfa4      	itt	ge
 8007644:	4653      	movge	r3, sl
 8007646:	46a2      	movge	sl, r4
 8007648:	4630      	mov	r0, r6
 800764a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800764e:	bfa6      	itte	ge
 8007650:	461c      	movge	r4, r3
 8007652:	2500      	movge	r5, #0
 8007654:	2501      	movlt	r5, #1
 8007656:	f7ff fd41 	bl	80070dc <_Balloc>
 800765a:	4602      	mov	r2, r0
 800765c:	b918      	cbnz	r0, 8007666 <__mdiff+0x5e>
 800765e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007662:	4b2f      	ldr	r3, [pc, #188]	; (8007720 <__mdiff+0x118>)
 8007664:	e7e4      	b.n	8007630 <__mdiff+0x28>
 8007666:	f100 0814 	add.w	r8, r0, #20
 800766a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800766e:	60c5      	str	r5, [r0, #12]
 8007670:	f04f 0c00 	mov.w	ip, #0
 8007674:	f10a 0514 	add.w	r5, sl, #20
 8007678:	f10a 0010 	add.w	r0, sl, #16
 800767c:	46c2      	mov	sl, r8
 800767e:	6926      	ldr	r6, [r4, #16]
 8007680:	f104 0914 	add.w	r9, r4, #20
 8007684:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007688:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800768c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007690:	f859 3b04 	ldr.w	r3, [r9], #4
 8007694:	fa1f f18b 	uxth.w	r1, fp
 8007698:	4461      	add	r1, ip
 800769a:	fa1f fc83 	uxth.w	ip, r3
 800769e:	0c1b      	lsrs	r3, r3, #16
 80076a0:	eba1 010c 	sub.w	r1, r1, ip
 80076a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80076ac:	b289      	uxth	r1, r1
 80076ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80076b2:	454e      	cmp	r6, r9
 80076b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80076b8:	f84a 3b04 	str.w	r3, [sl], #4
 80076bc:	d8e6      	bhi.n	800768c <__mdiff+0x84>
 80076be:	1b33      	subs	r3, r6, r4
 80076c0:	3b15      	subs	r3, #21
 80076c2:	f023 0303 	bic.w	r3, r3, #3
 80076c6:	3415      	adds	r4, #21
 80076c8:	3304      	adds	r3, #4
 80076ca:	42a6      	cmp	r6, r4
 80076cc:	bf38      	it	cc
 80076ce:	2304      	movcc	r3, #4
 80076d0:	441d      	add	r5, r3
 80076d2:	4443      	add	r3, r8
 80076d4:	461e      	mov	r6, r3
 80076d6:	462c      	mov	r4, r5
 80076d8:	4574      	cmp	r4, lr
 80076da:	d30e      	bcc.n	80076fa <__mdiff+0xf2>
 80076dc:	f10e 0103 	add.w	r1, lr, #3
 80076e0:	1b49      	subs	r1, r1, r5
 80076e2:	f021 0103 	bic.w	r1, r1, #3
 80076e6:	3d03      	subs	r5, #3
 80076e8:	45ae      	cmp	lr, r5
 80076ea:	bf38      	it	cc
 80076ec:	2100      	movcc	r1, #0
 80076ee:	4419      	add	r1, r3
 80076f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80076f4:	b18b      	cbz	r3, 800771a <__mdiff+0x112>
 80076f6:	6117      	str	r7, [r2, #16]
 80076f8:	e7a0      	b.n	800763c <__mdiff+0x34>
 80076fa:	f854 8b04 	ldr.w	r8, [r4], #4
 80076fe:	fa1f f188 	uxth.w	r1, r8
 8007702:	4461      	add	r1, ip
 8007704:	1408      	asrs	r0, r1, #16
 8007706:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800770a:	b289      	uxth	r1, r1
 800770c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007710:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007714:	f846 1b04 	str.w	r1, [r6], #4
 8007718:	e7de      	b.n	80076d8 <__mdiff+0xd0>
 800771a:	3f01      	subs	r7, #1
 800771c:	e7e8      	b.n	80076f0 <__mdiff+0xe8>
 800771e:	bf00      	nop
 8007720:	08008287 	.word	0x08008287
 8007724:	080082f8 	.word	0x080082f8

08007728 <__d2b>:
 8007728:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800772c:	2101      	movs	r1, #1
 800772e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007732:	4690      	mov	r8, r2
 8007734:	461d      	mov	r5, r3
 8007736:	f7ff fcd1 	bl	80070dc <_Balloc>
 800773a:	4604      	mov	r4, r0
 800773c:	b930      	cbnz	r0, 800774c <__d2b+0x24>
 800773e:	4602      	mov	r2, r0
 8007740:	f240 310a 	movw	r1, #778	; 0x30a
 8007744:	4b24      	ldr	r3, [pc, #144]	; (80077d8 <__d2b+0xb0>)
 8007746:	4825      	ldr	r0, [pc, #148]	; (80077dc <__d2b+0xb4>)
 8007748:	f000 fb62 	bl	8007e10 <__assert_func>
 800774c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007750:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007754:	bb2d      	cbnz	r5, 80077a2 <__d2b+0x7a>
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	f1b8 0300 	subs.w	r3, r8, #0
 800775c:	d026      	beq.n	80077ac <__d2b+0x84>
 800775e:	4668      	mov	r0, sp
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	f7ff fd87 	bl	8007274 <__lo0bits>
 8007766:	9900      	ldr	r1, [sp, #0]
 8007768:	b1f0      	cbz	r0, 80077a8 <__d2b+0x80>
 800776a:	9a01      	ldr	r2, [sp, #4]
 800776c:	f1c0 0320 	rsb	r3, r0, #32
 8007770:	fa02 f303 	lsl.w	r3, r2, r3
 8007774:	430b      	orrs	r3, r1
 8007776:	40c2      	lsrs	r2, r0
 8007778:	6163      	str	r3, [r4, #20]
 800777a:	9201      	str	r2, [sp, #4]
 800777c:	9b01      	ldr	r3, [sp, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	bf14      	ite	ne
 8007782:	2102      	movne	r1, #2
 8007784:	2101      	moveq	r1, #1
 8007786:	61a3      	str	r3, [r4, #24]
 8007788:	6121      	str	r1, [r4, #16]
 800778a:	b1c5      	cbz	r5, 80077be <__d2b+0x96>
 800778c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007790:	4405      	add	r5, r0
 8007792:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007796:	603d      	str	r5, [r7, #0]
 8007798:	6030      	str	r0, [r6, #0]
 800779a:	4620      	mov	r0, r4
 800779c:	b002      	add	sp, #8
 800779e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077a6:	e7d6      	b.n	8007756 <__d2b+0x2e>
 80077a8:	6161      	str	r1, [r4, #20]
 80077aa:	e7e7      	b.n	800777c <__d2b+0x54>
 80077ac:	a801      	add	r0, sp, #4
 80077ae:	f7ff fd61 	bl	8007274 <__lo0bits>
 80077b2:	2101      	movs	r1, #1
 80077b4:	9b01      	ldr	r3, [sp, #4]
 80077b6:	6121      	str	r1, [r4, #16]
 80077b8:	6163      	str	r3, [r4, #20]
 80077ba:	3020      	adds	r0, #32
 80077bc:	e7e5      	b.n	800778a <__d2b+0x62>
 80077be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80077c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077c6:	6038      	str	r0, [r7, #0]
 80077c8:	6918      	ldr	r0, [r3, #16]
 80077ca:	f7ff fd33 	bl	8007234 <__hi0bits>
 80077ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80077d2:	6031      	str	r1, [r6, #0]
 80077d4:	e7e1      	b.n	800779a <__d2b+0x72>
 80077d6:	bf00      	nop
 80077d8:	08008287 	.word	0x08008287
 80077dc:	080082f8 	.word	0x080082f8

080077e0 <_calloc_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	fb02 f501 	mul.w	r5, r2, r1
 80077e6:	4629      	mov	r1, r5
 80077e8:	f7fd fd62 	bl	80052b0 <_malloc_r>
 80077ec:	4604      	mov	r4, r0
 80077ee:	b118      	cbz	r0, 80077f8 <_calloc_r+0x18>
 80077f0:	462a      	mov	r2, r5
 80077f2:	2100      	movs	r1, #0
 80077f4:	f7fd fd08 	bl	8005208 <memset>
 80077f8:	4620      	mov	r0, r4
 80077fa:	bd38      	pop	{r3, r4, r5, pc}

080077fc <__ssputs_r>:
 80077fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	688e      	ldr	r6, [r1, #8]
 8007802:	4682      	mov	sl, r0
 8007804:	429e      	cmp	r6, r3
 8007806:	460c      	mov	r4, r1
 8007808:	4690      	mov	r8, r2
 800780a:	461f      	mov	r7, r3
 800780c:	d838      	bhi.n	8007880 <__ssputs_r+0x84>
 800780e:	898a      	ldrh	r2, [r1, #12]
 8007810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007814:	d032      	beq.n	800787c <__ssputs_r+0x80>
 8007816:	6825      	ldr	r5, [r4, #0]
 8007818:	6909      	ldr	r1, [r1, #16]
 800781a:	3301      	adds	r3, #1
 800781c:	eba5 0901 	sub.w	r9, r5, r1
 8007820:	6965      	ldr	r5, [r4, #20]
 8007822:	444b      	add	r3, r9
 8007824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800782c:	106d      	asrs	r5, r5, #1
 800782e:	429d      	cmp	r5, r3
 8007830:	bf38      	it	cc
 8007832:	461d      	movcc	r5, r3
 8007834:	0553      	lsls	r3, r2, #21
 8007836:	d531      	bpl.n	800789c <__ssputs_r+0xa0>
 8007838:	4629      	mov	r1, r5
 800783a:	f7fd fd39 	bl	80052b0 <_malloc_r>
 800783e:	4606      	mov	r6, r0
 8007840:	b950      	cbnz	r0, 8007858 <__ssputs_r+0x5c>
 8007842:	230c      	movs	r3, #12
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	f8ca 3000 	str.w	r3, [sl]
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007858:	464a      	mov	r2, r9
 800785a:	6921      	ldr	r1, [r4, #16]
 800785c:	f7ff fc24 	bl	80070a8 <memcpy>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	6126      	str	r6, [r4, #16]
 800786e:	444e      	add	r6, r9
 8007870:	6026      	str	r6, [r4, #0]
 8007872:	463e      	mov	r6, r7
 8007874:	6165      	str	r5, [r4, #20]
 8007876:	eba5 0509 	sub.w	r5, r5, r9
 800787a:	60a5      	str	r5, [r4, #8]
 800787c:	42be      	cmp	r6, r7
 800787e:	d900      	bls.n	8007882 <__ssputs_r+0x86>
 8007880:	463e      	mov	r6, r7
 8007882:	4632      	mov	r2, r6
 8007884:	4641      	mov	r1, r8
 8007886:	6820      	ldr	r0, [r4, #0]
 8007888:	f000 fb48 	bl	8007f1c <memmove>
 800788c:	68a3      	ldr	r3, [r4, #8]
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	1b9b      	subs	r3, r3, r6
 8007892:	4432      	add	r2, r6
 8007894:	2000      	movs	r0, #0
 8007896:	60a3      	str	r3, [r4, #8]
 8007898:	6022      	str	r2, [r4, #0]
 800789a:	e7db      	b.n	8007854 <__ssputs_r+0x58>
 800789c:	462a      	mov	r2, r5
 800789e:	f000 fb57 	bl	8007f50 <_realloc_r>
 80078a2:	4606      	mov	r6, r0
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d1e1      	bne.n	800786c <__ssputs_r+0x70>
 80078a8:	4650      	mov	r0, sl
 80078aa:	6921      	ldr	r1, [r4, #16]
 80078ac:	f7fd fcb4 	bl	8005218 <_free_r>
 80078b0:	e7c7      	b.n	8007842 <__ssputs_r+0x46>
	...

080078b4 <_svfiprintf_r>:
 80078b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	4698      	mov	r8, r3
 80078ba:	898b      	ldrh	r3, [r1, #12]
 80078bc:	4607      	mov	r7, r0
 80078be:	061b      	lsls	r3, r3, #24
 80078c0:	460d      	mov	r5, r1
 80078c2:	4614      	mov	r4, r2
 80078c4:	b09d      	sub	sp, #116	; 0x74
 80078c6:	d50e      	bpl.n	80078e6 <_svfiprintf_r+0x32>
 80078c8:	690b      	ldr	r3, [r1, #16]
 80078ca:	b963      	cbnz	r3, 80078e6 <_svfiprintf_r+0x32>
 80078cc:	2140      	movs	r1, #64	; 0x40
 80078ce:	f7fd fcef 	bl	80052b0 <_malloc_r>
 80078d2:	6028      	str	r0, [r5, #0]
 80078d4:	6128      	str	r0, [r5, #16]
 80078d6:	b920      	cbnz	r0, 80078e2 <_svfiprintf_r+0x2e>
 80078d8:	230c      	movs	r3, #12
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	f04f 30ff 	mov.w	r0, #4294967295
 80078e0:	e0d1      	b.n	8007a86 <_svfiprintf_r+0x1d2>
 80078e2:	2340      	movs	r3, #64	; 0x40
 80078e4:	616b      	str	r3, [r5, #20]
 80078e6:	2300      	movs	r3, #0
 80078e8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ea:	2320      	movs	r3, #32
 80078ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078f0:	2330      	movs	r3, #48	; 0x30
 80078f2:	f04f 0901 	mov.w	r9, #1
 80078f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80078fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007aa0 <_svfiprintf_r+0x1ec>
 80078fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007902:	4623      	mov	r3, r4
 8007904:	469a      	mov	sl, r3
 8007906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800790a:	b10a      	cbz	r2, 8007910 <_svfiprintf_r+0x5c>
 800790c:	2a25      	cmp	r2, #37	; 0x25
 800790e:	d1f9      	bne.n	8007904 <_svfiprintf_r+0x50>
 8007910:	ebba 0b04 	subs.w	fp, sl, r4
 8007914:	d00b      	beq.n	800792e <_svfiprintf_r+0x7a>
 8007916:	465b      	mov	r3, fp
 8007918:	4622      	mov	r2, r4
 800791a:	4629      	mov	r1, r5
 800791c:	4638      	mov	r0, r7
 800791e:	f7ff ff6d 	bl	80077fc <__ssputs_r>
 8007922:	3001      	adds	r0, #1
 8007924:	f000 80aa 	beq.w	8007a7c <_svfiprintf_r+0x1c8>
 8007928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800792a:	445a      	add	r2, fp
 800792c:	9209      	str	r2, [sp, #36]	; 0x24
 800792e:	f89a 3000 	ldrb.w	r3, [sl]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80a2 	beq.w	8007a7c <_svfiprintf_r+0x1c8>
 8007938:	2300      	movs	r3, #0
 800793a:	f04f 32ff 	mov.w	r2, #4294967295
 800793e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007942:	f10a 0a01 	add.w	sl, sl, #1
 8007946:	9304      	str	r3, [sp, #16]
 8007948:	9307      	str	r3, [sp, #28]
 800794a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800794e:	931a      	str	r3, [sp, #104]	; 0x68
 8007950:	4654      	mov	r4, sl
 8007952:	2205      	movs	r2, #5
 8007954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007958:	4851      	ldr	r0, [pc, #324]	; (8007aa0 <_svfiprintf_r+0x1ec>)
 800795a:	f7ff fb97 	bl	800708c <memchr>
 800795e:	9a04      	ldr	r2, [sp, #16]
 8007960:	b9d8      	cbnz	r0, 800799a <_svfiprintf_r+0xe6>
 8007962:	06d0      	lsls	r0, r2, #27
 8007964:	bf44      	itt	mi
 8007966:	2320      	movmi	r3, #32
 8007968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800796c:	0711      	lsls	r1, r2, #28
 800796e:	bf44      	itt	mi
 8007970:	232b      	movmi	r3, #43	; 0x2b
 8007972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007976:	f89a 3000 	ldrb.w	r3, [sl]
 800797a:	2b2a      	cmp	r3, #42	; 0x2a
 800797c:	d015      	beq.n	80079aa <_svfiprintf_r+0xf6>
 800797e:	4654      	mov	r4, sl
 8007980:	2000      	movs	r0, #0
 8007982:	f04f 0c0a 	mov.w	ip, #10
 8007986:	9a07      	ldr	r2, [sp, #28]
 8007988:	4621      	mov	r1, r4
 800798a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798e:	3b30      	subs	r3, #48	; 0x30
 8007990:	2b09      	cmp	r3, #9
 8007992:	d94e      	bls.n	8007a32 <_svfiprintf_r+0x17e>
 8007994:	b1b0      	cbz	r0, 80079c4 <_svfiprintf_r+0x110>
 8007996:	9207      	str	r2, [sp, #28]
 8007998:	e014      	b.n	80079c4 <_svfiprintf_r+0x110>
 800799a:	eba0 0308 	sub.w	r3, r0, r8
 800799e:	fa09 f303 	lsl.w	r3, r9, r3
 80079a2:	4313      	orrs	r3, r2
 80079a4:	46a2      	mov	sl, r4
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	e7d2      	b.n	8007950 <_svfiprintf_r+0x9c>
 80079aa:	9b03      	ldr	r3, [sp, #12]
 80079ac:	1d19      	adds	r1, r3, #4
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	9103      	str	r1, [sp, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bfbb      	ittet	lt
 80079b6:	425b      	neglt	r3, r3
 80079b8:	f042 0202 	orrlt.w	r2, r2, #2
 80079bc:	9307      	strge	r3, [sp, #28]
 80079be:	9307      	strlt	r3, [sp, #28]
 80079c0:	bfb8      	it	lt
 80079c2:	9204      	strlt	r2, [sp, #16]
 80079c4:	7823      	ldrb	r3, [r4, #0]
 80079c6:	2b2e      	cmp	r3, #46	; 0x2e
 80079c8:	d10c      	bne.n	80079e4 <_svfiprintf_r+0x130>
 80079ca:	7863      	ldrb	r3, [r4, #1]
 80079cc:	2b2a      	cmp	r3, #42	; 0x2a
 80079ce:	d135      	bne.n	8007a3c <_svfiprintf_r+0x188>
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	3402      	adds	r4, #2
 80079d4:	1d1a      	adds	r2, r3, #4
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	9203      	str	r2, [sp, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bfb8      	it	lt
 80079de:	f04f 33ff 	movlt.w	r3, #4294967295
 80079e2:	9305      	str	r3, [sp, #20]
 80079e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ab0 <_svfiprintf_r+0x1fc>
 80079e8:	2203      	movs	r2, #3
 80079ea:	4650      	mov	r0, sl
 80079ec:	7821      	ldrb	r1, [r4, #0]
 80079ee:	f7ff fb4d 	bl	800708c <memchr>
 80079f2:	b140      	cbz	r0, 8007a06 <_svfiprintf_r+0x152>
 80079f4:	2340      	movs	r3, #64	; 0x40
 80079f6:	eba0 000a 	sub.w	r0, r0, sl
 80079fa:	fa03 f000 	lsl.w	r0, r3, r0
 80079fe:	9b04      	ldr	r3, [sp, #16]
 8007a00:	3401      	adds	r4, #1
 8007a02:	4303      	orrs	r3, r0
 8007a04:	9304      	str	r3, [sp, #16]
 8007a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a0a:	2206      	movs	r2, #6
 8007a0c:	4825      	ldr	r0, [pc, #148]	; (8007aa4 <_svfiprintf_r+0x1f0>)
 8007a0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a12:	f7ff fb3b 	bl	800708c <memchr>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d038      	beq.n	8007a8c <_svfiprintf_r+0x1d8>
 8007a1a:	4b23      	ldr	r3, [pc, #140]	; (8007aa8 <_svfiprintf_r+0x1f4>)
 8007a1c:	bb1b      	cbnz	r3, 8007a66 <_svfiprintf_r+0x1b2>
 8007a1e:	9b03      	ldr	r3, [sp, #12]
 8007a20:	3307      	adds	r3, #7
 8007a22:	f023 0307 	bic.w	r3, r3, #7
 8007a26:	3308      	adds	r3, #8
 8007a28:	9303      	str	r3, [sp, #12]
 8007a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2c:	4433      	add	r3, r6
 8007a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a30:	e767      	b.n	8007902 <_svfiprintf_r+0x4e>
 8007a32:	460c      	mov	r4, r1
 8007a34:	2001      	movs	r0, #1
 8007a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a3a:	e7a5      	b.n	8007988 <_svfiprintf_r+0xd4>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f04f 0c0a 	mov.w	ip, #10
 8007a42:	4619      	mov	r1, r3
 8007a44:	3401      	adds	r4, #1
 8007a46:	9305      	str	r3, [sp, #20]
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a4e:	3a30      	subs	r2, #48	; 0x30
 8007a50:	2a09      	cmp	r2, #9
 8007a52:	d903      	bls.n	8007a5c <_svfiprintf_r+0x1a8>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0c5      	beq.n	80079e4 <_svfiprintf_r+0x130>
 8007a58:	9105      	str	r1, [sp, #20]
 8007a5a:	e7c3      	b.n	80079e4 <_svfiprintf_r+0x130>
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	2301      	movs	r3, #1
 8007a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a64:	e7f0      	b.n	8007a48 <_svfiprintf_r+0x194>
 8007a66:	ab03      	add	r3, sp, #12
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	462a      	mov	r2, r5
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <_svfiprintf_r+0x1f8>)
 8007a70:	a904      	add	r1, sp, #16
 8007a72:	f7fd fd15 	bl	80054a0 <_printf_float>
 8007a76:	1c42      	adds	r2, r0, #1
 8007a78:	4606      	mov	r6, r0
 8007a7a:	d1d6      	bne.n	8007a2a <_svfiprintf_r+0x176>
 8007a7c:	89ab      	ldrh	r3, [r5, #12]
 8007a7e:	065b      	lsls	r3, r3, #25
 8007a80:	f53f af2c 	bmi.w	80078dc <_svfiprintf_r+0x28>
 8007a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a86:	b01d      	add	sp, #116	; 0x74
 8007a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8c:	ab03      	add	r3, sp, #12
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	462a      	mov	r2, r5
 8007a92:	4638      	mov	r0, r7
 8007a94:	4b05      	ldr	r3, [pc, #20]	; (8007aac <_svfiprintf_r+0x1f8>)
 8007a96:	a904      	add	r1, sp, #16
 8007a98:	f7fd ff9e 	bl	80059d8 <_printf_i>
 8007a9c:	e7eb      	b.n	8007a76 <_svfiprintf_r+0x1c2>
 8007a9e:	bf00      	nop
 8007aa0:	08008454 	.word	0x08008454
 8007aa4:	0800845e 	.word	0x0800845e
 8007aa8:	080054a1 	.word	0x080054a1
 8007aac:	080077fd 	.word	0x080077fd
 8007ab0:	0800845a 	.word	0x0800845a

08007ab4 <__sfputc_r>:
 8007ab4:	6893      	ldr	r3, [r2, #8]
 8007ab6:	b410      	push	{r4}
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	6093      	str	r3, [r2, #8]
 8007abe:	da07      	bge.n	8007ad0 <__sfputc_r+0x1c>
 8007ac0:	6994      	ldr	r4, [r2, #24]
 8007ac2:	42a3      	cmp	r3, r4
 8007ac4:	db01      	blt.n	8007aca <__sfputc_r+0x16>
 8007ac6:	290a      	cmp	r1, #10
 8007ac8:	d102      	bne.n	8007ad0 <__sfputc_r+0x1c>
 8007aca:	bc10      	pop	{r4}
 8007acc:	f7fe b97c 	b.w	8005dc8 <__swbuf_r>
 8007ad0:	6813      	ldr	r3, [r2, #0]
 8007ad2:	1c58      	adds	r0, r3, #1
 8007ad4:	6010      	str	r0, [r2, #0]
 8007ad6:	7019      	strb	r1, [r3, #0]
 8007ad8:	4608      	mov	r0, r1
 8007ada:	bc10      	pop	{r4}
 8007adc:	4770      	bx	lr

08007ade <__sfputs_r>:
 8007ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	460f      	mov	r7, r1
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	18d5      	adds	r5, r2, r3
 8007ae8:	42ac      	cmp	r4, r5
 8007aea:	d101      	bne.n	8007af0 <__sfputs_r+0x12>
 8007aec:	2000      	movs	r0, #0
 8007aee:	e007      	b.n	8007b00 <__sfputs_r+0x22>
 8007af0:	463a      	mov	r2, r7
 8007af2:	4630      	mov	r0, r6
 8007af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af8:	f7ff ffdc 	bl	8007ab4 <__sfputc_r>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d1f3      	bne.n	8007ae8 <__sfputs_r+0xa>
 8007b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b04 <_vfiprintf_r>:
 8007b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b08:	460d      	mov	r5, r1
 8007b0a:	4614      	mov	r4, r2
 8007b0c:	4698      	mov	r8, r3
 8007b0e:	4606      	mov	r6, r0
 8007b10:	b09d      	sub	sp, #116	; 0x74
 8007b12:	b118      	cbz	r0, 8007b1c <_vfiprintf_r+0x18>
 8007b14:	6983      	ldr	r3, [r0, #24]
 8007b16:	b90b      	cbnz	r3, 8007b1c <_vfiprintf_r+0x18>
 8007b18:	f7ff f9ae 	bl	8006e78 <__sinit>
 8007b1c:	4b89      	ldr	r3, [pc, #548]	; (8007d44 <_vfiprintf_r+0x240>)
 8007b1e:	429d      	cmp	r5, r3
 8007b20:	d11b      	bne.n	8007b5a <_vfiprintf_r+0x56>
 8007b22:	6875      	ldr	r5, [r6, #4]
 8007b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b26:	07d9      	lsls	r1, r3, #31
 8007b28:	d405      	bmi.n	8007b36 <_vfiprintf_r+0x32>
 8007b2a:	89ab      	ldrh	r3, [r5, #12]
 8007b2c:	059a      	lsls	r2, r3, #22
 8007b2e:	d402      	bmi.n	8007b36 <_vfiprintf_r+0x32>
 8007b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b32:	f7ff fa44 	bl	8006fbe <__retarget_lock_acquire_recursive>
 8007b36:	89ab      	ldrh	r3, [r5, #12]
 8007b38:	071b      	lsls	r3, r3, #28
 8007b3a:	d501      	bpl.n	8007b40 <_vfiprintf_r+0x3c>
 8007b3c:	692b      	ldr	r3, [r5, #16]
 8007b3e:	b9eb      	cbnz	r3, 8007b7c <_vfiprintf_r+0x78>
 8007b40:	4629      	mov	r1, r5
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7fe f992 	bl	8005e6c <__swsetup_r>
 8007b48:	b1c0      	cbz	r0, 8007b7c <_vfiprintf_r+0x78>
 8007b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b4c:	07dc      	lsls	r4, r3, #31
 8007b4e:	d50e      	bpl.n	8007b6e <_vfiprintf_r+0x6a>
 8007b50:	f04f 30ff 	mov.w	r0, #4294967295
 8007b54:	b01d      	add	sp, #116	; 0x74
 8007b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5a:	4b7b      	ldr	r3, [pc, #492]	; (8007d48 <_vfiprintf_r+0x244>)
 8007b5c:	429d      	cmp	r5, r3
 8007b5e:	d101      	bne.n	8007b64 <_vfiprintf_r+0x60>
 8007b60:	68b5      	ldr	r5, [r6, #8]
 8007b62:	e7df      	b.n	8007b24 <_vfiprintf_r+0x20>
 8007b64:	4b79      	ldr	r3, [pc, #484]	; (8007d4c <_vfiprintf_r+0x248>)
 8007b66:	429d      	cmp	r5, r3
 8007b68:	bf08      	it	eq
 8007b6a:	68f5      	ldreq	r5, [r6, #12]
 8007b6c:	e7da      	b.n	8007b24 <_vfiprintf_r+0x20>
 8007b6e:	89ab      	ldrh	r3, [r5, #12]
 8007b70:	0598      	lsls	r0, r3, #22
 8007b72:	d4ed      	bmi.n	8007b50 <_vfiprintf_r+0x4c>
 8007b74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b76:	f7ff fa23 	bl	8006fc0 <__retarget_lock_release_recursive>
 8007b7a:	e7e9      	b.n	8007b50 <_vfiprintf_r+0x4c>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b80:	2320      	movs	r3, #32
 8007b82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b86:	2330      	movs	r3, #48	; 0x30
 8007b88:	f04f 0901 	mov.w	r9, #1
 8007b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007d50 <_vfiprintf_r+0x24c>
 8007b94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b98:	4623      	mov	r3, r4
 8007b9a:	469a      	mov	sl, r3
 8007b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ba0:	b10a      	cbz	r2, 8007ba6 <_vfiprintf_r+0xa2>
 8007ba2:	2a25      	cmp	r2, #37	; 0x25
 8007ba4:	d1f9      	bne.n	8007b9a <_vfiprintf_r+0x96>
 8007ba6:	ebba 0b04 	subs.w	fp, sl, r4
 8007baa:	d00b      	beq.n	8007bc4 <_vfiprintf_r+0xc0>
 8007bac:	465b      	mov	r3, fp
 8007bae:	4622      	mov	r2, r4
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f7ff ff93 	bl	8007ade <__sfputs_r>
 8007bb8:	3001      	adds	r0, #1
 8007bba:	f000 80aa 	beq.w	8007d12 <_vfiprintf_r+0x20e>
 8007bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bc0:	445a      	add	r2, fp
 8007bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 80a2 	beq.w	8007d12 <_vfiprintf_r+0x20e>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bd8:	f10a 0a01 	add.w	sl, sl, #1
 8007bdc:	9304      	str	r3, [sp, #16]
 8007bde:	9307      	str	r3, [sp, #28]
 8007be0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007be4:	931a      	str	r3, [sp, #104]	; 0x68
 8007be6:	4654      	mov	r4, sl
 8007be8:	2205      	movs	r2, #5
 8007bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bee:	4858      	ldr	r0, [pc, #352]	; (8007d50 <_vfiprintf_r+0x24c>)
 8007bf0:	f7ff fa4c 	bl	800708c <memchr>
 8007bf4:	9a04      	ldr	r2, [sp, #16]
 8007bf6:	b9d8      	cbnz	r0, 8007c30 <_vfiprintf_r+0x12c>
 8007bf8:	06d1      	lsls	r1, r2, #27
 8007bfa:	bf44      	itt	mi
 8007bfc:	2320      	movmi	r3, #32
 8007bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c02:	0713      	lsls	r3, r2, #28
 8007c04:	bf44      	itt	mi
 8007c06:	232b      	movmi	r3, #43	; 0x2b
 8007c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c10:	2b2a      	cmp	r3, #42	; 0x2a
 8007c12:	d015      	beq.n	8007c40 <_vfiprintf_r+0x13c>
 8007c14:	4654      	mov	r4, sl
 8007c16:	2000      	movs	r0, #0
 8007c18:	f04f 0c0a 	mov.w	ip, #10
 8007c1c:	9a07      	ldr	r2, [sp, #28]
 8007c1e:	4621      	mov	r1, r4
 8007c20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c24:	3b30      	subs	r3, #48	; 0x30
 8007c26:	2b09      	cmp	r3, #9
 8007c28:	d94e      	bls.n	8007cc8 <_vfiprintf_r+0x1c4>
 8007c2a:	b1b0      	cbz	r0, 8007c5a <_vfiprintf_r+0x156>
 8007c2c:	9207      	str	r2, [sp, #28]
 8007c2e:	e014      	b.n	8007c5a <_vfiprintf_r+0x156>
 8007c30:	eba0 0308 	sub.w	r3, r0, r8
 8007c34:	fa09 f303 	lsl.w	r3, r9, r3
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	46a2      	mov	sl, r4
 8007c3c:	9304      	str	r3, [sp, #16]
 8007c3e:	e7d2      	b.n	8007be6 <_vfiprintf_r+0xe2>
 8007c40:	9b03      	ldr	r3, [sp, #12]
 8007c42:	1d19      	adds	r1, r3, #4
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	9103      	str	r1, [sp, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	bfbb      	ittet	lt
 8007c4c:	425b      	neglt	r3, r3
 8007c4e:	f042 0202 	orrlt.w	r2, r2, #2
 8007c52:	9307      	strge	r3, [sp, #28]
 8007c54:	9307      	strlt	r3, [sp, #28]
 8007c56:	bfb8      	it	lt
 8007c58:	9204      	strlt	r2, [sp, #16]
 8007c5a:	7823      	ldrb	r3, [r4, #0]
 8007c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8007c5e:	d10c      	bne.n	8007c7a <_vfiprintf_r+0x176>
 8007c60:	7863      	ldrb	r3, [r4, #1]
 8007c62:	2b2a      	cmp	r3, #42	; 0x2a
 8007c64:	d135      	bne.n	8007cd2 <_vfiprintf_r+0x1ce>
 8007c66:	9b03      	ldr	r3, [sp, #12]
 8007c68:	3402      	adds	r4, #2
 8007c6a:	1d1a      	adds	r2, r3, #4
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	9203      	str	r2, [sp, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bfb8      	it	lt
 8007c74:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c78:	9305      	str	r3, [sp, #20]
 8007c7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d60 <_vfiprintf_r+0x25c>
 8007c7e:	2203      	movs	r2, #3
 8007c80:	4650      	mov	r0, sl
 8007c82:	7821      	ldrb	r1, [r4, #0]
 8007c84:	f7ff fa02 	bl	800708c <memchr>
 8007c88:	b140      	cbz	r0, 8007c9c <_vfiprintf_r+0x198>
 8007c8a:	2340      	movs	r3, #64	; 0x40
 8007c8c:	eba0 000a 	sub.w	r0, r0, sl
 8007c90:	fa03 f000 	lsl.w	r0, r3, r0
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	3401      	adds	r4, #1
 8007c98:	4303      	orrs	r3, r0
 8007c9a:	9304      	str	r3, [sp, #16]
 8007c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca0:	2206      	movs	r2, #6
 8007ca2:	482c      	ldr	r0, [pc, #176]	; (8007d54 <_vfiprintf_r+0x250>)
 8007ca4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ca8:	f7ff f9f0 	bl	800708c <memchr>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d03f      	beq.n	8007d30 <_vfiprintf_r+0x22c>
 8007cb0:	4b29      	ldr	r3, [pc, #164]	; (8007d58 <_vfiprintf_r+0x254>)
 8007cb2:	bb1b      	cbnz	r3, 8007cfc <_vfiprintf_r+0x1f8>
 8007cb4:	9b03      	ldr	r3, [sp, #12]
 8007cb6:	3307      	adds	r3, #7
 8007cb8:	f023 0307 	bic.w	r3, r3, #7
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	9303      	str	r3, [sp, #12]
 8007cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc2:	443b      	add	r3, r7
 8007cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc6:	e767      	b.n	8007b98 <_vfiprintf_r+0x94>
 8007cc8:	460c      	mov	r4, r1
 8007cca:	2001      	movs	r0, #1
 8007ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cd0:	e7a5      	b.n	8007c1e <_vfiprintf_r+0x11a>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f04f 0c0a 	mov.w	ip, #10
 8007cd8:	4619      	mov	r1, r3
 8007cda:	3401      	adds	r4, #1
 8007cdc:	9305      	str	r3, [sp, #20]
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ce4:	3a30      	subs	r2, #48	; 0x30
 8007ce6:	2a09      	cmp	r2, #9
 8007ce8:	d903      	bls.n	8007cf2 <_vfiprintf_r+0x1ee>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0c5      	beq.n	8007c7a <_vfiprintf_r+0x176>
 8007cee:	9105      	str	r1, [sp, #20]
 8007cf0:	e7c3      	b.n	8007c7a <_vfiprintf_r+0x176>
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cfa:	e7f0      	b.n	8007cde <_vfiprintf_r+0x1da>
 8007cfc:	ab03      	add	r3, sp, #12
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	462a      	mov	r2, r5
 8007d02:	4630      	mov	r0, r6
 8007d04:	4b15      	ldr	r3, [pc, #84]	; (8007d5c <_vfiprintf_r+0x258>)
 8007d06:	a904      	add	r1, sp, #16
 8007d08:	f7fd fbca 	bl	80054a0 <_printf_float>
 8007d0c:	4607      	mov	r7, r0
 8007d0e:	1c78      	adds	r0, r7, #1
 8007d10:	d1d6      	bne.n	8007cc0 <_vfiprintf_r+0x1bc>
 8007d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d14:	07d9      	lsls	r1, r3, #31
 8007d16:	d405      	bmi.n	8007d24 <_vfiprintf_r+0x220>
 8007d18:	89ab      	ldrh	r3, [r5, #12]
 8007d1a:	059a      	lsls	r2, r3, #22
 8007d1c:	d402      	bmi.n	8007d24 <_vfiprintf_r+0x220>
 8007d1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d20:	f7ff f94e 	bl	8006fc0 <__retarget_lock_release_recursive>
 8007d24:	89ab      	ldrh	r3, [r5, #12]
 8007d26:	065b      	lsls	r3, r3, #25
 8007d28:	f53f af12 	bmi.w	8007b50 <_vfiprintf_r+0x4c>
 8007d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d2e:	e711      	b.n	8007b54 <_vfiprintf_r+0x50>
 8007d30:	ab03      	add	r3, sp, #12
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	462a      	mov	r2, r5
 8007d36:	4630      	mov	r0, r6
 8007d38:	4b08      	ldr	r3, [pc, #32]	; (8007d5c <_vfiprintf_r+0x258>)
 8007d3a:	a904      	add	r1, sp, #16
 8007d3c:	f7fd fe4c 	bl	80059d8 <_printf_i>
 8007d40:	e7e4      	b.n	8007d0c <_vfiprintf_r+0x208>
 8007d42:	bf00      	nop
 8007d44:	080082b8 	.word	0x080082b8
 8007d48:	080082d8 	.word	0x080082d8
 8007d4c:	08008298 	.word	0x08008298
 8007d50:	08008454 	.word	0x08008454
 8007d54:	0800845e 	.word	0x0800845e
 8007d58:	080054a1 	.word	0x080054a1
 8007d5c:	08007adf 	.word	0x08007adf
 8007d60:	0800845a 	.word	0x0800845a

08007d64 <__sread>:
 8007d64:	b510      	push	{r4, lr}
 8007d66:	460c      	mov	r4, r1
 8007d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d6c:	f000 f916 	bl	8007f9c <_read_r>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	bfab      	itete	ge
 8007d74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d76:	89a3      	ldrhlt	r3, [r4, #12]
 8007d78:	181b      	addge	r3, r3, r0
 8007d7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d7e:	bfac      	ite	ge
 8007d80:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d82:	81a3      	strhlt	r3, [r4, #12]
 8007d84:	bd10      	pop	{r4, pc}

08007d86 <__swrite>:
 8007d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8a:	461f      	mov	r7, r3
 8007d8c:	898b      	ldrh	r3, [r1, #12]
 8007d8e:	4605      	mov	r5, r0
 8007d90:	05db      	lsls	r3, r3, #23
 8007d92:	460c      	mov	r4, r1
 8007d94:	4616      	mov	r6, r2
 8007d96:	d505      	bpl.n	8007da4 <__swrite+0x1e>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da0:	f000 f898 	bl	8007ed4 <_lseek_r>
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	4632      	mov	r2, r6
 8007da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	4628      	mov	r0, r5
 8007db0:	463b      	mov	r3, r7
 8007db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dba:	f000 b817 	b.w	8007dec <_write_r>

08007dbe <__sseek>:
 8007dbe:	b510      	push	{r4, lr}
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc6:	f000 f885 	bl	8007ed4 <_lseek_r>
 8007dca:	1c43      	adds	r3, r0, #1
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	bf15      	itete	ne
 8007dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dda:	81a3      	strheq	r3, [r4, #12]
 8007ddc:	bf18      	it	ne
 8007dde:	81a3      	strhne	r3, [r4, #12]
 8007de0:	bd10      	pop	{r4, pc}

08007de2 <__sclose>:
 8007de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de6:	f000 b831 	b.w	8007e4c <_close_r>
	...

08007dec <_write_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	2200      	movs	r2, #0
 8007df6:	4d05      	ldr	r5, [pc, #20]	; (8007e0c <_write_r+0x20>)
 8007df8:	602a      	str	r2, [r5, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f7f9 ff30 	bl	8001c60 <_write>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_write_r+0x1e>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_write_r+0x1e>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	2000036c 	.word	0x2000036c

08007e10 <__assert_func>:
 8007e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e12:	4614      	mov	r4, r2
 8007e14:	461a      	mov	r2, r3
 8007e16:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <__assert_func+0x2c>)
 8007e18:	4605      	mov	r5, r0
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68d8      	ldr	r0, [r3, #12]
 8007e1e:	b14c      	cbz	r4, 8007e34 <__assert_func+0x24>
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <__assert_func+0x30>)
 8007e22:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e26:	9100      	str	r1, [sp, #0]
 8007e28:	462b      	mov	r3, r5
 8007e2a:	4906      	ldr	r1, [pc, #24]	; (8007e44 <__assert_func+0x34>)
 8007e2c:	f000 f81e 	bl	8007e6c <fiprintf>
 8007e30:	f000 f8d3 	bl	8007fda <abort>
 8007e34:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <__assert_func+0x38>)
 8007e36:	461c      	mov	r4, r3
 8007e38:	e7f3      	b.n	8007e22 <__assert_func+0x12>
 8007e3a:	bf00      	nop
 8007e3c:	2000000c 	.word	0x2000000c
 8007e40:	08008465 	.word	0x08008465
 8007e44:	08008472 	.word	0x08008472
 8007e48:	080084a0 	.word	0x080084a0

08007e4c <_close_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4d05      	ldr	r5, [pc, #20]	; (8007e68 <_close_r+0x1c>)
 8007e52:	4604      	mov	r4, r0
 8007e54:	4608      	mov	r0, r1
 8007e56:	602b      	str	r3, [r5, #0]
 8007e58:	f7f9 ff1e 	bl	8001c98 <_close>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_close_r+0x1a>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_close_r+0x1a>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	2000036c 	.word	0x2000036c

08007e6c <fiprintf>:
 8007e6c:	b40e      	push	{r1, r2, r3}
 8007e6e:	b503      	push	{r0, r1, lr}
 8007e70:	4601      	mov	r1, r0
 8007e72:	ab03      	add	r3, sp, #12
 8007e74:	4805      	ldr	r0, [pc, #20]	; (8007e8c <fiprintf+0x20>)
 8007e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e7a:	6800      	ldr	r0, [r0, #0]
 8007e7c:	9301      	str	r3, [sp, #4]
 8007e7e:	f7ff fe41 	bl	8007b04 <_vfiprintf_r>
 8007e82:	b002      	add	sp, #8
 8007e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e88:	b003      	add	sp, #12
 8007e8a:	4770      	bx	lr
 8007e8c:	2000000c 	.word	0x2000000c

08007e90 <_fstat_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	2300      	movs	r3, #0
 8007e94:	4d06      	ldr	r5, [pc, #24]	; (8007eb0 <_fstat_r+0x20>)
 8007e96:	4604      	mov	r4, r0
 8007e98:	4608      	mov	r0, r1
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	602b      	str	r3, [r5, #0]
 8007e9e:	f7f9 ff06 	bl	8001cae <_fstat>
 8007ea2:	1c43      	adds	r3, r0, #1
 8007ea4:	d102      	bne.n	8007eac <_fstat_r+0x1c>
 8007ea6:	682b      	ldr	r3, [r5, #0]
 8007ea8:	b103      	cbz	r3, 8007eac <_fstat_r+0x1c>
 8007eaa:	6023      	str	r3, [r4, #0]
 8007eac:	bd38      	pop	{r3, r4, r5, pc}
 8007eae:	bf00      	nop
 8007eb0:	2000036c 	.word	0x2000036c

08007eb4 <_isatty_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	4d05      	ldr	r5, [pc, #20]	; (8007ed0 <_isatty_r+0x1c>)
 8007eba:	4604      	mov	r4, r0
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	602b      	str	r3, [r5, #0]
 8007ec0:	f7f9 ff04 	bl	8001ccc <_isatty>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_isatty_r+0x1a>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_isatty_r+0x1a>
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	2000036c 	.word	0x2000036c

08007ed4 <_lseek_r>:
 8007ed4:	b538      	push	{r3, r4, r5, lr}
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	4608      	mov	r0, r1
 8007eda:	4611      	mov	r1, r2
 8007edc:	2200      	movs	r2, #0
 8007ede:	4d05      	ldr	r5, [pc, #20]	; (8007ef4 <_lseek_r+0x20>)
 8007ee0:	602a      	str	r2, [r5, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f7f9 fefc 	bl	8001ce0 <_lseek>
 8007ee8:	1c43      	adds	r3, r0, #1
 8007eea:	d102      	bne.n	8007ef2 <_lseek_r+0x1e>
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	b103      	cbz	r3, 8007ef2 <_lseek_r+0x1e>
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
 8007ef4:	2000036c 	.word	0x2000036c

08007ef8 <__ascii_mbtowc>:
 8007ef8:	b082      	sub	sp, #8
 8007efa:	b901      	cbnz	r1, 8007efe <__ascii_mbtowc+0x6>
 8007efc:	a901      	add	r1, sp, #4
 8007efe:	b142      	cbz	r2, 8007f12 <__ascii_mbtowc+0x1a>
 8007f00:	b14b      	cbz	r3, 8007f16 <__ascii_mbtowc+0x1e>
 8007f02:	7813      	ldrb	r3, [r2, #0]
 8007f04:	600b      	str	r3, [r1, #0]
 8007f06:	7812      	ldrb	r2, [r2, #0]
 8007f08:	1e10      	subs	r0, r2, #0
 8007f0a:	bf18      	it	ne
 8007f0c:	2001      	movne	r0, #1
 8007f0e:	b002      	add	sp, #8
 8007f10:	4770      	bx	lr
 8007f12:	4610      	mov	r0, r2
 8007f14:	e7fb      	b.n	8007f0e <__ascii_mbtowc+0x16>
 8007f16:	f06f 0001 	mvn.w	r0, #1
 8007f1a:	e7f8      	b.n	8007f0e <__ascii_mbtowc+0x16>

08007f1c <memmove>:
 8007f1c:	4288      	cmp	r0, r1
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	eb01 0402 	add.w	r4, r1, r2
 8007f24:	d902      	bls.n	8007f2c <memmove+0x10>
 8007f26:	4284      	cmp	r4, r0
 8007f28:	4623      	mov	r3, r4
 8007f2a:	d807      	bhi.n	8007f3c <memmove+0x20>
 8007f2c:	1e43      	subs	r3, r0, #1
 8007f2e:	42a1      	cmp	r1, r4
 8007f30:	d008      	beq.n	8007f44 <memmove+0x28>
 8007f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f3a:	e7f8      	b.n	8007f2e <memmove+0x12>
 8007f3c:	4601      	mov	r1, r0
 8007f3e:	4402      	add	r2, r0
 8007f40:	428a      	cmp	r2, r1
 8007f42:	d100      	bne.n	8007f46 <memmove+0x2a>
 8007f44:	bd10      	pop	{r4, pc}
 8007f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f4e:	e7f7      	b.n	8007f40 <memmove+0x24>

08007f50 <_realloc_r>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	4607      	mov	r7, r0
 8007f54:	4614      	mov	r4, r2
 8007f56:	460e      	mov	r6, r1
 8007f58:	b921      	cbnz	r1, 8007f64 <_realloc_r+0x14>
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f60:	f7fd b9a6 	b.w	80052b0 <_malloc_r>
 8007f64:	b922      	cbnz	r2, 8007f70 <_realloc_r+0x20>
 8007f66:	f7fd f957 	bl	8005218 <_free_r>
 8007f6a:	4625      	mov	r5, r4
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f70:	f000 f83a 	bl	8007fe8 <_malloc_usable_size_r>
 8007f74:	42a0      	cmp	r0, r4
 8007f76:	d20f      	bcs.n	8007f98 <_realloc_r+0x48>
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	f7fd f998 	bl	80052b0 <_malloc_r>
 8007f80:	4605      	mov	r5, r0
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d0f2      	beq.n	8007f6c <_realloc_r+0x1c>
 8007f86:	4631      	mov	r1, r6
 8007f88:	4622      	mov	r2, r4
 8007f8a:	f7ff f88d 	bl	80070a8 <memcpy>
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4638      	mov	r0, r7
 8007f92:	f7fd f941 	bl	8005218 <_free_r>
 8007f96:	e7e9      	b.n	8007f6c <_realloc_r+0x1c>
 8007f98:	4635      	mov	r5, r6
 8007f9a:	e7e7      	b.n	8007f6c <_realloc_r+0x1c>

08007f9c <_read_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	4d05      	ldr	r5, [pc, #20]	; (8007fbc <_read_r+0x20>)
 8007fa8:	602a      	str	r2, [r5, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f7f9 fe3b 	bl	8001c26 <_read>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_read_r+0x1e>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_read_r+0x1e>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	2000036c 	.word	0x2000036c

08007fc0 <__ascii_wctomb>:
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	4608      	mov	r0, r1
 8007fc4:	b141      	cbz	r1, 8007fd8 <__ascii_wctomb+0x18>
 8007fc6:	2aff      	cmp	r2, #255	; 0xff
 8007fc8:	d904      	bls.n	8007fd4 <__ascii_wctomb+0x14>
 8007fca:	228a      	movs	r2, #138	; 0x8a
 8007fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	4770      	bx	lr
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	700a      	strb	r2, [r1, #0]
 8007fd8:	4770      	bx	lr

08007fda <abort>:
 8007fda:	2006      	movs	r0, #6
 8007fdc:	b508      	push	{r3, lr}
 8007fde:	f000 f833 	bl	8008048 <raise>
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	f7f9 fe15 	bl	8001c12 <_exit>

08007fe8 <_malloc_usable_size_r>:
 8007fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fec:	1f18      	subs	r0, r3, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bfbc      	itt	lt
 8007ff2:	580b      	ldrlt	r3, [r1, r0]
 8007ff4:	18c0      	addlt	r0, r0, r3
 8007ff6:	4770      	bx	lr

08007ff8 <_raise_r>:
 8007ff8:	291f      	cmp	r1, #31
 8007ffa:	b538      	push	{r3, r4, r5, lr}
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	460d      	mov	r5, r1
 8008000:	d904      	bls.n	800800c <_raise_r+0x14>
 8008002:	2316      	movs	r3, #22
 8008004:	6003      	str	r3, [r0, #0]
 8008006:	f04f 30ff 	mov.w	r0, #4294967295
 800800a:	bd38      	pop	{r3, r4, r5, pc}
 800800c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800800e:	b112      	cbz	r2, 8008016 <_raise_r+0x1e>
 8008010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008014:	b94b      	cbnz	r3, 800802a <_raise_r+0x32>
 8008016:	4620      	mov	r0, r4
 8008018:	f000 f830 	bl	800807c <_getpid_r>
 800801c:	462a      	mov	r2, r5
 800801e:	4601      	mov	r1, r0
 8008020:	4620      	mov	r0, r4
 8008022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008026:	f000 b817 	b.w	8008058 <_kill_r>
 800802a:	2b01      	cmp	r3, #1
 800802c:	d00a      	beq.n	8008044 <_raise_r+0x4c>
 800802e:	1c59      	adds	r1, r3, #1
 8008030:	d103      	bne.n	800803a <_raise_r+0x42>
 8008032:	2316      	movs	r3, #22
 8008034:	6003      	str	r3, [r0, #0]
 8008036:	2001      	movs	r0, #1
 8008038:	e7e7      	b.n	800800a <_raise_r+0x12>
 800803a:	2400      	movs	r4, #0
 800803c:	4628      	mov	r0, r5
 800803e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008042:	4798      	blx	r3
 8008044:	2000      	movs	r0, #0
 8008046:	e7e0      	b.n	800800a <_raise_r+0x12>

08008048 <raise>:
 8008048:	4b02      	ldr	r3, [pc, #8]	; (8008054 <raise+0xc>)
 800804a:	4601      	mov	r1, r0
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	f7ff bfd3 	b.w	8007ff8 <_raise_r>
 8008052:	bf00      	nop
 8008054:	2000000c 	.word	0x2000000c

08008058 <_kill_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	2300      	movs	r3, #0
 800805c:	4d06      	ldr	r5, [pc, #24]	; (8008078 <_kill_r+0x20>)
 800805e:	4604      	mov	r4, r0
 8008060:	4608      	mov	r0, r1
 8008062:	4611      	mov	r1, r2
 8008064:	602b      	str	r3, [r5, #0]
 8008066:	f7f9 fdc4 	bl	8001bf2 <_kill>
 800806a:	1c43      	adds	r3, r0, #1
 800806c:	d102      	bne.n	8008074 <_kill_r+0x1c>
 800806e:	682b      	ldr	r3, [r5, #0]
 8008070:	b103      	cbz	r3, 8008074 <_kill_r+0x1c>
 8008072:	6023      	str	r3, [r4, #0]
 8008074:	bd38      	pop	{r3, r4, r5, pc}
 8008076:	bf00      	nop
 8008078:	2000036c 	.word	0x2000036c

0800807c <_getpid_r>:
 800807c:	f7f9 bdb2 	b.w	8001be4 <_getpid>

08008080 <_init>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	bf00      	nop
 8008084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008086:	bc08      	pop	{r3}
 8008088:	469e      	mov	lr, r3
 800808a:	4770      	bx	lr

0800808c <_fini>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	bf00      	nop
 8008090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008092:	bc08      	pop	{r3}
 8008094:	469e      	mov	lr, r3
 8008096:	4770      	bx	lr
